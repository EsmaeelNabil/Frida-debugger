# 1 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 424 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 23 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 1 3
# 78 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 3
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_header_macro.h" 1 3
# 79 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 2 3



# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_ptrdiff_t.h" 1 3
# 18 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_ptrdiff_t.h" 3
typedef long int ptrdiff_t;
# 83 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 2 3




# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_size_t.h" 1 3
# 18 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_size_t.h" 3
typedef long unsigned int size_t;
# 88 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 2 3
# 97 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 3
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_wchar_t.h" 1 3
# 24 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_wchar_t.h" 3
typedef int wchar_t;
# 98 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 2 3




# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_null.h" 1 3
# 103 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 2 3
# 117 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 3
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_max_align_t.h" 1 3
# 16 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_max_align_t.h" 3
typedef long double max_align_t;
# 118 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 2 3




# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stddef_offsetof.h" 1 3
# 123 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stddef.h" 2 3
# 24 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 562 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/limits.h" 1 3
# 21 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/limits.h" 3
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/limits.h" 1 3 4
# 63 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/limits.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 1 3 4
# 782 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 783 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 2 3 4
# 848 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_posix_availability.h" 1 3 4
# 849 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h" 2 3 4
# 64 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/limits.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/limits.h" 1 3 4
# 11 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/limits.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/limits.h" 1 3 4
# 45 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/limits.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_limits.h" 1 3 4
# 46 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/limits.h" 2 3 4
# 12 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/limits.h" 2 3 4
# 65 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/limits.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/syslimits.h" 1 3 4
# 66 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/limits.h" 2 3 4
# 22 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/limits.h" 2 3
# 563 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/float.h" 1 3
# 28 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/float.h" 3
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/float.h" 1 3 4
# 29 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/float.h" 2 3
# 564 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 586 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef signed char gint8;
typedef unsigned char guint8;
typedef signed short gint16;
typedef unsigned short guint16;



typedef signed int gint32;
typedef unsigned int guint32;




__extension__ typedef signed long long gint64;
__extension__ typedef unsigned long long guint64;
# 610 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef signed long gssize;
typedef unsigned long gsize;







typedef gint64 goffset;
# 631 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef signed long gintptr;
typedef unsigned long guintptr;
# 698 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef int GPid;
# 1648 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h" 1 3 4
# 63 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 1 3 4
# 66 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types.h" 1 3 4
# 27 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types.h" 1 3 4
# 33 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_types.h" 1 3 4
# 34 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_types.h" 1 3 4
# 28 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 61 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;




typedef long int __darwin_ptrdiff_t;
# 87 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_types.h" 3 4
typedef long unsigned int __darwin_size_t;







typedef __builtin_va_list __darwin_va_list;







typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 35 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_types.h" 2 3 4
# 34 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types.h" 2 3 4
# 67 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];



# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h" 1 3 4
# 57 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h" 3 4
struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
# 95 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types.h" 2 3 4
# 28 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types.h" 2 3 4
# 40 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types.h" 3 4
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;
# 67 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/Availability.h" 1 3 4
# 176 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/Availability.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/AvailabilityVersions.h" 1 3 4
# 177 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/Availability.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/AvailabilityInternal.h" 1 3 4
# 178 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/Availability.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/AvailabilityInternalLegacy.h" 1 3 4
# 179 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/Availability.h" 2 3 4
# 69 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/types.h" 1 3 4
# 37 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 1 3 4
# 55 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h" 3 4
typedef signed char int8_t;
# 56 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h" 3 4
typedef short int16_t;
# 57 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h" 3 4
typedef int int32_t;
# 58 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h" 3 4
typedef long long int64_t;
# 59 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h" 3 4
typedef unsigned char u_int8_t;
# 61 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h" 3 4
typedef unsigned short u_int16_t;
# 62 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h" 3 4
typedef unsigned int u_int32_t;
# 63 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h" 3 4
typedef unsigned long long u_int64_t;
# 64 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4


typedef int64_t register_t;




# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h" 1 3 4
# 32 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h" 3 4
typedef __darwin_intptr_t intptr_t;
# 72 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h" 1 3 4
# 34 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h" 3 4
typedef unsigned long uintptr_t;
# 73 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 2 3 4




typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;
# 105 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/types.h" 3 4
typedef u_int64_t syscall_arg_t;
# 38 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/types.h" 2 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h" 2 3 4
typedef __darwin_clock_t clock_t;
# 70 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 71 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 72 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_time_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_time_t.h" 3 4
typedef __darwin_time_t time_t;
# 73 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h" 1 3 4
# 33 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h" 3 4
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 74 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 2 3 4

struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};
# 98 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 3 4
extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * restrict, size_t, const char * restrict, const struct tm * restrict) __asm("_" "strftime" );
char *strptime(const char * restrict, const char * restrict, struct tm * restrict) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * restrict, char * restrict);
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * restrict, struct tm * restrict);
struct tm *localtime_r(const time_t * restrict, struct tm * restrict);


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *__rqtp, struct timespec *__rmtp) __asm("_" "nanosleep" );
# 153 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 3 4
typedef enum {
_CLOCK_REALTIME __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 0,

_CLOCK_MONOTONIC __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 6,


_CLOCK_MONOTONIC_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 4,

_CLOCK_MONOTONIC_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 5,

_CLOCK_UPTIME_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 8,

_CLOCK_UPTIME_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 9,


_CLOCK_PROCESS_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 12,

_CLOCK_THREAD_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 16

} clockid_t;

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_getres(clockid_t __clock_id, struct timespec *__res);

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_gettime(clockid_t __clock_id, struct timespec *__tp);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
__uint64_t clock_gettime_nsec_np(clockid_t __clock_id);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable)))
int clock_settime(clockid_t __clock_id, const struct timespec *__tp);
# 198 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_time.h" 3 4
__attribute__((availability(macos,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)))
int timespec_get(struct timespec *ts, int base);
# 64 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h" 2 3 4
# 1649 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2

typedef char gchar;
typedef short gshort;
typedef long glong;
typedef int gint;
typedef gint gboolean;
typedef unsigned char guchar;
typedef unsigned short gushort;
typedef unsigned long gulong;
typedef unsigned int guint;
typedef float gfloat;
typedef double gdouble;
# 1673 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef void* gpointer;
typedef const void *gconstpointer;
typedef gint (*GCompareFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef gint (*GCompareDataFunc) (gconstpointer a,
                                                 gconstpointer b,
       gpointer user_data);
typedef gboolean (*GEqualFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef gboolean (*GEqualFuncFull) (gconstpointer a,
                                                 gconstpointer b,
                                                 gpointer user_data);
typedef void (*GDestroyNotify) (gpointer data);
typedef void (*GFunc) (gpointer data,
                                                 gpointer user_data);
typedef guint (*GHashFunc) (gconstpointer key);
typedef void (*GHFunc) (gpointer key,
                                                 gpointer value,
                                                 gpointer user_data);
typedef gpointer (*GCopyFunc) (gconstpointer src,
                                                 gpointer user_data);
typedef void (*GFreeFunc) (gpointer data);
typedef const gchar * (*GTranslateFunc) (const gchar *str,
       gpointer user_data);
# 1963 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef union _GDoubleIEEE754 GDoubleIEEE754;
typedef union _GFloatIEEE754 GFloatIEEE754;




union _GFloatIEEE754
{
  gfloat v_float;
  struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
  } mpn;
};
union _GDoubleIEEE754
{
  gdouble v_double;
  struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
  } mpn;
};
# 2011 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTimeVal GTimeVal __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));
struct _GTimeVal
{
  glong tv_sec;
  glong tv_usec;
} __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));
typedef gint grefcount;
typedef gint gatomicrefcount;


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.h" 1 3 4
# 58 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 1 3 4
# 64 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 65 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 66 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4




void *memchr(const void *__s, int __c, size_t __n);
int memcmp(const void *__s1, const void *__s2, size_t __n);
void *memcpy(void *__dst, const void *__src, size_t __n);
void *memmove(void *__dst, const void *__src, size_t __len);
void *memset(void *__b, int __c, size_t __len);
char *strcat(char *__s1, const char *__s2);
char *strchr(const char *__s, int __c);
int strcmp(const char *__s1, const char *__s2);
int strcoll(const char *__s1, const char *__s2);
char *strcpy(char *__dst, const char *__src);
size_t strcspn(const char *__s, const char *__charset);
char *strerror(int __errnum) __asm("_" "strerror" );
size_t strlen(const char *__s);
char *strncat(char *__s1, const char *__s2, size_t __n);
int strncmp(const char *__s1, const char *__s2, size_t __n);
char *strncpy(char *__dst, const char *__src, size_t __n);
char *strpbrk(const char *__s, const char *__charset);
char *strrchr(const char *__s, int __c);
size_t strspn(const char *__s, const char *__charset);
char *strstr(const char *__big, const char *__little);
char *strtok(char *__str, const char *__sep);
size_t strxfrm(char *__s1, const char *__s2, size_t __n);
# 104 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
char *strtok_r(char *__str, const char *__sep, char **__lasts);
# 116 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen);
char *strdup(const char *__s1);
void *memccpy(void *__dst, const void *__src, int __c, size_t __n);
# 130 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 3 4
char *stpcpy(char *__dst, const char *__src);
char *stpncpy(char *__dst, const char *__src, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strndup(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
size_t strnlen(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strsignal(int __sig);






# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 50 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h" 3 4
typedef __darwin_size_t rsize_t;
# 142 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h" 3 4
typedef int errno_t;
# 143 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4


errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n) __attribute__((availability(macosx,introduced=10.9)));






# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h" 3 4
typedef __darwin_ssize_t ssize_t;
# 153 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4


void *memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len) __attribute__((availability(macosx,introduced=10.7)));
void memset_pattern4(void *__b, const void *__pattern4, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern8(void *__b, const void *__pattern8, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern16(void *__b, const void *__pattern16, size_t __len) __attribute__((availability(macosx,introduced=10.5)));

char *strcasestr(const char *__big, const char *__little);
char *strnstr(const char *__big, const char *__little, size_t __len);
size_t strlcat(char *__dst, const char *__source, size_t __size);
size_t strlcpy(char *__dst, const char *__source, size_t __size);
void strmode(int __mode, char *__bp);
char *strsep(char **__stringp, const char *__delim);


void swab(const void * restrict, void * restrict, ssize_t);

__attribute__((availability(macosx,introduced=10.12.1))) __attribute__((availability(ios,introduced=10.1)))
__attribute__((availability(tvos,introduced=10.0.1))) __attribute__((availability(watchos,introduced=3.1)))
int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len);

__attribute__((availability(macosx,introduced=11.0))) __attribute__((availability(ios,introduced=14.0)))
__attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)))
int strsignal_r(int __sig, char *__strsignalbuf, size_t __buflen);





# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_strings.h" 1 3 4
# 65 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_strings.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 66 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_strings.h" 2 3 4




int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);





int ffsl(long) __attribute__((availability(macosx,introduced=10.5)));
int ffsll(long long) __attribute__((availability(macosx,introduced=10.9)));
int fls(int) __attribute__((availability(macosx,introduced=10.5)));
int flsl(long) __attribute__((availability(macosx,introduced=10.5)));
int flsll(long long) __attribute__((availability(macosx,introduced=10.9)));





# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/secure/_strings.h" 1 3 4
# 33 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/secure/_strings.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/secure/_common.h" 1 3 4
# 34 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/secure/_strings.h" 2 3 4
# 96 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_strings.h" 2 3 4
# 183 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4





# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/secure/_string.h" 1 3 4
# 189 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_string.h" 2 3 4
# 59 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.h" 2 3 4
# 2022 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 2057 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GBytes GBytes;
typedef struct _GArray GArray;
typedef struct _GByteArray GByteArray;
typedef struct _GPtrArray GPtrArray;
struct _GArray
{
  gchar *data;
  guint len;
};
struct _GByteArray
{
  guint8 *data;
  guint len;
};
struct _GPtrArray
{
  gpointer *pdata;
  guint len;
};




 extern
GArray* g_array_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size);
 extern
gpointer g_array_steal (GArray *array,
                                   gsize *len);
 extern
GArray* g_array_sized_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size,
       guint reserved_size);
 extern
GArray* g_array_copy (GArray *array);
 extern
gchar* g_array_free (GArray *array,
       gboolean free_segment);
 extern
GArray *g_array_ref (GArray *array);
 extern
void g_array_unref (GArray *array);
 extern
guint g_array_get_element_size (GArray *array);
 extern
GArray* g_array_append_vals (GArray *array,
       gconstpointer data,
       guint len);
 extern
GArray* g_array_prepend_vals (GArray *array,
       gconstpointer data,
       guint len);
 extern
GArray* g_array_insert_vals (GArray *array,
       guint index_,
       gconstpointer data,
       guint len);
 extern
GArray* g_array_set_size (GArray *array,
       guint length);
 extern
GArray* g_array_remove_index (GArray *array,
       guint index_);
 extern
GArray* g_array_remove_index_fast (GArray *array,
       guint index_);
 extern
GArray* g_array_remove_range (GArray *array,
       guint index_,
       guint length);
 extern
void g_array_sort (GArray *array,
       GCompareFunc compare_func);
 extern
void g_array_sort_with_data (GArray *array,
       GCompareDataFunc compare_func,
       gpointer user_data);
 extern
gboolean g_array_binary_search (GArray *array,
                                   gconstpointer target,
                                   GCompareFunc compare_func,
                                   guint *out_match_index);
 extern
void g_array_set_clear_func (GArray *array,
                                   GDestroyNotify clear_func);

 extern
GPtrArray* g_ptr_array_new (void);
 extern
GPtrArray* g_ptr_array_new_with_free_func (GDestroyNotify element_free_func);
 extern
gpointer* g_ptr_array_steal (GPtrArray *array,
                                            gsize *len);
 extern
GPtrArray *g_ptr_array_copy (GPtrArray *array,
                                           GCopyFunc func,
                                           gpointer user_data);
 extern
GPtrArray* g_ptr_array_sized_new (guint reserved_size);
 extern
GPtrArray* g_ptr_array_new_full (guint reserved_size,
        GDestroyNotify element_free_func);
 extern
GPtrArray* g_ptr_array_new_null_terminated (guint reserved_size,
                                            GDestroyNotify element_free_func,
                                            gboolean null_terminated);
 extern
gpointer* g_ptr_array_free (GPtrArray *array,
        gboolean free_seg);
 extern
GPtrArray* g_ptr_array_ref (GPtrArray *array);
 extern
void g_ptr_array_unref (GPtrArray *array);
 extern
void g_ptr_array_set_free_func (GPtrArray *array,
                                           GDestroyNotify element_free_func);
 extern
void g_ptr_array_set_size (GPtrArray *array,
        gint length);
 extern
gpointer g_ptr_array_remove_index (GPtrArray *array,
        guint index_);
 extern
gpointer g_ptr_array_remove_index_fast (GPtrArray *array,
        guint index_);
 extern
gpointer g_ptr_array_steal_index (GPtrArray *array,
                                           guint index_);
 extern
gpointer g_ptr_array_steal_index_fast (GPtrArray *array,
                                           guint index_);
 extern
gboolean g_ptr_array_remove (GPtrArray *array,
        gpointer data);
 extern
gboolean g_ptr_array_remove_fast (GPtrArray *array,
        gpointer data);
 extern
GPtrArray *g_ptr_array_remove_range (GPtrArray *array,
        guint index_,
        guint length);
 extern
void g_ptr_array_add (GPtrArray *array,
        gpointer data);
 extern
void g_ptr_array_extend (GPtrArray *array_to_extend,
                                           GPtrArray *array,
                                           GCopyFunc func,
                                           gpointer user_data);
 extern
void g_ptr_array_extend_and_steal (GPtrArray *array_to_extend,
                                           GPtrArray *array);
 extern
void g_ptr_array_insert (GPtrArray *array,
                                           gint index_,
                                           gpointer data);
 extern
void g_ptr_array_sort (GPtrArray *array,
        GCompareFunc compare_func);
 extern
void g_ptr_array_sort_with_data (GPtrArray *array,
        GCompareDataFunc compare_func,
        gpointer user_data);
 extern
void g_ptr_array_foreach (GPtrArray *array,
        GFunc func,
        gpointer user_data);
 extern
gboolean g_ptr_array_find (GPtrArray *haystack,
                                           gconstpointer needle,
                                           guint *index_);
 extern
gboolean g_ptr_array_find_with_equal_func (GPtrArray *haystack,
                                             gconstpointer needle,
                                             GEqualFunc equal_func,
                                             guint *index_);
 extern
gboolean g_ptr_array_is_null_terminated (GPtrArray *array);
 extern
GByteArray* g_byte_array_new (void);
 extern
GByteArray* g_byte_array_new_take (guint8 *data,
                                            gsize len);
 extern
guint8* g_byte_array_steal (GByteArray *array,
                                            gsize *len);
 extern
GByteArray* g_byte_array_sized_new (guint reserved_size);
 extern
guint8* g_byte_array_free (GByteArray *array,
         gboolean free_segment);
 extern
GBytes* g_byte_array_free_to_bytes (GByteArray *array);
 extern
GByteArray *g_byte_array_ref (GByteArray *array);
 extern
void g_byte_array_unref (GByteArray *array);
 extern
GByteArray* g_byte_array_append (GByteArray *array,
         const guint8 *data,
         guint len);
 extern
GByteArray* g_byte_array_prepend (GByteArray *array,
         const guint8 *data,
         guint len);
 extern
GByteArray* g_byte_array_set_size (GByteArray *array,
         guint length);
 extern
GByteArray* g_byte_array_remove_index (GByteArray *array,
         guint index_);
 extern
GByteArray* g_byte_array_remove_index_fast (GByteArray *array,
         guint index_);
 extern
GByteArray* g_byte_array_remove_range (GByteArray *array,
         guint index_,
         guint length);
 extern
void g_byte_array_sort (GByteArray *array,
         GCompareFunc compare_func);
 extern
void g_byte_array_sort_with_data (GByteArray *array,
         GCompareDataFunc compare_func,
         gpointer user_data);
# 2318 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gint g_atomic_int_get (const volatile gint *atomic);
 extern
void g_atomic_int_set (volatile gint *atomic,
                                                               gint newval);
 extern
void g_atomic_int_inc (volatile gint *atomic);
 extern
gboolean g_atomic_int_dec_and_test (volatile gint *atomic);
 extern
gboolean g_atomic_int_compare_and_exchange (volatile gint *atomic,
                                                               gint oldval,
                                                               gint newval);
 extern
gboolean g_atomic_int_compare_and_exchange_full (gint *atomic,
                                                                gint oldval,
                                                                gint newval,
                                                                gint *preval);
 extern
gint g_atomic_int_exchange (gint *atomic,
                                                               gint newval);
 extern
gint g_atomic_int_add (volatile gint *atomic,
                                                               gint val);
 extern
guint g_atomic_int_and (volatile guint *atomic,
                                                               guint val);
 extern
guint g_atomic_int_or (volatile guint *atomic,
                                                               guint val);
 extern
guint g_atomic_int_xor (volatile guint *atomic,
                                                               guint val);
 extern
gpointer g_atomic_pointer_get (const volatile void *atomic);
 extern
void g_atomic_pointer_set (volatile void *atomic,
                                                               gpointer newval);
 extern
gboolean g_atomic_pointer_compare_and_exchange (volatile void *atomic,
                                                               gpointer oldval,
                                                               gpointer newval);
 extern
gboolean g_atomic_pointer_compare_and_exchange_full (void *atomic,
                                                                    gpointer oldval,
                                                                    gpointer newval,
                                                                    void *preval);
 extern
gpointer g_atomic_pointer_exchange (void *atomic,
                                                               gpointer newval);
 extern
gssize g_atomic_pointer_add (volatile void *atomic,
                                                               gssize val);
 extern
gsize g_atomic_pointer_and (volatile void *atomic,
                                                               gsize val);
 extern
gsize g_atomic_pointer_or (volatile void *atomic,
                                                               gsize val);
 extern
gsize g_atomic_pointer_xor (volatile void *atomic,
                                                               gsize val);
__attribute__((__deprecated__("Use '" "g_atomic_int_add" "' instead"))) extern
gint g_atomic_int_exchange_and_add (volatile gint *atomic,
                                                               gint val);
# 2811 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 1 3
# 37 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 3
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stdarg_header_macro.h" 1 3
# 38 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 2 3



# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stdarg___gnuc_va_list.h" 1 3
# 12 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stdarg___gnuc_va_list.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 42 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 2 3




# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stdarg_va_list.h" 1 3
# 12 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stdarg_va_list.h" 3
typedef __builtin_va_list va_list;
# 47 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 2 3




# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stdarg_va_arg.h" 1 3
# 52 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 2 3




# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stdarg___va_copy.h" 1 3
# 57 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 2 3




# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/__stdarg_va_copy.h" 1 3
# 62 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 2 3
# 2812 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2






typedef guint32 GQuark;
 extern
GQuark g_quark_try_string (const gchar *string);
 extern
GQuark g_quark_from_static_string (const gchar *string);
 extern
GQuark g_quark_from_string (const gchar *string);
 extern
const gchar * g_quark_to_string (GQuark quark) __attribute__ ((__const__));
# 2838 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
const gchar * g_intern_string (const gchar *string);
 extern
const gchar * g_intern_static_string (const gchar *string);



typedef struct _GError GError;
struct _GError
{
  GQuark domain;
  gint code;
  gchar *message;
};
# 2905 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef void (*GErrorInitFunc) (GError *error);
typedef void (*GErrorCopyFunc) (const GError *src_error, GError *dest_error);
typedef void (*GErrorClearFunc) (GError *error);
 extern
GQuark g_error_domain_register_static (const char *error_type_name,
                                         gsize error_type_private_size,
                                         GErrorInitFunc error_type_init,
                                         GErrorCopyFunc error_type_copy,
                                         GErrorClearFunc error_type_clear);
 extern
GQuark g_error_domain_register (const char *error_type_name,
                                  gsize error_type_private_size,
                                  GErrorInitFunc error_type_init,
                                  GErrorCopyFunc error_type_copy,
                                  GErrorClearFunc error_type_clear);
 extern
GError* g_error_new (GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (__printf__, 3, 4)));
 extern
GError* g_error_new_literal (GQuark domain,
                                gint code,
                                const gchar *message);
 extern
GError* g_error_new_valist (GQuark domain,
                                gint code,
                                const gchar *format,
                                va_list args) __attribute__((__format__ (__printf__, 3, 0)));
 extern
void g_error_free (GError *error);
 extern
GError* g_error_copy (const GError *error);
 extern
gboolean g_error_matches (const GError *error,
                                GQuark domain,
                                gint code);
 extern
void g_set_error (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (__printf__, 4, 5)));
 extern
void g_set_error_literal (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *message);
 extern
void g_propagate_error (GError **dest,
    GError *src);
 extern
void g_clear_error (GError **err);
 extern
void g_prefix_error (GError **err,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_prefix_error_literal (GError **err,
                                       const gchar *prefix);
 extern
void g_propagate_prefixed_error (GError **dest,
                                       GError *src,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (__printf__, 3, 4)));







# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 1 3
# 2978 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2

 extern
const gchar * g_get_user_name (void);
 extern
const gchar * g_get_real_name (void);
 extern
const gchar * g_get_home_dir (void);
 extern
const gchar * g_get_tmp_dir (void);
 extern
const gchar * g_get_host_name (void);
 extern
const gchar * g_get_prgname (void);
 extern
void g_set_prgname (const gchar *prgname);
 extern
const gchar * g_get_application_name (void);
 extern
void g_set_application_name (const gchar *application_name);
 extern
gchar * g_get_os_info (const gchar *key_name);
# 3032 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_reload_user_special_dirs_cache (void);
 extern
const gchar * g_get_user_data_dir (void);
 extern
const gchar * g_get_user_config_dir (void);
 extern
const gchar * g_get_user_cache_dir (void);
 extern
const gchar * g_get_user_state_dir (void);
 extern
const gchar * const * g_get_system_data_dirs (void);
# 3056 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
const gchar * const * g_get_system_config_dirs (void);
 extern
const gchar * g_get_user_runtime_dir (void);
typedef enum {
  G_USER_DIRECTORY_DESKTOP,
  G_USER_DIRECTORY_DOCUMENTS,
  G_USER_DIRECTORY_DOWNLOAD,
  G_USER_DIRECTORY_MUSIC,
  G_USER_DIRECTORY_PICTURES,
  G_USER_DIRECTORY_PUBLIC_SHARE,
  G_USER_DIRECTORY_TEMPLATES,
  G_USER_DIRECTORY_VIDEOS,
  G_USER_N_DIRECTORIES
} GUserDirectory;
 extern
const gchar * g_get_user_special_dir (GUserDirectory directory);
typedef struct _GDebugKey GDebugKey;
struct _GDebugKey
{
  const gchar *key;
  guint value;
};
 extern
guint g_parse_debug_string (const gchar *string,
         const GDebugKey *keys,
         guint nkeys);
 extern
gint g_snprintf (gchar *string,
         gulong n,
         gchar const *format,
         ...) __attribute__((__format__ (__printf__, 3, 4)));
 extern
gint g_vsnprintf (gchar *string,
         gulong n,
         gchar const *format,
         va_list args)
         __attribute__((__format__ (__printf__, 3, 0)));
 extern
void g_nullify_pointer (gpointer *nullify_location);
typedef enum
{
  G_FORMAT_SIZE_DEFAULT = 0,
  G_FORMAT_SIZE_LONG_FORMAT = 1 << 0,
  G_FORMAT_SIZE_IEC_UNITS = 1 << 1,
  G_FORMAT_SIZE_BITS = 1 << 2,
  G_FORMAT_SIZE_ONLY_VALUE = 1 << 3,
  G_FORMAT_SIZE_ONLY_UNIT = 1 << 4
} GFormatSizeFlags;
 extern
gchar *g_format_size_full (guint64 size,
                             GFormatSizeFlags flags);
 extern
gchar *g_format_size (guint64 size);
__attribute__((__deprecated__("Use '" "g_format_size" "' instead"))) extern
gchar *g_format_size_for_display (goffset size);



typedef void (*GVoidFunc) (void) __attribute__((__deprecated__));

#pragma clang diagnostic push
# 3117 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_atexit (GVoidFunc func);
#pragma clang diagnostic pop






 extern
gchar* g_find_program_in_path (const gchar *program);



 extern
gint (g_bit_nth_lsf) (gulong mask,
                                 gint nth_bit);
 extern
gint (g_bit_nth_msf) (gulong mask,
                                 gint nth_bit);
 extern
guint (g_bit_storage) (gulong number);
static inline gint
g_bit_nth_lsf_impl (gulong mask,
                    gint nth_bit)
{
  if ((nth_bit < -1))
    nth_bit = -1;
  while (nth_bit < ((8 * 8) - 1))
    {
      nth_bit++;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}
static inline gint
g_bit_nth_msf_impl (gulong mask,
                    gint nth_bit)
{
  if (nth_bit < 0 || (nth_bit > 8 * 8))
    nth_bit = 8 * 8;
  while (nth_bit > 0)
    {
      nth_bit--;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}
static inline guint
g_bit_storage_impl (gulong number)
{




  guint n_bits = 0;
  do
    {
      n_bits++;
      number >>= 1;
    }
  while (number);
  return n_bits;

}


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h" 1 3 4
# 58 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 1 3 4
# 66 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 1 3 4
# 79 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;





# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_pid_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_pid_t.h" 3 4
typedef __darwin_pid_t pid_t;
# 90 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_id_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_id_t.h" 3 4
typedef __darwin_id_t id_t;
# 91 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 2 3 4
# 109 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 1 3 4
# 73 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/appleapiopts.h" 1 3 4
# 74 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4








# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/signal.h" 1 3 4
# 34 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/signal.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/signal.h" 1 3 4
# 17 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/signal.h" 3 4
typedef int sig_atomic_t;
# 35 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/signal.h" 2 3 4
# 83 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4
# 146 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_mcontext.h" 1 3 4
# 34 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_mcontext.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 1 3 4
# 36 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/machine/_structs.h" 1 3 4
# 35 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/machine/_structs.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 1 3 4
# 41 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_exception_state
{
 __uint32_t __exception;
 __uint32_t __fsr;
 __uint32_t __far;
};
# 59 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_exception_state64
{
 __uint64_t __far;
 __uint32_t __esr;
 __uint32_t __exception;
};

struct __darwin_arm_exception_state64_v2
{
 __uint64_t __far;
 __uint64_t __esr;
};
# 89 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_thread_state
{
 __uint32_t __r[13];
 __uint32_t __sp;
 __uint32_t __lr;
 __uint32_t __pc;
 __uint32_t __cpsr;
};
# 148 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_thread_state64
{
 __uint64_t __x[29];
 __uint64_t __fp;
 __uint64_t __lr;
 __uint64_t __sp;
 __uint64_t __pc;
 __uint32_t __cpsr;
 __uint32_t __pad;
};
# 519 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_vfp_state
{
 __uint32_t __r[64];
 __uint32_t __fpscr;
};
# 538 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_neon_state64
{
 __uint128_t __v[32];
 __uint32_t __fpsr;
 __uint32_t __fpcr;
};

struct __darwin_arm_neon_state
{
 __uint128_t __v[16];
 __uint32_t __fpsr;
 __uint32_t __fpcr;
};
# 609 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __arm_pagein_state
{
 int __pagein_error;
};
# 646 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __arm_legacy_debug_state
{
 __uint32_t __bvr[16];
 __uint32_t __bcr[16];
 __uint32_t __wvr[16];
 __uint32_t __wcr[16];
};
# 669 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_debug_state32
{
 __uint32_t __bvr[16];
 __uint32_t __bcr[16];
 __uint32_t __wvr[16];
 __uint32_t __wcr[16];
 __uint64_t __mdscr_el1;
};


struct __darwin_arm_debug_state64
{
 __uint64_t __bvr[16];
 __uint64_t __bcr[16];
 __uint64_t __wvr[16];
 __uint64_t __wcr[16];
 __uint64_t __mdscr_el1;
};
# 711 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/arm/_structs.h" 3 4
struct __darwin_arm_cpmu_state64
{
 __uint64_t __ctrs[16];
};
# 36 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/machine/_structs.h" 2 3 4
# 37 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 2 3 4




struct __darwin_mcontext32
{
 struct __darwin_arm_exception_state __es;
 struct __darwin_arm_thread_state __ss;
 struct __darwin_arm_vfp_state __fs;
};
# 64 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 3 4
struct __darwin_mcontext64
{
 struct __darwin_arm_exception_state64 __es;
 struct __darwin_arm_thread_state64 __ss;
 struct __darwin_arm_neon_state64 __ns;
};
# 85 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_mcontext.h" 3 4
typedef struct __darwin_mcontext64 *mcontext_t;
# 35 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_mcontext.h" 2 3 4
# 147 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_attr_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_attr_t.h" 3 4
typedef __darwin_pthread_attr_t pthread_attr_t;
# 149 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h" 1 3 4
# 42 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h" 3 4
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
# 151 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h" 1 3 4
# 43 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h" 3 4
struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};


typedef struct __darwin_ucontext ucontext_t;
# 152 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigset_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigset_t.h" 3 4
typedef __darwin_sigset_t sigset_t;
# 155 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 156 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h" 3 4
typedef __darwin_uid_t uid_t;
# 157 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 2 3 4

union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 269 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
     void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 331 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
typedef void (*sig_t)(int);
# 348 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
# 367 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 390 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/signal.h" 3 4
void(*signal(int, void (*)(int)))(int);
# 110 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 1 3 4
# 72 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdint.h" 1 3 4
# 52 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdint.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 1 3 4
# 23 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uint8_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uint8_t.h" 3 4
typedef unsigned char uint8_t;
# 24 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uint16_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uint16_t.h" 3 4
typedef unsigned short uint16_t;
# 25 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uint32_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uint32_t.h" 3 4
typedef unsigned int uint32_t;
# 26 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uint64_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uint64_t.h" 3 4
typedef unsigned long long uint64_t;
# 27 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 58 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_intmax_t.h" 1 3 4
# 32 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_intmax_t.h" 3 4
typedef long int intmax_t;
# 59 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uintmax_t.h" 1 3 4
# 32 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_types/_uintmax_t.h" 3 4
typedef long unsigned int uintmax_t;
# 60 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h" 2 3 4
# 53 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdint.h" 2 3 4
# 73 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 2 3 4







# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h" 1 3 4
# 34 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h" 3 4
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 81 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 2 3 4








typedef __uint64_t rlim_t;
# 152 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 163 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
# 200 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
typedef void *rusage_info_t;

struct rusage_info_v0 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
};

struct rusage_info_v1 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
};

struct rusage_info_v2 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
};

struct rusage_info_v3 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
};

struct rusage_info_v4 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
};

struct rusage_info_v5 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
 uint64_t ri_flags;
};

struct rusage_info_v6 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
 uint64_t ri_flags;
 uint64_t ri_user_ptime;
 uint64_t ri_system_ptime;
 uint64_t ri_pinstructions;
 uint64_t ri_pcycles;
 uint64_t ri_energy_nj;
 uint64_t ri_penergy_nj;
 uint64_t ri_secure_time_in_system;
 uint64_t ri_secure_ptime_in_system;
 uint64_t ri_neural_footprint;
 uint64_t ri_lifetime_max_neural_footprint;
 uint64_t ri_interval_max_neural_footprint;
 uint64_t ri_reserved[9];
};

typedef struct rusage_info_v6 rusage_info_current;
# 464 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 499 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
struct proc_rlimit_control_wakeupmon {
 uint32_t wm_flags;
 int32_t wm_rate;
};
# 570 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/resource.h" 3 4
int getpriority(int, id_t);

int getiopolicy_np(int, int) __attribute__((availability(macosx,introduced=10.5)));

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) __attribute__((availability(macosx,introduced=10.5)));

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );
# 111 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 2 3 4
# 186 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/endian.h" 1 3 4
# 37 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/endian.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/endian.h" 1 3 4
# 61 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/endian.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 1 3 4
# 94 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_endian.h" 1 3 4
# 37 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_endian.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_endian.h" 1 3 4
# 95 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_endian.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/__endian.h" 1 3 4
# 96 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/_endian.h" 2 3 4
# 38 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/_endian.h" 2 3 4
# 95 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 2 3 4
# 131 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 62 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/arm/_OSByteOrder.h" 1 3 4
# 48 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/arm/_OSByteOrder.h" 3 4
static inline
__uint16_t
_OSSwapInt16(
 __uint16_t _data
 )
{

 return (__uint16_t)(_data << 8 | _data >> 8);
}

static inline
__uint32_t
_OSSwapInt32(
 __uint32_t _data
 )
{

 _data = __builtin_bswap32(_data);





 return _data;
}

static inline
__uint64_t
_OSSwapInt64(
 __uint64_t _data
 )
{

 return __builtin_bswap64(_data);
# 95 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/arm/_OSByteOrder.h" 3 4
}
# 63 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h" 2 3 4
# 132 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_endian.h" 2 3 4
# 62 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/arm/endian.h" 2 3 4
# 38 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/machine/endian.h" 2 3 4
# 187 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 2 3 4







union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
      w_Coredump:1,
      w_Retcode:8,
      w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
      w_Stopsig:8,
      w_Filler:16;






 } w_S;
};
# 248 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h" 3 4
pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);
# 67 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/alloca.h" 1 3 4
# 29 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/alloca.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/alloca.h" 2 3 4


void *__builtin_alloca (size_t);
# 69 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4





# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 75 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ct_rune_t.h" 1 3 4
# 32 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ct_rune_t.h" 3 4
typedef __darwin_ct_rune_t ct_rune_t;
# 78 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_rune_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_rune_t.h" 3 4
typedef __darwin_rune_t rune_t;
# 79 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 82 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4

typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 101 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4
# 115 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
extern int __mb_cur_max;




# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 1 3 4
# 36 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 37 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 2 3 4







# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 1 3 4
# 27 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_ptrcheck.h" 1 3 4
# 28 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 2 3 4


typedef unsigned long long malloc_type_id_t;






# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 38 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 2 3 4
# 51 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc_type.h" 3 4
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_malloc(size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void malloc_type_free(void * ptr, malloc_type_id_t type_id);
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_realloc(void * ptr, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_valloc(size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));

__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) int malloc_type_posix_memalign(void * *memptr, size_t alignment, size_t size, malloc_type_id_t type_id) ;




typedef struct _malloc_zone_t malloc_zone_t;

__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2,3)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void malloc_type_zone_free(malloc_zone_t *zone, void * ptr, malloc_type_id_t type_id);
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_realloc(malloc_zone_t *zone, void * ptr, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(3)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_valloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
__attribute__((availability(macos,introduced=14.0))) __attribute__((availability(ios,introduced=17.0))) __attribute__((availability(tvos,introduced=17.0))) __attribute__((availability(watchos,introduced=10.0))) __attribute__((availability(visionos,introduced=1.0))) __attribute__((availability(driverkit,introduced=23.0))) void * malloc_type_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size, malloc_type_id_t type_id) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(3)));
# 45 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 2 3 4
# 54 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h" 3 4
void * malloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1))) ;
void * calloc(size_t __count, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2))) ;
void free(void * );
void * realloc(void * __ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2))) ;
void * reallocf(void * __ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));

void * valloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1))) ;




void * aligned_alloc(size_t __alignment, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_align(1))) __attribute__((alloc_size(2))) __attribute__((availability(macosx,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)));


int posix_memalign(void * *__memptr, size_t __alignment, size_t __size) __attribute__((availability(macosx,introduced=10.6)));
# 121 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_abort.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_abort.h" 3 4
void abort(void) __attribute__((__cold__)) __attribute__((__noreturn__));
# 122 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4


int abs(int) __attribute__((__const__));
int atexit(void (* _Nonnull)(void));


int at_quick_exit(void (*)(void));

double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (* _Nonnull __compar)(const void *, const void *));

div_t div(int, int) __attribute__((__const__));
void exit(int) __attribute__((__noreturn__));

char *getenv(const char *);
long labs(long) __attribute__((__const__));
ldiv_t ldiv(long, long) __attribute__((__const__));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);


int mblen(const char *__s, size_t __n);
size_t mbstowcs(wchar_t * restrict , const char * restrict, size_t);
int mbtowc(wchar_t * restrict, const char * restrict, size_t);

void qsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));


void quick_exit(int) __attribute__((__noreturn__));

int rand(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

void srand(unsigned) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *__str, char **__endptr, int __base);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *__str, char **__endptr, int __base);

unsigned long
  strtoul(const char *__str, char **__endptr, int __base);

unsigned long long
  strtoull(const char *__str, char **__endptr, int __base);


__attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead. (On iOS, process spawning is unavailable.)")))
__attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
int system(const char *) __asm("_" "system" );


size_t wcstombs(char * restrict, const wchar_t * restrict, size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((__noreturn__));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *restrict, int *restrict);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *restrict, int *restrict);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of mktemp(3), it is highly recommended that you use mkstemp(3) instead.")))

char *mktemp(char *);
int mkstemp(char *);
long mrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
long nrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int posix_openpt(int);
char *ptsname(int);


int ptsname_r(int fildes, char *buffer, size_t buflen) __attribute__((availability(macos,introduced=10.13.4))) __attribute__((availability(ios,introduced=11.3))) __attribute__((availability(tvos,introduced=11.3))) __attribute__((availability(watchos,introduced=4.3)));


int putenv(char *) __asm("_" "putenv" );
long random(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int rand_r(unsigned *) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

char *realpath(const char * restrict, char * restrict) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char * __name, const char * __value, int __overwrite) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );
# 257 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_dev_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_dev_t.h" 3 4
typedef __darwin_dev_t dev_t;
# 258 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_mode_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_mode_t.h" 3 4
typedef __darwin_mode_t mode_t;
# 259 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 2 3 4



uint32_t arc4random(void);
void arc4random_addrandom(unsigned char * , int )
    __attribute__((availability(macosx,introduced=10.0))) __attribute__((availability(macosx,deprecated=10.12,message="use arc4random_stir")))
    __attribute__((availability(ios,introduced=2.0))) __attribute__((availability(ios,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(tvos,introduced=2.0))) __attribute__((availability(tvos,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(watchos,introduced=1.0))) __attribute__((availability(watchos,deprecated=3.0,message="use arc4random_stir")));
void arc4random_buf(void * __buf, size_t __nbytes) __attribute__((availability(macosx,introduced=10.7)));
void arc4random_stir(void);
uint32_t
  arc4random_uniform(uint32_t __upper_bound) __attribute__((availability(macosx,introduced=10.7)));

int atexit_b(void (^ _Nonnull)(void)) __attribute__((availability(macosx,introduced=10.6)));
# 282 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
void *bsearch_b(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));



char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" ) __attribute__((availability(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);
void setprogname(const char *);
# 316 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_stdlib.h" 3 4
int heapsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int heapsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

int mergesort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int mergesort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void psort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *))
     __attribute__((availability(macosx,introduced=10.6)));

void psort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void psort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *))
     __attribute__((availability(macosx,introduced=10.6)));

void qsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *) __attribute__((__noescape__)))
     __attribute__((availability(macosx,introduced=10.6)));

void qsort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *));
int radixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
int rpmatch(const char *)
 __attribute__((availability(macos,introduced=10.15))) __attribute__((availability(ios,introduced=13.0))) __attribute__((availability(tvos,introduced=13.0))) __attribute__((availability(watchos,introduced=6.0)));
int sradixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
void sranddev(void);
void srandomdev(void);

long long
 strtonum(const char *__numstr, long long __minval, long long __maxval, const char **__errstrp)
 __attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=14.0))) __attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)));

long long
  strtoq(const char *__str, char **__endptr, int __base);
unsigned long long
  strtouq(const char *__str, char **__endptr, int __base);

extern char *suboptarg;
# 59 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h" 2 3 4
# 3188 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 3224 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GQuark g_thread_error_quark (void);
typedef enum
{
  G_THREAD_ERROR_AGAIN
} GThreadError;
typedef gpointer (*GThreadFunc) (gpointer user_data);
typedef void (*GThreadGarbageHandler) (gpointer data);
typedef struct _GThreadCallbacks GThreadCallbacks;
typedef struct _GThread GThread;
typedef union _GMutex GMutex;
typedef struct _GRecMutex GRecMutex;
typedef struct _GRWLock GRWLock;
typedef struct _GCond GCond;
typedef struct _GPrivate GPrivate;
typedef struct _GOnce GOnce;
typedef enum
{
  G_PRIVATE_DESTROY_LATE = 1 << 0,
  G_PRIVATE_DESTROY_LAST = 1 << 1,
} GPrivateFlags;
struct _GThreadCallbacks
{
  void (*on_thread_init) (void);
  void (*on_thread_realize) (void);
  void (*on_thread_dispose) (void);
  void (*on_thread_finalize) (void);
};
union _GMutex
{

  gpointer p;
  guint i[2];
};
struct _GRWLock
{

  gpointer p;
  guint i[2];
};
struct _GCond
{

  gpointer p;
  guint i[2];
};
struct _GRecMutex
{

  gpointer p;
  guint i[2];
};




struct _GPrivate
{

  gpointer p;
  GDestroyNotify notify;
  GPrivateFlags flags;
  gpointer future[1];
};
typedef enum
{
  G_ONCE_STATUS_NOTCALLED,
  G_ONCE_STATUS_PROGRESS,
  G_ONCE_STATUS_READY
} GOnceStatus;

struct _GOnce
{
  volatile GOnceStatus status;
  volatile gpointer retval;
};
# 3329 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern GThreadCallbacks *glib_thread_callbacks;
 extern
void g_thread_set_callbacks (GThreadCallbacks *callbacks);
 extern
void g_thread_set_garbage_handler (GThreadGarbageHandler handler,
                                                 gpointer user_data);
 extern
gboolean g_thread_garbage_collect (void);
 extern
GThread * g_thread_ref (GThread *thread);
 extern
void g_thread_unref (GThread *thread);
 extern
GThread * g_thread_new (const gchar *name,
                                                 GThreadFunc func,
                                                 gpointer data);
 extern
GThread * g_thread_try_new (const gchar *name,
                                                 GThreadFunc func,
                                                 gpointer data,
                                                 GError **error);
 extern
GThread * g_thread_self (void);
 extern
void g_thread_exit (gpointer retval);
 extern
gpointer g_thread_join (GThread *thread);
 extern
void g_thread_yield (void);
 extern
void g_mutex_init (GMutex *mutex);
 extern
void g_mutex_clear (GMutex *mutex);
 extern
void g_mutex_lock (GMutex *mutex);
 extern
gboolean g_mutex_trylock (GMutex *mutex);
 extern
void g_mutex_unlock (GMutex *mutex);
 extern
void g_rw_lock_init (GRWLock *rw_lock);
 extern
void g_rw_lock_clear (GRWLock *rw_lock);
 extern
void g_rw_lock_writer_lock (GRWLock *rw_lock);
 extern
gboolean g_rw_lock_writer_trylock (GRWLock *rw_lock);
 extern
void g_rw_lock_writer_unlock (GRWLock *rw_lock);
 extern
void g_rw_lock_reader_lock (GRWLock *rw_lock);
 extern
gboolean g_rw_lock_reader_trylock (GRWLock *rw_lock);
 extern
void g_rw_lock_reader_unlock (GRWLock *rw_lock);
 extern
void g_rec_mutex_init (GRecMutex *rec_mutex);
 extern
void g_rec_mutex_clear (GRecMutex *rec_mutex);
 extern
void g_rec_mutex_lock (GRecMutex *rec_mutex);
 extern
gboolean g_rec_mutex_trylock (GRecMutex *rec_mutex);
 extern
void g_rec_mutex_unlock (GRecMutex *rec_mutex);
 extern
void g_cond_init (GCond *cond);
 extern
void g_cond_clear (GCond *cond);
 extern
void g_cond_wait (GCond *cond,
                                                 GMutex *mutex);
 extern
void g_cond_signal (GCond *cond);
 extern
void g_cond_broadcast (GCond *cond);
 extern
gboolean g_cond_wait_until (GCond *cond,
                                                 GMutex *mutex,
                                                 gint64 end_time);
 extern
gpointer g_private_get (GPrivate *key);
 extern
void g_private_set (GPrivate *key,
                                                 gpointer value);
 extern
void g_private_replace (GPrivate *key,
                                                 gpointer value);
 extern
gpointer g_once_impl (GOnce *once,
                                                 GThreadFunc func,
                                                 gpointer arg);
 extern
gboolean g_once_init_enter (volatile void *location);
 extern
void g_once_init_leave (volatile void *location,
                                                 gsize result);
# 3454 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
guint g_get_num_processors (void);
typedef void GMutexLocker;

static inline GMutexLocker *
g_mutex_locker_new (GMutex *mutex)
{
  g_mutex_lock (mutex);
  return (GMutexLocker *) mutex;
}

static inline void
g_mutex_locker_free (GMutexLocker *locker)
{
  g_mutex_unlock ((GMutex *) locker);
}
typedef void GRecMutexLocker;
#pragma clang diagnostic push
# 3471 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline GRecMutexLocker *
g_rec_mutex_locker_new (GRecMutex *rec_mutex)
{
  g_rec_mutex_lock (rec_mutex);
  return (GRecMutexLocker *) rec_mutex;
}
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 3480 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline void
g_rec_mutex_locker_free (GRecMutexLocker *locker)
{
  g_rec_mutex_unlock ((GRecMutex *) locker);
}
#pragma clang diagnostic pop
typedef void GRWLockWriterLocker;
#pragma clang diagnostic push
# 3489 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline GRWLockWriterLocker *
g_rw_lock_writer_locker_new (GRWLock *rw_lock)
{
  g_rw_lock_writer_lock (rw_lock);
  return (GRWLockWriterLocker *) rw_lock;
}
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 3498 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline void
g_rw_lock_writer_locker_free (GRWLockWriterLocker *locker)
{
  g_rw_lock_writer_unlock ((GRWLock *) locker);
}
#pragma clang diagnostic pop
typedef void GRWLockReaderLocker;
#pragma clang diagnostic push
# 3507 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline GRWLockReaderLocker *
g_rw_lock_reader_locker_new (GRWLock *rw_lock)
{
  g_rw_lock_reader_lock (rw_lock);
  return (GRWLockReaderLocker *) rw_lock;
}
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 3516 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline void
g_rw_lock_reader_locker_free (GRWLockReaderLocker *locker)
{
  g_rw_lock_reader_unlock ((GRWLock *) locker);
}
#pragma clang diagnostic pop



typedef struct _GAsyncQueue GAsyncQueue;
 extern
GAsyncQueue *g_async_queue_new (void);
 extern
GAsyncQueue *g_async_queue_new_full (GDestroyNotify item_free_func);
 extern
void g_async_queue_lock (GAsyncQueue *queue);
 extern
void g_async_queue_unlock (GAsyncQueue *queue);
 extern
GAsyncQueue *g_async_queue_ref (GAsyncQueue *queue);
 extern
void g_async_queue_unref (GAsyncQueue *queue);
__attribute__((__deprecated__("Use '" "g_async_queue_ref" "' instead"))) extern
void g_async_queue_ref_unlocked (GAsyncQueue *queue);
__attribute__((__deprecated__("Use '" "g_async_queue_unref" "' instead"))) extern
void g_async_queue_unref_and_unlock (GAsyncQueue *queue);
 extern
void g_async_queue_push (GAsyncQueue *queue,
                                                 gpointer data);
 extern
void g_async_queue_push_unlocked (GAsyncQueue *queue,
                                                 gpointer data);
 extern
void g_async_queue_push_sorted (GAsyncQueue *queue,
                                                 gpointer data,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
void g_async_queue_push_sorted_unlocked (GAsyncQueue *queue,
                                                 gpointer data,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
gpointer g_async_queue_pop (GAsyncQueue *queue);
 extern
gpointer g_async_queue_pop_unlocked (GAsyncQueue *queue);
 extern
gpointer g_async_queue_try_pop (GAsyncQueue *queue);
 extern
gpointer g_async_queue_try_pop_unlocked (GAsyncQueue *queue);
 extern
gpointer g_async_queue_timeout_pop (GAsyncQueue *queue,
                                                 guint64 timeout);
 extern
gpointer g_async_queue_timeout_pop_unlocked (GAsyncQueue *queue,
                                                 guint64 timeout);
 extern
gint g_async_queue_length (GAsyncQueue *queue);
 extern
gint g_async_queue_length_unlocked (GAsyncQueue *queue);
 extern
void g_async_queue_sort (GAsyncQueue *queue,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
void g_async_queue_sort_unlocked (GAsyncQueue *queue,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
gboolean g_async_queue_remove (GAsyncQueue *queue,
                                                 gpointer item);
 extern
gboolean g_async_queue_remove_unlocked (GAsyncQueue *queue,
                                                 gpointer item);
 extern
void g_async_queue_push_front (GAsyncQueue *queue,
                                                 gpointer item);
 extern
void g_async_queue_push_front_unlocked (GAsyncQueue *queue,
                                                 gpointer item);
#pragma clang diagnostic push
# 3598 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_async_queue_timeout_pop" "' instead"))) extern
gpointer g_async_queue_timed_pop (GAsyncQueue *queue,
                                                 GTimeVal *end_time);
__attribute__((__deprecated__("Use '" "g_async_queue_timeout_pop_unlocked" "' instead"))) extern
gpointer g_async_queue_timed_pop_unlocked (GAsyncQueue *queue,
                                                 GTimeVal *end_time);
#pragma clang diagnostic pop
# 3616 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/signal.h" 1 3 4
# 66 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/signal.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_t.h" 3 4
typedef __darwin_pthread_t pthread_t;
# 67 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/signal.h" 2 3 4


extern const char *const sys_signame[32];
extern const char *const sys_siglist[32];



int raise(int);




void (* _Nullable bsd_signal(int, void (* _Nullable)(int)))(int);
int kill(pid_t, int) __asm("_" "kill" );
int killpg(pid_t, int) __asm("_" "killpg" );
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" );
int sigaction(int, const struct sigaction * restrict,
     struct sigaction * restrict);
int sigaddset(sigset_t *, int);
int sigaltstack(const stack_t * restrict, stack_t * restrict) __asm("_" "sigaltstack" ) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(const sigset_t *, int);
int sigpause(int) __asm("_" "sigpause" );
int sigpending(sigset_t *);
int sigprocmask(int, const sigset_t * restrict, sigset_t * restrict);
int sigrelse(int);
void (* _Nullable sigset(int, void (* _Nullable)(int)))(int);
int sigsuspend(const sigset_t *) __asm("_" "sigsuspend" );
int sigwait(const sigset_t * restrict, int * restrict) __asm("_" "sigwait" );

void psignal(int, const char *);


int sigblock(int);
int sigsetmask(int);
int sigvec(int, struct sigvec *, struct sigvec *);




inline __attribute__ ((__always_inline__)) int
__sigbits(int __signo)
{
    return __signo > 32 ? 0 : (1 << (__signo - 1));
}
# 3617 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2

 extern
void g_on_error_query (const gchar *prg_name);
 extern
void g_on_error_stack_trace (const gchar *prg_name);
# 3643 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gsize g_base64_encode_step (const guchar *in,
                                 gsize len,
                                 gboolean break_lines,
                                 gchar *out,
                                 gint *state,
                                 gint *save);
 extern
gsize g_base64_encode_close (gboolean break_lines,
                                 gchar *out,
                                 gint *state,
                                 gint *save);
 extern
gchar* g_base64_encode (const guchar *data,
                                 gsize len) __attribute__ ((__malloc__));
 extern
gsize g_base64_decode_step (const gchar *in,
                                 gsize len,
                                 guchar *out,
                                 gint *state,
                                 guint *save);
 extern
guchar *g_base64_decode (const gchar *text,
                                 gsize *out_len) __attribute__ ((__malloc__));
 extern
guchar *g_base64_decode_inplace (gchar *text,
                                 gsize *out_len);
# 3678 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_bit_lock (volatile gint *address,
                                           gint lock_bit);
 extern
gboolean g_bit_trylock (volatile gint *address,
                                           gint lock_bit);
 extern
void g_bit_unlock (volatile gint *address,
                                           gint lock_bit);
 extern
void g_pointer_bit_lock (volatile void *address,
                                           gint lock_bit);
 extern
gboolean g_pointer_bit_trylock (volatile void *address,
                                           gint lock_bit);
 extern
void g_pointer_bit_unlock (volatile void *address,
                                           gint lock_bit);
# 3731 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTimeZone GTimeZone;
typedef enum
{
  G_TIME_TYPE_STANDARD,
  G_TIME_TYPE_DAYLIGHT,
  G_TIME_TYPE_UNIVERSAL
} GTimeType;
__attribute__((__deprecated__("Use '" "g_time_zone_new_identifier" "' instead"))) extern
GTimeZone * g_time_zone_new (const gchar *identifier);
 extern
GTimeZone * g_time_zone_new_identifier (const gchar *identifier);
 extern
GTimeZone * g_time_zone_new_utc (void);
 extern
GTimeZone * g_time_zone_new_local (void);
 extern
GTimeZone * g_time_zone_new_offset (gint32 seconds);
 extern
GTimeZone * g_time_zone_ref (GTimeZone *tz);
 extern
void g_time_zone_unref (GTimeZone *tz);
 extern
gint g_time_zone_find_interval (GTimeZone *tz,
                                                                         GTimeType type,
                                                                         gint64 time_);
 extern
gint g_time_zone_adjust_time (GTimeZone *tz,
                                                                         GTimeType type,
                                                                         gint64 *time_);
 extern
const gchar * g_time_zone_get_abbreviation (GTimeZone *tz,
                                                                         gint interval);
 extern
gint32 g_time_zone_get_offset (GTimeZone *tz,
                                                                         gint interval);
 extern
gboolean g_time_zone_is_dst (GTimeZone *tz,
                                                                         gint interval);
 extern
const gchar * g_time_zone_get_identifier (GTimeZone *tz);
# 3779 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef gint64 GTimeSpan;
typedef struct _GDateTime GDateTime;
 extern
void g_date_time_unref (GDateTime *datetime);
 extern
GDateTime * g_date_time_ref (GDateTime *datetime);
 extern
GDateTime * g_date_time_new_now (GTimeZone *tz);
 extern
GDateTime * g_date_time_new_now_local (void);
 extern
GDateTime * g_date_time_new_now_utc (void);
 extern
GDateTime * g_date_time_new_from_unix_local (gint64 t);
 extern
GDateTime * g_date_time_new_from_unix_utc (gint64 t);
#pragma clang diagnostic push
# 3795 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_date_time_new_from_unix_local" "' instead"))) extern
GDateTime * g_date_time_new_from_timeval_local (const GTimeVal *tv);
__attribute__((__deprecated__("Use '" "g_date_time_new_from_unix_utc" "' instead"))) extern
GDateTime * g_date_time_new_from_timeval_utc (const GTimeVal *tv);
#pragma clang diagnostic pop
 extern
GDateTime * g_date_time_new_from_iso8601 (const gchar *text,
                                                                         GTimeZone *default_tz);
 extern
GDateTime * g_date_time_new (GTimeZone *tz,
                                                                         gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
 extern
GDateTime * g_date_time_new_local (gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
 extern
GDateTime * g_date_time_new_utc (gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add (GDateTime *datetime,
                                                                         GTimeSpan timespan);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_years (GDateTime *datetime,
                                                                         gint years);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_months (GDateTime *datetime,
                                                                         gint months);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_weeks (GDateTime *datetime,
                                                                         gint weeks);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_days (GDateTime *datetime,
                                                                         gint days);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_hours (GDateTime *datetime,
                                                                         gint hours);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_minutes (GDateTime *datetime,
                                                                         gint minutes);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_seconds (GDateTime *datetime,
                                                                         gdouble seconds);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_full (GDateTime *datetime,
                                                                         gint years,
                                                                         gint months,
                                                                         gint days,
                                                                         gint hours,
                                                                         gint minutes,
                                                                         gdouble seconds);
 extern
gint g_date_time_compare (gconstpointer dt1,
                                                                         gconstpointer dt2);
 extern
GTimeSpan g_date_time_difference (GDateTime *end,
                                                                         GDateTime *begin);
 extern
guint g_date_time_hash (gconstpointer datetime);
 extern
gboolean g_date_time_equal (gconstpointer dt1,
                                                                         gconstpointer dt2);
 extern
void g_date_time_get_ymd (GDateTime *datetime,
                                                                         gint *year,
                                                                         gint *month,
                                                                         gint *day);
 extern
gint g_date_time_get_year (GDateTime *datetime);
 extern
gint g_date_time_get_month (GDateTime *datetime);
 extern
gint g_date_time_get_day_of_month (GDateTime *datetime);
 extern
gint g_date_time_get_week_numbering_year (GDateTime *datetime);
 extern
gint g_date_time_get_week_of_year (GDateTime *datetime);
 extern
gint g_date_time_get_day_of_week (GDateTime *datetime);
 extern
gint g_date_time_get_day_of_year (GDateTime *datetime);
 extern
gint g_date_time_get_hour (GDateTime *datetime);
 extern
gint g_date_time_get_minute (GDateTime *datetime);
 extern
gint g_date_time_get_second (GDateTime *datetime);
 extern
gint g_date_time_get_microsecond (GDateTime *datetime);
 extern
gdouble g_date_time_get_seconds (GDateTime *datetime);
 extern
gint64 g_date_time_to_unix (GDateTime *datetime);
#pragma clang diagnostic push
# 3909 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_date_time_to_unix" "' instead"))) extern
gboolean g_date_time_to_timeval (GDateTime *datetime,
                                                                         GTimeVal *tv);
#pragma clang diagnostic pop
 extern
GTimeSpan g_date_time_get_utc_offset (GDateTime *datetime);
 extern
GTimeZone * g_date_time_get_timezone (GDateTime *datetime);
 extern
const gchar * g_date_time_get_timezone_abbreviation (GDateTime *datetime);
 extern
gboolean g_date_time_is_daylight_savings (GDateTime *datetime);
 extern
GDateTime * g_date_time_to_timezone (GDateTime *datetime,
                                                                         GTimeZone *tz);
 extern
GDateTime * g_date_time_to_local (GDateTime *datetime);
 extern
GDateTime * g_date_time_to_utc (GDateTime *datetime);
 extern
gchar * g_date_time_format (GDateTime *datetime,
                                                                         const gchar *format) __attribute__ ((__malloc__));
 extern
gchar * g_date_time_format_iso8601 (GDateTime *datetime) __attribute__ ((__malloc__));


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h" 1 3 4
# 3937 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2


typedef enum
{
  G_BOOKMARK_FILE_ERROR_INVALID_URI,
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
  G_BOOKMARK_FILE_ERROR_READ,
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
  G_BOOKMARK_FILE_ERROR_WRITE,
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
} GBookmarkFileError;
 extern
GQuark g_bookmark_file_error_quark (void);
typedef struct _GBookmarkFile GBookmarkFile;
 extern
GBookmarkFile *g_bookmark_file_new (void);
 extern
void g_bookmark_file_free (GBookmarkFile *bookmark);
 extern
GBookmarkFile *g_bookmark_file_copy (GBookmarkFile *bookmark);
 extern
gboolean g_bookmark_file_load_from_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);
 extern
gboolean g_bookmark_file_load_from_data (GBookmarkFile *bookmark,
          const gchar *data,
          gsize length,
          GError **error);
 extern
gboolean g_bookmark_file_load_from_data_dirs (GBookmarkFile *bookmark,
          const gchar *file,
          gchar **full_path,
          GError **error);
 extern
gchar * g_bookmark_file_to_data (GBookmarkFile *bookmark,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
 extern
gboolean g_bookmark_file_to_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);
 extern
void g_bookmark_file_set_title (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *title);
 extern
gchar * g_bookmark_file_get_title (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_bookmark_file_set_description (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *description);
 extern
gchar * g_bookmark_file_get_description (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_bookmark_file_set_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *mime_type);
 extern
gchar * g_bookmark_file_get_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_bookmark_file_set_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar **groups,
          gsize length);
 extern
void g_bookmark_file_add_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group);
 extern
gboolean g_bookmark_file_has_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
 extern
gchar ** g_bookmark_file_get_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error);
 extern
void g_bookmark_file_add_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec);
 extern
gboolean g_bookmark_file_has_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
 extern
gchar ** g_bookmark_file_get_applications (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_application_info" "' instead"))) extern
gboolean g_bookmark_file_set_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec,
          gint count,
          time_t stamp,
          GError **error);
 extern
gboolean g_bookmark_file_set_application_info (GBookmarkFile *bookmark,
                                                     const char *uri,
                                                     const char *name,
                                                     const char *exec,
                                                     int count,
                                                     GDateTime *stamp,
                                                     GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_application_info" "' instead"))) extern
gboolean g_bookmark_file_get_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          gchar **exec,
          guint *count,
          time_t *stamp,
          GError **error);
 extern
gboolean g_bookmark_file_get_application_info (GBookmarkFile *bookmark,
                                                     const char *uri,
                                                     const char *name,
                                                     char **exec,
                                                     unsigned int *count,
                                                     GDateTime **stamp,
                                                     GError **error);
 extern
void g_bookmark_file_set_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          gboolean is_private);
 extern
gboolean g_bookmark_file_get_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
void g_bookmark_file_set_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *href,
          const gchar *mime_type);
 extern
gboolean g_bookmark_file_get_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          gchar **href,
          gchar **mime_type,
          GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_added_date_time" "' instead"))) extern
void g_bookmark_file_set_added (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t added);
 extern
void g_bookmark_file_set_added_date_time (GBookmarkFile *bookmark,
                                                    const char *uri,
                                                    GDateTime *added);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_added_date_time" "' instead"))) extern
time_t g_bookmark_file_get_added (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
GDateTime *g_bookmark_file_get_added_date_time (GBookmarkFile *bookmark,
                                                    const char *uri,
                                                    GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_modified_date_time" "' instead"))) extern
void g_bookmark_file_set_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t modified);
 extern
void g_bookmark_file_set_modified_date_time (GBookmarkFile *bookmark,
                                                       const char *uri,
                                                       GDateTime *modified);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_modified_date_time" "' instead"))) extern
time_t g_bookmark_file_get_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
GDateTime *g_bookmark_file_get_modified_date_time (GBookmarkFile *bookmark,
                                                       const char *uri,
                                                       GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_visited_date_time" "' instead"))) extern
void g_bookmark_file_set_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t visited);
 extern
void g_bookmark_file_set_visited_date_time (GBookmarkFile *bookmark,
                                                      const char *uri,
                                                      GDateTime *visited);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_visited_date_time" "' instead"))) extern
time_t g_bookmark_file_get_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
GDateTime *g_bookmark_file_get_visited_date_time (GBookmarkFile *bookmark,
                                                      const char *uri,
                                                      GError **error);
 extern
gboolean g_bookmark_file_has_item (GBookmarkFile *bookmark,
          const gchar *uri);
 extern
gint g_bookmark_file_get_size (GBookmarkFile *bookmark);
 extern
gchar ** g_bookmark_file_get_uris (GBookmarkFile *bookmark,
          gsize *length);
 extern
gboolean g_bookmark_file_remove_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
 extern
gboolean g_bookmark_file_remove_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
 extern
gboolean g_bookmark_file_remove_item (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
gboolean g_bookmark_file_move_item (GBookmarkFile *bookmark,
          const gchar *old_uri,
          const gchar *new_uri,
          GError **error);
# 4173 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GBytes * g_bytes_new (gconstpointer data,
                                                 gsize size);
 extern
GBytes * g_bytes_new_take (gpointer data,
                                                 gsize size);
 extern
GBytes * g_bytes_new_static (gconstpointer data,
                                                 gsize size);
 extern
GBytes * g_bytes_new_with_free_func (gconstpointer data,
                                                 gsize size,
                                                 GDestroyNotify free_func,
                                                 gpointer user_data);
 extern
GBytes * g_bytes_new_from_bytes (GBytes *bytes,
                                                 gsize offset,
                                                 gsize length);
 extern
gconstpointer g_bytes_get_data (GBytes *bytes,
                                                 gsize *size);
 extern
gsize g_bytes_get_size (GBytes *bytes);
 extern
GBytes * g_bytes_ref (GBytes *bytes);
 extern
void g_bytes_unref (GBytes *bytes);
 extern
gpointer g_bytes_unref_to_data (GBytes *bytes,
                                                 gsize *size);
 extern
GByteArray * g_bytes_unref_to_array (GBytes *bytes);
 extern
guint g_bytes_hash (gconstpointer bytes);
 extern
gboolean g_bytes_equal (gconstpointer bytes1,
                                                 gconstpointer bytes2);
 extern
gint g_bytes_compare (gconstpointer bytes1,
                                                 gconstpointer bytes2);
 extern
gconstpointer g_bytes_get_region (GBytes *bytes,
                                                 gsize element_size,
                                                 gsize offset,
                                                 gsize n_elements);
# 4226 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gboolean g_get_charset (const char **charset);
 extern
gchar * g_get_codeset (void);
 extern
gboolean g_get_console_charset (const char **charset);
 extern
const gchar * const * g_get_language_names (void);
 extern
const gchar * const * g_get_language_names_with_category
                                            (const gchar *category_name);
 extern
gchar ** g_get_locale_variants (const gchar *locale);
# 4247 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum {
  G_CHECKSUM_MD5,
  G_CHECKSUM_SHA1,
  G_CHECKSUM_SHA256,
  G_CHECKSUM_SHA512,
  G_CHECKSUM_SHA384
} GChecksumType;
typedef struct _GChecksum GChecksum;
 extern
gssize g_checksum_type_get_length (GChecksumType checksum_type);
 extern
GChecksum * g_checksum_new (GChecksumType checksum_type);
 extern
void g_checksum_reset (GChecksum *checksum);
 extern
GChecksum * g_checksum_copy (const GChecksum *checksum);
 extern
void g_checksum_free (GChecksum *checksum);
 extern
void g_checksum_update (GChecksum *checksum,
                                                     const guchar *data,
                                                     gssize length);
 extern
const gchar * g_checksum_get_string (GChecksum *checksum);
 extern
void g_checksum_get_digest (GChecksum *checksum,
                                                     guint8 *buffer,
                                                     gsize *digest_len);
 extern
gchar *g_compute_checksum_for_data (GChecksumType checksum_type,
                                                     const guchar *data,
                                                     gsize length);
 extern
gchar *g_compute_checksum_for_string (GChecksumType checksum_type,
                                                     const gchar *str,
                                                     gssize length);
 extern
gchar *g_compute_checksum_for_bytes (GChecksumType checksum_type,
                                                     GBytes *data);
# 4294 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_CONVERT_ERROR_NO_CONVERSION,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
  G_CONVERT_ERROR_FAILED,
  G_CONVERT_ERROR_PARTIAL_INPUT,
  G_CONVERT_ERROR_BAD_URI,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH,
  G_CONVERT_ERROR_NO_MEMORY,
  G_CONVERT_ERROR_EMBEDDED_NUL
} GConvertError;

 extern
GQuark g_convert_error_quark (void);
typedef struct _GIConv *GIConv;
 extern
GIConv g_iconv_open (const gchar *to_codeset,
         const gchar *from_codeset);
 extern
gsize g_iconv (GIConv converter,
         gchar **inbuf,
         gsize *inbytes_left,
         gchar **outbuf,
         gsize *outbytes_left);
 extern
gint g_iconv_close (GIConv converter);
 extern
gchar* g_convert (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_convert_with_iconv (const gchar *str,
    gssize len,
    GIConv converter,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_convert_with_fallback (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    const gchar *fallback,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_locale_to_utf8 (const gchar *opsysstring,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_locale_from_utf8 (const gchar *utf8string,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_filename_to_utf8 (const gchar *opsysstring,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_filename_from_utf8 (const gchar *utf8string,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__ ((__malloc__));
 extern
gchar *g_filename_from_uri (const gchar *uri,
       gchar **hostname,
       GError **error) __attribute__ ((__malloc__));

 extern
gchar *g_filename_to_uri (const gchar *filename,
       const gchar *hostname,
       GError **error) __attribute__ ((__malloc__));
 extern
gchar *g_filename_display_name (const gchar *filename) __attribute__ ((__malloc__));
 extern
gboolean g_get_filename_charsets (const gchar ***filename_charsets);
 extern
gchar *g_filename_display_basename (const gchar *filename) __attribute__ ((__malloc__));
 extern
gchar **g_uri_list_extract_uris (const gchar *uri_list);
# 4393 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GData GData;
typedef void (*GDataForeachFunc) (GQuark key_id,
                                                 gpointer data,
                                                 gpointer user_data);
 extern
void g_datalist_init (GData **datalist);
 extern
void g_datalist_clear (GData **datalist);
 extern
gpointer g_datalist_id_get_data (GData **datalist,
      GQuark key_id);
 extern
void g_datalist_id_set_data_full (GData **datalist,
      GQuark key_id,
      gpointer data,
      GDestroyNotify destroy_func);
 extern
void g_datalist_id_remove_multiple (GData **datalist,
                                         GQuark *keys,
                                         gsize n_keys);
typedef gpointer (*GDuplicateFunc) (gpointer data, gpointer user_data);
 extern
gpointer g_datalist_id_dup_data (GData **datalist,
                                         GQuark key_id,
                                         GDuplicateFunc dup_func,
      gpointer user_data);
 extern
gboolean g_datalist_id_replace_data (GData **datalist,
                                         GQuark key_id,
                                         gpointer oldval,
                                         gpointer newval,
                                         GDestroyNotify destroy,
      GDestroyNotify *old_destroy);
 extern
gpointer g_datalist_id_remove_no_notify (GData **datalist,
      GQuark key_id);
 extern
void g_datalist_foreach (GData **datalist,
      GDataForeachFunc func,
      gpointer user_data);

 extern
void g_datalist_set_flags (GData **datalist,
      guint flags);
 extern
void g_datalist_unset_flags (GData **datalist,
      guint flags);
 extern
guint g_datalist_get_flags (GData **datalist);
# 4454 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_dataset_destroy (gconstpointer dataset_location);
 extern
gpointer g_dataset_id_get_data (gconstpointer dataset_location,
                                         GQuark key_id);
 extern
gpointer g_datalist_get_data (GData **datalist,
       const gchar *key);
 extern
void g_dataset_id_set_data_full (gconstpointer dataset_location,
                                         GQuark key_id,
                                         gpointer data,
                                         GDestroyNotify destroy_func);
 extern
gpointer g_dataset_id_remove_no_notify (gconstpointer dataset_location,
                                         GQuark key_id);
 extern
void g_dataset_foreach (gconstpointer dataset_location,
                                         GDataForeachFunc func,
                                         gpointer user_data);
# 4495 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h" 1 3 4
# 4496 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2

typedef gint32 GTime __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));
typedef guint16 GDateYear;
typedef guint8 GDateDay;
typedef struct _GDate GDate;
typedef enum
{
  G_DATE_DAY = 0,
  G_DATE_MONTH = 1,
  G_DATE_YEAR = 2
} GDateDMY;
typedef enum
{
  G_DATE_BAD_WEEKDAY = 0,
  G_DATE_MONDAY = 1,
  G_DATE_TUESDAY = 2,
  G_DATE_WEDNESDAY = 3,
  G_DATE_THURSDAY = 4,
  G_DATE_FRIDAY = 5,
  G_DATE_SATURDAY = 6,
  G_DATE_SUNDAY = 7
} GDateWeekday;
typedef enum
{
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY = 1,
  G_DATE_FEBRUARY = 2,
  G_DATE_MARCH = 3,
  G_DATE_APRIL = 4,
  G_DATE_MAY = 5,
  G_DATE_JUNE = 6,
  G_DATE_JULY = 7,
  G_DATE_AUGUST = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER = 10,
  G_DATE_NOVEMBER = 11,
  G_DATE_DECEMBER = 12
} GDateMonth;



struct _GDate
{
  guint julian_days : 32;
  guint julian : 1;
  guint dmy : 1;

  guint day : 6;
  guint month : 4;
  guint year : 16;
};
 extern
GDate* g_date_new (void);
 extern
GDate* g_date_new_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year);
 extern
GDate* g_date_new_julian (guint32 julian_day);
 extern
void g_date_free (GDate *date);
 extern
GDate* g_date_copy (const GDate *date);
 extern
gboolean g_date_valid (const GDate *date);
 extern
gboolean g_date_valid_day (GDateDay day) __attribute__ ((__const__));
 extern
gboolean g_date_valid_month (GDateMonth month) __attribute__ ((__const__));
 extern
gboolean g_date_valid_year (GDateYear year) __attribute__ ((__const__));
 extern
gboolean g_date_valid_weekday (GDateWeekday weekday) __attribute__ ((__const__));
 extern
gboolean g_date_valid_julian (guint32 julian_date) __attribute__ ((__const__));
 extern
gboolean g_date_valid_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year) __attribute__ ((__const__));
 extern
GDateWeekday g_date_get_weekday (const GDate *date);
 extern
GDateMonth g_date_get_month (const GDate *date);
 extern
GDateYear g_date_get_year (const GDate *date);
 extern
GDateDay g_date_get_day (const GDate *date);
 extern
guint32 g_date_get_julian (const GDate *date);
 extern
guint g_date_get_day_of_year (const GDate *date);
 extern
guint g_date_get_monday_week_of_year (const GDate *date);
 extern
guint g_date_get_sunday_week_of_year (const GDate *date);
 extern
guint g_date_get_iso8601_week_of_year (const GDate *date);
 extern
void g_date_clear (GDate *date,
                                           guint n_dates);
 extern
void g_date_set_parse (GDate *date,
                                           const gchar *str);
 extern
void g_date_set_time_t (GDate *date,
        time_t timet);
#pragma clang diagnostic push
# 4602 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_date_set_time_t" "' instead"))) extern
void g_date_set_time_val (GDate *date,
        GTimeVal *timeval);
__attribute__((__deprecated__("Use '" "g_date_set_time_t" "' instead"))) extern
void g_date_set_time (GDate *date,
                                           GTime time_);
#pragma clang diagnostic pop
 extern
void g_date_set_month (GDate *date,
                                           GDateMonth month);
 extern
void g_date_set_day (GDate *date,
                                           GDateDay day);
 extern
void g_date_set_year (GDate *date,
                                           GDateYear year);
 extern
void g_date_set_dmy (GDate *date,
                                           GDateDay day,
                                           GDateMonth month,
                                           GDateYear y);
 extern
void g_date_set_julian (GDate *date,
                                           guint32 julian_date);
 extern
gboolean g_date_is_first_of_month (const GDate *date);
 extern
gboolean g_date_is_last_of_month (const GDate *date);
 extern
void g_date_add_days (GDate *date,
                                           guint n_days);
 extern
void g_date_subtract_days (GDate *date,
                                           guint n_days);
 extern
void g_date_add_months (GDate *date,
                                           guint n_months);
 extern
void g_date_subtract_months (GDate *date,
                                           guint n_months);
 extern
void g_date_add_years (GDate *date,
                                           guint n_years);
 extern
void g_date_subtract_years (GDate *date,
                                           guint n_years);
 extern
gboolean g_date_is_leap_year (GDateYear year) __attribute__ ((__const__));
 extern
guint8 g_date_get_days_in_month (GDateMonth month,
                                           GDateYear year) __attribute__ ((__const__));
 extern
guint8 g_date_get_monday_weeks_in_year (GDateYear year) __attribute__ ((__const__));
 extern
guint8 g_date_get_sunday_weeks_in_year (GDateYear year) __attribute__ ((__const__));
 extern
gint g_date_days_between (const GDate *date1,
        const GDate *date2);
 extern
gint g_date_compare (const GDate *lhs,
                                           const GDate *rhs);
 extern
void g_date_to_struct_tm (const GDate *date,
                                           struct tm *tm);
 extern
void g_date_clamp (GDate *date,
        const GDate *min_date,
        const GDate *max_date);
 extern
void g_date_order (GDate *date1, GDate *date2);
 extern
gsize g_date_strftime (gchar *s,
                                           gsize slen,
                                           const gchar *format,
                                           const GDate *date);
# 4697 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dirent.h" 1 3 4
# 65 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dirent.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/dirent.h" 1 3 4
# 81 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/dirent.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino_t.h" 3 4
typedef __darwin_ino_t ino_t;
# 82 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/dirent.h" 2 3 4




#pragma pack(4)
# 98 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/dirent.h" 3 4
#pragma pack()
# 112 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/dirent.h" 3 4
struct dirent { __uint64_t d_ino; __uint64_t d_seekoff; __uint16_t d_reclen; __uint16_t d_namlen; __uint8_t d_type; char d_name[1024]; };
# 66 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dirent.h" 2 3 4




struct _telldir;


typedef struct {
 int __dd_fd;
 long __dd_loc;
 long __dd_size;
 char *__dd_buf;
 int __dd_len;
 long __dd_seek;
 __attribute__((__unused__)) long __padding;
 int __dd_flags;
 __darwin_pthread_mutex_t __dd_lock;
 struct _telldir *__dd_td;
} DIR;
# 105 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dirent.h" 3 4
int closedir(DIR *) __asm("_" "closedir" );

DIR *opendir(const char *) __asm("_" "opendir" );

struct dirent *readdir(DIR *) __asm("_" "readdir" );
int readdir_r(DIR *, struct dirent *, struct dirent **) __asm("_" "readdir_r" );

void rewinddir(DIR *) __asm("_" "rewinddir" );

void seekdir(DIR *, long) __asm("_" "seekdir" );

long telldir(DIR *) __asm("_" "telldir" );
# 128 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dirent.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
DIR *fdopendir(int) __asm("_" "fdopendir" );

int alphasort(const struct dirent **, const struct dirent **) __asm("_" "alphasort" );
# 146 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dirent.h" 3 4
int dirfd(DIR *dirp) __attribute__((availability(macosx,introduced=10.8)));


int scandir(const char *, struct dirent ***,
    int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **)) __asm("_" "scandir" );







int scandir_b(const char *, struct dirent ***,
    int (^)(const struct dirent *) __attribute__((__noescape__)),
    int (^)(const struct dirent **, const struct dirent **) __attribute__((__noescape__)))
    __asm("_" "scandir_b" ) __attribute__((availability(macosx,introduced=10.6)));
# 171 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dirent.h" 3 4
int getdirentries(int, char *, int, long *)






      __asm("_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect")



;

DIR *__opendir2(const char *, int) __asm("_" "__opendir2" );
# 4698 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2


typedef struct _GDir GDir;
 extern
GDir * g_dir_open (const gchar *path,
            guint flags,
            GError **error);
 extern
const gchar * g_dir_read_name (GDir *dir);
 extern
void g_dir_rewind (GDir *dir);
 extern
void g_dir_close (GDir *dir);
# 4719 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
const gchar * g_getenv (const gchar *variable);
 extern
gboolean g_setenv (const gchar *variable,
                                  const gchar *value,
                                  gboolean overwrite);
 extern
void g_unsetenv (const gchar *variable);
 extern
gchar ** g_listenv (void);
 extern
gchar ** g_get_environ (void);
 extern
const gchar * g_environ_getenv (gchar **envp,
                                  const gchar *variable);
 extern
gchar ** g_environ_setenv (gchar **envp,
                                  const gchar *variable,
                                  const gchar *value,
                                  gboolean overwrite) __attribute__((warn_unused_result));
 extern
gchar ** g_environ_unsetenv (gchar **envp,
                                  const gchar *variable) __attribute__((warn_unused_result));
# 4751 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_NOSYS,
  G_FILE_ERROR_FAILED
} GFileError;
typedef enum
{
  G_FILE_TEST_IS_REGULAR = 1 << 0,
  G_FILE_TEST_IS_SYMLINK = 1 << 1,
  G_FILE_TEST_IS_DIR = 1 << 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 << 3,
  G_FILE_TEST_EXISTS = 1 << 4
} GFileTest;
typedef enum
{
  G_FILE_SET_CONTENTS_NONE = 0,
  G_FILE_SET_CONTENTS_CONSISTENT = 1 << 0,
  G_FILE_SET_CONTENTS_DURABLE = 1 << 1,
  G_FILE_SET_CONTENTS_ONLY_EXISTING = 1 << 2
} GFileSetContentsFlags
                                 ;
 extern
GQuark g_file_error_quark (void);
 extern
GFileError g_file_error_from_errno (gint err_no);
 extern
gboolean g_file_test (const gchar *filename,
                              GFileTest test);
 extern
gboolean g_file_get_contents (const gchar *filename,
                              gchar **contents,
                              gsize *length,
                              GError **error);
 extern
gboolean g_file_set_contents (const gchar *filename,
                              const gchar *contents,
                              gssize length,
                              GError **error);
#pragma clang diagnostic push
# 4812 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
gboolean g_file_set_contents_full (const gchar *filename,
                                   const gchar *contents,
                                   gssize length,
                                   GFileSetContentsFlags flags,
                                   int mode,
                                   GError **error);
#pragma clang diagnostic pop
 extern
gchar *g_file_read_link (const gchar *filename,
                              GError **error);
 extern
gchar *g_mkdtemp (gchar *tmpl);
 extern
gchar *g_mkdtemp_full (gchar *tmpl,
                               gint mode);
 extern
gint g_mkstemp (gchar *tmpl);
 extern
gint g_mkstemp_full (gchar *tmpl,
                               gint flags,
                               gint mode);
 extern
gint g_file_open_tmp (const gchar *tmpl,
                               gchar **name_used,
                               GError **error);
 extern
gchar *g_dir_make_tmp (const gchar *tmpl,
                               GError **error);
 extern
gchar *g_build_path (const gchar *separator,
                               const gchar *first_element,
                               ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
 extern
gchar *g_build_pathv (const gchar *separator,
                               gchar **args) __attribute__ ((__malloc__));
 extern
gchar *g_build_filename (const gchar *first_element,
                               ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
 extern
gchar *g_build_filenamev (gchar **args) __attribute__ ((__malloc__));
 extern
gchar *g_build_filename_valist (const gchar *first_element,
                                  va_list *args) __attribute__ ((__malloc__));
 extern
gint g_mkdir_with_parents (const gchar *pathname,
                               gint mode);





 extern
gboolean g_path_is_absolute (const gchar *file_name);
 extern
const gchar *g_path_skip_root (const gchar *file_name);
__attribute__((__deprecated__("Use '" "g_path_get_basename" "' instead"))) extern
const gchar *g_basename (const gchar *file_name);

 extern
gchar *g_get_current_dir (void);
 extern
gchar *g_path_get_basename (const gchar *file_name) __attribute__ ((__malloc__));
 extern
gchar *g_path_get_dirname (const gchar *file_name) __attribute__ ((__malloc__));
 extern
gchar *g_canonicalize_filename (const gchar *filename,
                                const gchar *relative_to) __attribute__ ((__malloc__));
# 4889 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
const gchar *g_strip_context (const gchar *msgid,
                              const gchar *msgval) __attribute__ ((__format_arg__ (1)));
 extern
const gchar *g_dgettext (const gchar *domain,
                              const gchar *msgid) __attribute__ ((__format_arg__ (2)));
 extern
const gchar *g_dcgettext (const gchar *domain,
                              const gchar *msgid,
                              gint category) __attribute__ ((__format_arg__ (2)));
 extern
const gchar *g_dngettext (const gchar *domain,
                              const gchar *msgid,
                              const gchar *msgid_plural,
                              gulong n) __attribute__ ((__format_arg__ (3)));
 extern
const gchar *g_dpgettext (const gchar *domain,
                              const gchar *msgctxtid,
                              gsize msgidoffset) __attribute__ ((__format_arg__ (2)));
 extern
const gchar *g_dpgettext2 (const gchar *domain,
                              const gchar *context,
                              const gchar *msgid) __attribute__ ((__format_arg__ (3)));
# 4930 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GMemVTable GMemVTable;





 extern
void g_free (gpointer mem);
 extern
void g_clear_pointer (gpointer *pp,
                           GDestroyNotify destroy);
 extern
gpointer g_malloc (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_malloc0 (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));
 extern
gpointer g_try_malloc (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_try_malloc0 (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_try_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));
 extern
gpointer g_malloc_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_malloc0_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_realloc_n (gpointer mem,
      gsize n_blocks,
      gsize n_block_bytes) __attribute__((warn_unused_result));
 extern
gpointer g_try_malloc_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_try_malloc0_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_try_realloc_n (gpointer mem,
      gsize n_blocks,
      gsize n_block_bytes) __attribute__((warn_unused_result));
 extern
gpointer g_aligned_alloc (gsize n_blocks,
                           gsize n_block_bytes,
                           gsize alignment) __attribute__((warn_unused_result)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_aligned_alloc0 (gsize n_blocks,
                           gsize n_block_bytes,
                           gsize alignment) __attribute__((warn_unused_result)) __attribute__((__alloc_size__(1,2)));
 extern
void g_aligned_free (gpointer mem);
# 5019 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
static inline gpointer
g_steal_pointer (gpointer pp)
{
  gpointer *ptr = (gpointer *) pp;
  gpointer ref;
  ref = *ptr;
  *ptr = ((void *)0);
  return ref;
}
# 5075 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
struct _GMemVTable {
  gpointer (*malloc) (gsize n_bytes);
  gpointer (*realloc) (gpointer mem,
      gsize n_bytes);

  gpointer (*memalign) (gsize alignment,
      gsize size);
  void (*free) (gpointer mem);

  gpointer (*calloc) (gsize n_blocks,
      gsize n_block_bytes);
  gpointer (*try_malloc) (gsize n_bytes);
  gpointer (*try_realloc) (gpointer mem,
      gsize n_bytes);
};
 extern GMemVTable *glib_mem_table;
 extern
void g_mem_set_vtable (GMemVTable *vtable);
 extern
gboolean g_mem_is_system_malloc (void);
 extern gboolean g_mem_gc_friendly;
 extern GMemVTable *glib_mem_profiler_table;
__attribute__((__deprecated__)) extern
void g_mem_profile (void);
# 5107 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GNode GNode;
typedef enum
{
  G_TRAVERSE_LEAVES = 1 << 0,
  G_TRAVERSE_NON_LEAVES = 1 << 1,
  G_TRAVERSE_ALL = G_TRAVERSE_LEAVES | G_TRAVERSE_NON_LEAVES,
  G_TRAVERSE_MASK = 0x03,
  G_TRAVERSE_LEAFS = G_TRAVERSE_LEAVES,
  G_TRAVERSE_NON_LEAFS = G_TRAVERSE_NON_LEAVES
} GTraverseFlags;
typedef enum
{
  G_IN_ORDER,
  G_PRE_ORDER,
  G_POST_ORDER,
  G_LEVEL_ORDER
} GTraverseType;
typedef gboolean (*GNodeTraverseFunc) (GNode *node,
       gpointer user_data);
typedef void (*GNodeForeachFunc) (GNode *node,
       gpointer user_data);
struct _GNode
{
  gpointer data;
  GNode *next;
  GNode *prev;
  GNode *parent;
  GNode *children;
};




 extern
GNode* g_node_new (gpointer data);
 extern
void g_node_destroy (GNode *root);
 extern
void g_node_unlink (GNode *node);
 extern
GNode* g_node_copy_deep (GNode *node,
     GCopyFunc copy_func,
     gpointer data);
 extern
GNode* g_node_copy (GNode *node);
 extern
GNode* g_node_insert (GNode *parent,
     gint position,
     GNode *node);
 extern
GNode* g_node_insert_before (GNode *parent,
     GNode *sibling,
     GNode *node);
 extern
GNode* g_node_insert_after (GNode *parent,
     GNode *sibling,
     GNode *node);
 extern
GNode* g_node_prepend (GNode *parent,
     GNode *node);
 extern
guint g_node_n_nodes (GNode *root,
     GTraverseFlags flags);
 extern
GNode* g_node_get_root (GNode *node);
 extern
gboolean g_node_is_ancestor (GNode *node,
     GNode *descendant);
 extern
guint g_node_depth (GNode *node);
 extern
GNode* g_node_find (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gpointer data);
# 5194 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_node_traverse (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gint max_depth,
     GNodeTraverseFunc func,
     gpointer data);
 extern
guint g_node_max_height (GNode *root);
 extern
void g_node_children_foreach (GNode *node,
      GTraverseFlags flags,
      GNodeForeachFunc func,
      gpointer data);
 extern
void g_node_reverse_children (GNode *node);
 extern
guint g_node_n_children (GNode *node);
 extern
GNode* g_node_nth_child (GNode *node,
      guint n);
 extern
GNode* g_node_last_child (GNode *node);
 extern
GNode* g_node_find_child (GNode *node,
      GTraverseFlags flags,
      gpointer data);
 extern
gint g_node_child_position (GNode *node,
      GNode *child);
 extern
gint g_node_child_index (GNode *node,
      gpointer data);
 extern
GNode* g_node_first_sibling (GNode *node);
 extern
GNode* g_node_last_sibling (GNode *node);
# 5240 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GList GList;
struct _GList
{
  gpointer data;
  GList *next;
  GList *prev;
};
 extern
GList* g_list_alloc (void) __attribute__((warn_unused_result));
 extern
void g_list_free (GList *list);
 extern
void g_list_free_1 (GList *list);

 extern
void g_list_free_full (GList *list,
      GDestroyNotify free_func);
 extern
GList* g_list_append (GList *list,
      gpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_prepend (GList *list,
      gpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_insert (GList *list,
      gpointer data,
      gint position) __attribute__((warn_unused_result));
 extern
GList* g_list_insert_sorted (GList *list,
      gpointer data,
      GCompareFunc func) __attribute__((warn_unused_result));
 extern
GList* g_list_insert_sorted_with_data (GList *list,
      gpointer data,
      GCompareDataFunc func,
      gpointer user_data) __attribute__((warn_unused_result));
 extern
GList* g_list_insert_before (GList *list,
      GList *sibling,
      gpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_insert_before_link (GList *list,
      GList *sibling,
      GList *link_) __attribute__((warn_unused_result));
 extern
GList* g_list_concat (GList *list1,
      GList *list2) __attribute__((warn_unused_result));
 extern
GList* g_list_remove (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_remove_all (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_remove_link (GList *list,
      GList *llink) __attribute__((warn_unused_result));
 extern
GList* g_list_delete_link (GList *list,
      GList *link_) __attribute__((warn_unused_result));
 extern
GList* g_list_reverse (GList *list) __attribute__((warn_unused_result));
 extern
GList* g_list_copy (GList *list) __attribute__((warn_unused_result));
 extern
GList* g_list_copy_deep (GList *list,
      GCopyFunc func,
      gpointer user_data) __attribute__((warn_unused_result));
 extern
GList* g_list_nth (GList *list,
      guint n);
 extern
GList* g_list_nth_prev (GList *list,
      guint n);
 extern
GList* g_list_find (GList *list,
      gconstpointer data);
 extern
GList* g_list_find_custom (GList *list,
      gconstpointer data,
      GCompareFunc func);
 extern
gint g_list_position (GList *list,
      GList *llink);
 extern
gint g_list_index (GList *list,
      gconstpointer data);
 extern
GList* g_list_last (GList *list);
 extern
GList* g_list_first (GList *list);
 extern
guint g_list_length (GList *list);
 extern
void g_list_foreach (GList *list,
      GFunc func,
      gpointer user_data);
 extern
GList* g_list_sort (GList *list,
      GCompareFunc compare_func) __attribute__((warn_unused_result));
 extern
GList* g_list_sort_with_data (GList *list,
      GCompareDataFunc compare_func,
      gpointer user_data) __attribute__((warn_unused_result));
 extern
gpointer g_list_nth_data (GList *list,
      guint n);
 extern
void g_clear_list (GList **list_ptr,
                                         GDestroyNotify destroy);
# 5370 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GHashTable GHashTable;
typedef gboolean (*GHRFunc) (gpointer key,
                               gpointer value,
                               gpointer user_data);
typedef struct _GHashTableIter GHashTableIter;
struct _GHashTableIter
{

  gpointer dummy1;
  gpointer dummy2;
  gpointer dummy3;
  int dummy4;
  gboolean dummy5;
  gpointer dummy6;
};
 extern
GHashTable* g_hash_table_new (GHashFunc hash_func,
                                            GEqualFunc key_equal_func);
 extern
GHashTable* g_hash_table_new_full (GHashFunc hash_func,
                                            GEqualFunc key_equal_func,
                                            GDestroyNotify key_destroy_func,
                                            GDestroyNotify value_destroy_func);
 extern
GHashTable *g_hash_table_new_similar (GHashTable *other_hash_table);
 extern
void g_hash_table_destroy (GHashTable *hash_table);
 extern
gboolean g_hash_table_insert (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
 extern
gboolean g_hash_table_replace (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
 extern
gboolean g_hash_table_add (GHashTable *hash_table,
                                            gpointer key);
 extern
gboolean g_hash_table_remove (GHashTable *hash_table,
                                            gconstpointer key);
 extern
void g_hash_table_remove_all (GHashTable *hash_table);
 extern
gboolean g_hash_table_steal (GHashTable *hash_table,
                                            gconstpointer key);
 extern
gboolean g_hash_table_steal_extended (GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *stolen_key,
                                            gpointer *stolen_value);
 extern
void g_hash_table_steal_all (GHashTable *hash_table);
 extern
gpointer g_hash_table_lookup (GHashTable *hash_table,
                                            gconstpointer key);
 extern
gboolean g_hash_table_contains (GHashTable *hash_table,
                                            gconstpointer key);
 extern
gboolean g_hash_table_lookup_extended (GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *orig_key,
                                            gpointer *value);
 extern
void g_hash_table_foreach (GHashTable *hash_table,
                                            GHFunc func,
                                            gpointer user_data);
 extern
gpointer g_hash_table_find (GHashTable *hash_table,
                                            GHRFunc predicate,
                                            gpointer user_data);
 extern
guint g_hash_table_foreach_remove (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
 extern
guint g_hash_table_foreach_steal (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
 extern
guint g_hash_table_size (GHashTable *hash_table);
 extern
GList * g_hash_table_get_keys (GHashTable *hash_table);
 extern
GList * g_hash_table_get_values (GHashTable *hash_table);
 extern
gpointer * g_hash_table_get_keys_as_array (GHashTable *hash_table,
                                            guint *length);
 extern
void g_hash_table_iter_init (GHashTableIter *iter,
                                            GHashTable *hash_table);
 extern
gboolean g_hash_table_iter_next (GHashTableIter *iter,
                                            gpointer *key,
                                            gpointer *value);
 extern
GHashTable* g_hash_table_iter_get_hash_table (GHashTableIter *iter);
 extern
void g_hash_table_iter_remove (GHashTableIter *iter);
 extern
void g_hash_table_iter_replace (GHashTableIter *iter,
                                            gpointer value);
 extern
void g_hash_table_iter_steal (GHashTableIter *iter);
 extern
GHashTable* g_hash_table_ref (GHashTable *hash_table);
 extern
void g_hash_table_unref (GHashTable *hash_table);


 extern
gboolean g_str_equal (gconstpointer v1,
                         gconstpointer v2);

 extern
guint g_str_hash (gconstpointer v);
 extern
gboolean g_int_equal (gconstpointer v1,
                         gconstpointer v2);
 extern
guint g_int_hash (gconstpointer v);
 extern
gboolean g_int64_equal (gconstpointer v1,
                         gconstpointer v2);
 extern
guint g_int64_hash (gconstpointer v);
 extern
gboolean g_double_equal (gconstpointer v1,
                         gconstpointer v2);
 extern
guint g_double_hash (gconstpointer v);
 extern
guint g_direct_hash (gconstpointer v) __attribute__ ((__const__));
 extern
gboolean g_direct_equal (gconstpointer v1,
                         gconstpointer v2) __attribute__ ((__const__));
# 5515 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GHmac GHmac;
 extern
GHmac * g_hmac_new (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len);
 extern
GHmac * g_hmac_copy (const GHmac *hmac);
 extern
GHmac * g_hmac_ref (GHmac *hmac);
 extern
void g_hmac_unref (GHmac *hmac);
 extern
void g_hmac_update (GHmac *hmac,
                                                     const guchar *data,
                                                     gssize length);
 extern
const gchar * g_hmac_get_string (GHmac *hmac);
 extern
void g_hmac_get_digest (GHmac *hmac,
                                                     guint8 *buffer,
                                                     gsize *digest_len);
 extern
gchar *g_compute_hmac_for_data (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len,
                                                     const guchar *data,
                                                     gsize length);
 extern
gchar *g_compute_hmac_for_string (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len,
                                                     const gchar *str,
                                                     gssize length);
 extern
gchar *g_compute_hmac_for_bytes (GChecksumType digest_type,
                                                     GBytes *key,
                                                     GBytes *data);
# 5560 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GHook GHook;
typedef struct _GHookList GHookList;
typedef gint (*GHookCompareFunc) (GHook *new_hook,
       GHook *sibling);
typedef gboolean (*GHookFindFunc) (GHook *hook,
       gpointer user_data);
typedef void (*GHookMarshaller) (GHook *hook,
       gpointer user_data);
typedef gboolean (*GHookCheckMarshaller) (GHook *hook,
       gpointer user_data);
typedef void (*GHookFunc) (gpointer data);
typedef gboolean (*GHookCheckFunc) (gpointer data);
typedef void (*GHookFinalizeFunc) (GHookList *hook_list,
       GHook *hook);
typedef enum
{
  G_HOOK_FLAG_ACTIVE = 1 << 0,
  G_HOOK_FLAG_IN_CALL = 1 << 1,
  G_HOOK_FLAG_MASK = 0x0f
} GHookFlagMask;

struct _GHookList
{
  gulong seq_id;
  guint hook_size : 16;
  guint is_setup : 1;
  GHook *hooks;
  gpointer dummy3;
  GHookFinalizeFunc finalize_hook;
  gpointer dummy[2];
};
struct _GHook
{
  gpointer data;
  GHook *next;
  GHook *prev;
  guint ref_count;
  gulong hook_id;
  guint flags;
  gpointer func;
  GDestroyNotify destroy;
};
# 5615 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_hook_list_init (GHookList *hook_list,
      guint hook_size);
 extern
void g_hook_list_clear (GHookList *hook_list);
 extern
GHook* g_hook_alloc (GHookList *hook_list);
 extern
void g_hook_free (GHookList *hook_list,
      GHook *hook);
 extern
GHook * g_hook_ref (GHookList *hook_list,
      GHook *hook);
 extern
void g_hook_unref (GHookList *hook_list,
      GHook *hook);
 extern
gboolean g_hook_destroy (GHookList *hook_list,
      gulong hook_id);
 extern
void g_hook_destroy_link (GHookList *hook_list,
      GHook *hook);
 extern
void g_hook_prepend (GHookList *hook_list,
      GHook *hook);
 extern
void g_hook_insert_before (GHookList *hook_list,
      GHook *sibling,
      GHook *hook);
 extern
void g_hook_insert_sorted (GHookList *hook_list,
      GHook *hook,
      GHookCompareFunc func);
 extern
GHook* g_hook_get (GHookList *hook_list,
      gulong hook_id);
 extern
GHook* g_hook_find (GHookList *hook_list,
      gboolean need_valids,
      GHookFindFunc func,
      gpointer data);
 extern
GHook* g_hook_find_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer data);
 extern
GHook* g_hook_find_func (GHookList *hook_list,
      gboolean need_valids,
      gpointer func);
 extern
GHook* g_hook_find_func_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer func,
      gpointer data);
 extern
GHook* g_hook_first_valid (GHookList *hook_list,
      gboolean may_be_in_call);
 extern
GHook* g_hook_next_valid (GHookList *hook_list,
      GHook *hook,
      gboolean may_be_in_call);
 extern
gint g_hook_compare_ids (GHook *new_hook,
      GHook *sibling);


 extern
void g_hook_list_invoke (GHookList *hook_list,
      gboolean may_recurse);
 extern
void g_hook_list_invoke_check (GHookList *hook_list,
      gboolean may_recurse);
 extern
void g_hook_list_marshal (GHookList *hook_list,
      gboolean may_recurse,
      GHookMarshaller marshaller,
      gpointer marshal_data);
 extern
void g_hook_list_marshal_check (GHookList *hook_list,
      gboolean may_recurse,
      GHookCheckMarshaller marshaller,
      gpointer marshal_data);
# 5705 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gboolean g_hostname_is_non_ascii (const gchar *hostname);
 extern
gboolean g_hostname_is_ascii_encoded (const gchar *hostname);
 extern
gboolean g_hostname_is_ip_address (const gchar *hostname);
 extern
gchar *g_hostname_to_ascii (const gchar *hostname);
 extern
gchar *g_hostname_to_unicode (const gchar *hostname);
# 5733 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GPollFD GPollFD;
typedef gint (*GPollFunc) (GPollFD *ufds,
                                 guint nfsd,
                                 gint timeout_);
struct _GPollFD
{





  gint fd;

  gushort events;
  gushort revents;

  gpointer handle;

};
 extern
gint
g_poll (GPollFD *fds,
 guint nfds,
 gint timeout);
# 5765 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSList GSList;
struct _GSList
{
  gpointer data;
  GSList *next;
};
 extern
GSList* g_slist_alloc (void) __attribute__((warn_unused_result));
 extern
void g_slist_free (GSList *list);
 extern
void g_slist_free_1 (GSList *list);

 extern
void g_slist_free_full (GSList *list,
       GDestroyNotify free_func);
 extern
GSList* g_slist_append (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_prepend (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_insert (GSList *list,
       gpointer data,
       gint position) __attribute__((warn_unused_result));
 extern
GSList* g_slist_insert_sorted (GSList *list,
       gpointer data,
       GCompareFunc func) __attribute__((warn_unused_result));
 extern
GSList* g_slist_insert_sorted_with_data (GSList *list,
       gpointer data,
       GCompareDataFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_insert_before (GSList *slist,
       GSList *sibling,
       gpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_concat (GSList *list1,
       GSList *list2) __attribute__((warn_unused_result));
 extern
GSList* g_slist_remove (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_remove_all (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_remove_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
 extern
GSList* g_slist_delete_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
 extern
GSList* g_slist_reverse (GSList *list) __attribute__((warn_unused_result));
 extern
GSList* g_slist_copy (GSList *list) __attribute__((warn_unused_result));
 extern
GSList* g_slist_copy_deep (GSList *list,
       GCopyFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_nth (GSList *list,
       guint n);
 extern
GSList* g_slist_find (GSList *list,
       gconstpointer data);
 extern
GSList* g_slist_find_custom (GSList *list,
       gconstpointer data,
       GCompareFunc func);
 extern
gint g_slist_position (GSList *list,
       GSList *llink);
 extern
gint g_slist_index (GSList *list,
       gconstpointer data);
 extern
GSList* g_slist_last (GSList *list);
 extern
guint g_slist_length (GSList *list);
 extern
void g_slist_foreach (GSList *list,
       GFunc func,
       gpointer user_data);
 extern
GSList* g_slist_sort (GSList *list,
       GCompareFunc compare_func) __attribute__((warn_unused_result));
 extern
GSList* g_slist_sort_with_data (GSList *list,
       GCompareDataFunc compare_func,
       gpointer user_data) __attribute__((warn_unused_result));
 extern
gpointer g_slist_nth_data (GSList *list,
       guint n);
 extern
void g_clear_slist (GSList **slist_ptr,
                                          GDestroyNotify destroy);
# 5884 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_IO_IN =1,
  G_IO_OUT =4,
  G_IO_PRI =2,
  G_IO_ERR =8,
  G_IO_HUP =16,
  G_IO_NVAL =32
} GIOCondition;

typedef enum
{
  G_MAIN_CONTEXT_FLAGS_NONE = 0,
  G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1
} GMainContextFlags;
typedef struct _GMainContext GMainContext;
typedef struct _GMainLoop GMainLoop;
typedef struct _GSource GSource;
typedef struct _GSourcePrivate GSourcePrivate;
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
typedef struct _GSourceFuncs GSourceFuncs;
typedef gboolean (*GSourceFunc) (gpointer user_data);
typedef void (* GSourceOnceFunc) (gpointer user_data);

typedef void (*GChildWatchFunc) (GPid pid,
                                       gint wait_status,
                                       gpointer user_data);

typedef void (*GSourceDisposeFunc) (GSource *source);
struct _GSource
{

  gpointer callback_data;
  GSourceCallbackFuncs *callback_funcs;
  const GSourceFuncs *source_funcs;
  guint ref_count;
  GMainContext *context;
  gint priority;
  guint flags;
  guint source_id;
  GSList *poll_fds;

  GSource *prev;
  GSource *next;
  char *name;
  GSourcePrivate *priv;
};
struct _GSourceCallbackFuncs
{
  void (*ref) (gpointer cb_data);
  void (*unref) (gpointer cb_data);
  void (*get) (gpointer cb_data,
                 GSource *source,
                 GSourceFunc *func,
                 gpointer *data);
};
typedef void (*GSourceDummyMarshal) (void);
struct _GSourceFuncs
{
  gboolean (*prepare) (GSource *source,
                        gint *timeout_);
  gboolean (*check) (GSource *source);
  gboolean (*dispatch) (GSource *source,
                        GSourceFunc callback,
                        gpointer user_data);
  void (*finalize) (GSource *source);


  GSourceFunc closure_callback;
  GSourceDummyMarshal closure_marshal;
};







 extern
GMainContext *g_main_context_new (void);
#pragma clang diagnostic push
# 5964 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
GMainContext *g_main_context_new_with_flags (GMainContextFlags flags);
#pragma clang diagnostic pop
 extern
GMainContext *g_main_context_ref (GMainContext *context);
 extern
void g_main_context_unref (GMainContext *context);
 extern
GMainContext *g_main_context_default (void);
 extern
gboolean g_main_context_iteration (GMainContext *context,
                                        gboolean may_block);
 extern
gboolean g_main_context_pending (GMainContext *context);
 extern
GSource *g_main_context_find_source_by_id (GMainContext *context,
                                                             guint source_id);
 extern
GSource *g_main_context_find_source_by_user_data (GMainContext *context,
                                                             gpointer user_data);
 extern
GSource *g_main_context_find_source_by_funcs_user_data (GMainContext *context,
                                                             GSourceFuncs *funcs,
                                                             gpointer user_data);
 extern
void g_main_context_wakeup (GMainContext *context);
 extern
gboolean g_main_context_acquire (GMainContext *context);
 extern
void g_main_context_release (GMainContext *context);
 extern
gboolean g_main_context_is_owner (GMainContext *context);
__attribute__((__deprecated__("Use '" "g_main_context_is_owner" "' instead"))) extern
gboolean g_main_context_wait (GMainContext *context,
                                 GCond *cond,
                                 GMutex *mutex);
 extern
gboolean g_main_context_prepare (GMainContext *context,
                                  gint *priority);
 extern
gint g_main_context_query (GMainContext *context,
                                  gint max_priority,
                                  gint *timeout_,
                                  GPollFD *fds,
                                  gint n_fds);
 extern
gboolean g_main_context_check (GMainContext *context,
                                      gint max_priority,
                                      GPollFD *fds,
                                      gint n_fds);
 extern
void g_main_context_dispatch (GMainContext *context);
 extern
void g_main_context_set_poll_func (GMainContext *context,
                                       GPollFunc func);
 extern
GPollFunc g_main_context_get_poll_func (GMainContext *context);
 extern
void g_main_context_add_poll (GMainContext *context,
                                     GPollFD *fd,
                                     gint priority);
 extern
void g_main_context_remove_poll (GMainContext *context,
                                     GPollFD *fd);
 extern
gint g_main_depth (void);
 extern
GSource *g_main_current_source (void);
 extern
void g_main_context_push_thread_default (GMainContext *context);
 extern
void g_main_context_pop_thread_default (GMainContext *context);
 extern
GMainContext *g_main_context_get_thread_default (void);
 extern
GMainContext *g_main_context_ref_thread_default (void);
typedef void GMainContextPusher ;
#pragma clang diagnostic push
# 6042 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline GMainContextPusher *
g_main_context_pusher_new (GMainContext *main_context)
{
  g_main_context_push_thread_default (main_context);
  return (GMainContextPusher *) main_context;
}
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 6051 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline void
g_main_context_pusher_free (GMainContextPusher *pusher)
{
  g_main_context_pop_thread_default ((GMainContext *) pusher);
}
#pragma clang diagnostic pop
 extern
GMainLoop *g_main_loop_new (GMainContext *context,
                                   gboolean is_running);
 extern
void g_main_loop_run (GMainLoop *loop);
 extern
void g_main_loop_quit (GMainLoop *loop);
 extern
GMainLoop *g_main_loop_ref (GMainLoop *loop);
 extern
void g_main_loop_unref (GMainLoop *loop);
 extern
gboolean g_main_loop_is_running (GMainLoop *loop);
 extern
GMainContext *g_main_loop_get_context (GMainLoop *loop);
 extern
GSource *g_source_new (GSourceFuncs *source_funcs,
                                   guint struct_size);
#pragma clang diagnostic push
# 6077 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
void g_source_set_dispose_function (GSource *source,
                                        GSourceDisposeFunc dispose);
#pragma clang diagnostic pop
 extern
GSource *g_source_ref (GSource *source);
 extern
void g_source_unref (GSource *source);
 extern
guint g_source_attach (GSource *source,
                                   GMainContext *context);
 extern
void g_source_destroy (GSource *source);
 extern
void g_source_set_priority (GSource *source,
                                   gint priority);
 extern
gint g_source_get_priority (GSource *source);
 extern
void g_source_set_can_recurse (GSource *source,
                                   gboolean can_recurse);
 extern
gboolean g_source_get_can_recurse (GSource *source);
 extern
guint g_source_get_id (GSource *source);
 extern
GMainContext *g_source_get_context (GSource *source);
 extern
void g_source_set_callback (GSource *source,
                                   GSourceFunc func,
                                   gpointer data,
                                   GDestroyNotify notify);
 extern
void g_source_set_funcs (GSource *source,
                                   GSourceFuncs *funcs);
 extern
gboolean g_source_is_destroyed (GSource *source);
 extern
void g_source_set_name (GSource *source,
                                              const char *name);
 extern
void g_source_set_static_name (GSource *source,
                                               const char *name);
 extern
const char * g_source_get_name (GSource *source);
 extern
void g_source_set_name_by_id (guint tag,
                                              const char *name);
 extern
void g_source_set_ready_time (GSource *source,
                                              gint64 ready_time);
 extern
gint64 g_source_get_ready_time (GSource *source);

 extern
gpointer g_source_add_unix_fd (GSource *source,
                                              gint fd,
                                              GIOCondition events);
 extern
void g_source_modify_unix_fd (GSource *source,
                                              gpointer tag,
                                              GIOCondition new_events);
 extern
void g_source_remove_unix_fd (GSource *source,
                                              gpointer tag);
 extern
GIOCondition g_source_query_unix_fd (GSource *source,
                                              gpointer tag);

 extern
void g_source_set_callback_indirect (GSource *source,
                                     gpointer callback_data,
                                     GSourceCallbackFuncs *callback_funcs);
 extern
void g_source_add_poll (GSource *source,
           GPollFD *fd);
 extern
void g_source_remove_poll (GSource *source,
           GPollFD *fd);
 extern
void g_source_add_child_source (GSource *source,
           GSource *child_source);
 extern
void g_source_remove_child_source (GSource *source,
           GSource *child_source);
#pragma clang diagnostic push
# 6163 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_source_get_time" "' instead"))) extern
void g_source_get_current_time (GSource *source,
                                    GTimeVal *timeval);
#pragma clang diagnostic pop
 extern
gint64 g_source_get_time (GSource *source);

 extern
GSource *g_idle_source_new (void);
 extern
GSource *g_child_watch_source_new (GPid pid);
 extern
GSource *g_timeout_source_new (guint interval);
 extern
GSource *g_timeout_source_new_seconds (guint interval);
#pragma clang diagnostic push
# 6179 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_get_real_time" "' instead"))) extern
void g_get_current_time (GTimeVal *result);
#pragma clang diagnostic pop
 extern
gint64 g_get_monotonic_time (void);
 extern
gint64 g_get_real_time (void);
 extern
gboolean g_source_remove (guint tag);
 extern
gboolean g_source_remove_by_user_data (gpointer user_data);
 extern
gboolean g_source_remove_by_funcs_user_data (GSourceFuncs *funcs,
                                              gpointer user_data);
typedef void (* GClearHandleFunc) (guint handle_id);
 extern
void g_clear_handle_id (guint *tag_ptr,
                           GClearHandleFunc clear_func);
# 6212 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
guint g_timeout_add_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
guint g_timeout_add (guint interval,
                                     GSourceFunc function,
                                     gpointer data);
 extern
guint g_timeout_add_once (guint interval,
                                     GSourceOnceFunc function,
                                     gpointer data);
 extern
guint g_timeout_add_seconds_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
guint g_timeout_add_seconds (guint interval,
                                     GSourceFunc function,
                                     gpointer data);
 extern
guint g_child_watch_add_full (gint priority,
                                     GPid pid,
                                     GChildWatchFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
guint g_child_watch_add (GPid pid,
                                     GChildWatchFunc function,
                                     gpointer data);
 extern
guint g_idle_add (GSourceFunc function,
                                     gpointer data);
 extern
guint g_idle_add_full (gint priority,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
guint g_idle_add_once (GSourceOnceFunc function,
                                     gpointer data);
 extern
gboolean g_idle_remove_by_data (gpointer data);
 extern
void g_main_context_invoke_full (GMainContext *context,
                                     gint priority,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
void g_main_context_invoke (GMainContext *context,
                                     GSourceFunc function,
                                     gpointer data);

static inline int
g_steal_fd (int *fd_ptr)
{
  int fd = *fd_ptr;
  *fd_ptr = -1;
  return fd;
}
 extern GSourceFuncs g_timeout_funcs;
 extern GSourceFuncs g_child_watch_funcs;
 extern GSourceFuncs g_idle_funcs;

 extern GSourceFuncs g_unix_signal_funcs;
 extern GSourceFuncs g_unix_fd_source_funcs;
# 6297 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef guint32 gunichar;
typedef guint16 gunichar2;
typedef enum
{
  G_UNICODE_CONTROL,
  G_UNICODE_FORMAT,
  G_UNICODE_UNASSIGNED,
  G_UNICODE_PRIVATE_USE,
  G_UNICODE_SURROGATE,
  G_UNICODE_LOWERCASE_LETTER,
  G_UNICODE_MODIFIER_LETTER,
  G_UNICODE_OTHER_LETTER,
  G_UNICODE_TITLECASE_LETTER,
  G_UNICODE_UPPERCASE_LETTER,
  G_UNICODE_SPACING_MARK,
  G_UNICODE_ENCLOSING_MARK,
  G_UNICODE_NON_SPACING_MARK,
  G_UNICODE_DECIMAL_NUMBER,
  G_UNICODE_LETTER_NUMBER,
  G_UNICODE_OTHER_NUMBER,
  G_UNICODE_CONNECT_PUNCTUATION,
  G_UNICODE_DASH_PUNCTUATION,
  G_UNICODE_CLOSE_PUNCTUATION,
  G_UNICODE_FINAL_PUNCTUATION,
  G_UNICODE_INITIAL_PUNCTUATION,
  G_UNICODE_OTHER_PUNCTUATION,
  G_UNICODE_OPEN_PUNCTUATION,
  G_UNICODE_CURRENCY_SYMBOL,
  G_UNICODE_MODIFIER_SYMBOL,
  G_UNICODE_MATH_SYMBOL,
  G_UNICODE_OTHER_SYMBOL,
  G_UNICODE_LINE_SEPARATOR,
  G_UNICODE_PARAGRAPH_SEPARATOR,
  G_UNICODE_SPACE_SEPARATOR
} GUnicodeType;

typedef enum
{
  G_UNICODE_BREAK_MANDATORY,
  G_UNICODE_BREAK_CARRIAGE_RETURN,
  G_UNICODE_BREAK_LINE_FEED,
  G_UNICODE_BREAK_COMBINING_MARK,
  G_UNICODE_BREAK_SURROGATE,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
  G_UNICODE_BREAK_INSEPARABLE,
  G_UNICODE_BREAK_NON_BREAKING_GLUE,
  G_UNICODE_BREAK_CONTINGENT,
  G_UNICODE_BREAK_SPACE,
  G_UNICODE_BREAK_AFTER,
  G_UNICODE_BREAK_BEFORE,
  G_UNICODE_BREAK_BEFORE_AND_AFTER,
  G_UNICODE_BREAK_HYPHEN,
  G_UNICODE_BREAK_NON_STARTER,
  G_UNICODE_BREAK_OPEN_PUNCTUATION,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION,
  G_UNICODE_BREAK_QUOTATION,
  G_UNICODE_BREAK_EXCLAMATION,
  G_UNICODE_BREAK_IDEOGRAPHIC,
  G_UNICODE_BREAK_NUMERIC,
  G_UNICODE_BREAK_INFIX_SEPARATOR,
  G_UNICODE_BREAK_SYMBOL,
  G_UNICODE_BREAK_ALPHABETIC,
  G_UNICODE_BREAK_PREFIX,
  G_UNICODE_BREAK_POSTFIX,
  G_UNICODE_BREAK_COMPLEX_CONTEXT,
  G_UNICODE_BREAK_AMBIGUOUS,
  G_UNICODE_BREAK_UNKNOWN,
  G_UNICODE_BREAK_NEXT_LINE,
  G_UNICODE_BREAK_WORD_JOINER,
  G_UNICODE_BREAK_HANGUL_L_JAMO,
  G_UNICODE_BREAK_HANGUL_V_JAMO,
  G_UNICODE_BREAK_HANGUL_T_JAMO,
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE,
  G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CLOSE_PARENTHESIS = G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER,
  G_UNICODE_BREAK_HEBREW_LETTER,
  G_UNICODE_BREAK_REGIONAL_INDICATOR,
  G_UNICODE_BREAK_EMOJI_BASE,
  G_UNICODE_BREAK_EMOJI_MODIFIER,
  G_UNICODE_BREAK_ZERO_WIDTH_JOINER
} GUnicodeBreakType;
typedef enum
{
  G_UNICODE_SCRIPT_INVALID_CODE = -1,
  G_UNICODE_SCRIPT_COMMON = 0,
  G_UNICODE_SCRIPT_INHERITED,
  G_UNICODE_SCRIPT_ARABIC,
  G_UNICODE_SCRIPT_ARMENIAN,
  G_UNICODE_SCRIPT_BENGALI,
  G_UNICODE_SCRIPT_BOPOMOFO,
  G_UNICODE_SCRIPT_CHEROKEE,
  G_UNICODE_SCRIPT_COPTIC,
  G_UNICODE_SCRIPT_CYRILLIC,
  G_UNICODE_SCRIPT_DESERET,
  G_UNICODE_SCRIPT_DEVANAGARI,
  G_UNICODE_SCRIPT_ETHIOPIC,
  G_UNICODE_SCRIPT_GEORGIAN,
  G_UNICODE_SCRIPT_GOTHIC,
  G_UNICODE_SCRIPT_GREEK,
  G_UNICODE_SCRIPT_GUJARATI,
  G_UNICODE_SCRIPT_GURMUKHI,
  G_UNICODE_SCRIPT_HAN,
  G_UNICODE_SCRIPT_HANGUL,
  G_UNICODE_SCRIPT_HEBREW,
  G_UNICODE_SCRIPT_HIRAGANA,
  G_UNICODE_SCRIPT_KANNADA,
  G_UNICODE_SCRIPT_KATAKANA,
  G_UNICODE_SCRIPT_KHMER,
  G_UNICODE_SCRIPT_LAO,
  G_UNICODE_SCRIPT_LATIN,
  G_UNICODE_SCRIPT_MALAYALAM,
  G_UNICODE_SCRIPT_MONGOLIAN,
  G_UNICODE_SCRIPT_MYANMAR,
  G_UNICODE_SCRIPT_OGHAM,
  G_UNICODE_SCRIPT_OLD_ITALIC,
  G_UNICODE_SCRIPT_ORIYA,
  G_UNICODE_SCRIPT_RUNIC,
  G_UNICODE_SCRIPT_SINHALA,
  G_UNICODE_SCRIPT_SYRIAC,
  G_UNICODE_SCRIPT_TAMIL,
  G_UNICODE_SCRIPT_TELUGU,
  G_UNICODE_SCRIPT_THAANA,
  G_UNICODE_SCRIPT_THAI,
  G_UNICODE_SCRIPT_TIBETAN,
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL,
  G_UNICODE_SCRIPT_YI,
  G_UNICODE_SCRIPT_TAGALOG,
  G_UNICODE_SCRIPT_HANUNOO,
  G_UNICODE_SCRIPT_BUHID,
  G_UNICODE_SCRIPT_TAGBANWA,

  G_UNICODE_SCRIPT_BRAILLE,
  G_UNICODE_SCRIPT_CYPRIOT,
  G_UNICODE_SCRIPT_LIMBU,
  G_UNICODE_SCRIPT_OSMANYA,
  G_UNICODE_SCRIPT_SHAVIAN,
  G_UNICODE_SCRIPT_LINEAR_B,
  G_UNICODE_SCRIPT_TAI_LE,
  G_UNICODE_SCRIPT_UGARITIC,

  G_UNICODE_SCRIPT_NEW_TAI_LUE,
  G_UNICODE_SCRIPT_BUGINESE,
  G_UNICODE_SCRIPT_GLAGOLITIC,
  G_UNICODE_SCRIPT_TIFINAGH,
  G_UNICODE_SCRIPT_SYLOTI_NAGRI,
  G_UNICODE_SCRIPT_OLD_PERSIAN,
  G_UNICODE_SCRIPT_KHAROSHTHI,

  G_UNICODE_SCRIPT_UNKNOWN,
  G_UNICODE_SCRIPT_BALINESE,
  G_UNICODE_SCRIPT_CUNEIFORM,
  G_UNICODE_SCRIPT_PHOENICIAN,
  G_UNICODE_SCRIPT_PHAGS_PA,
  G_UNICODE_SCRIPT_NKO,

  G_UNICODE_SCRIPT_KAYAH_LI,
  G_UNICODE_SCRIPT_LEPCHA,
  G_UNICODE_SCRIPT_REJANG,
  G_UNICODE_SCRIPT_SUNDANESE,
  G_UNICODE_SCRIPT_SAURASHTRA,
  G_UNICODE_SCRIPT_CHAM,
  G_UNICODE_SCRIPT_OL_CHIKI,
  G_UNICODE_SCRIPT_VAI,
  G_UNICODE_SCRIPT_CARIAN,
  G_UNICODE_SCRIPT_LYCIAN,
  G_UNICODE_SCRIPT_LYDIAN,

  G_UNICODE_SCRIPT_AVESTAN,
  G_UNICODE_SCRIPT_BAMUM,
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN,
  G_UNICODE_SCRIPT_JAVANESE,
  G_UNICODE_SCRIPT_KAITHI,
  G_UNICODE_SCRIPT_LISU,
  G_UNICODE_SCRIPT_MEETEI_MAYEK,
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_TURKIC,
  G_UNICODE_SCRIPT_SAMARITAN,
  G_UNICODE_SCRIPT_TAI_THAM,
  G_UNICODE_SCRIPT_TAI_VIET,

  G_UNICODE_SCRIPT_BATAK,
  G_UNICODE_SCRIPT_BRAHMI,
  G_UNICODE_SCRIPT_MANDAIC,

  G_UNICODE_SCRIPT_CHAKMA,
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE,
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS,
  G_UNICODE_SCRIPT_MIAO,
  G_UNICODE_SCRIPT_SHARADA,
  G_UNICODE_SCRIPT_SORA_SOMPENG,
  G_UNICODE_SCRIPT_TAKRI,

  G_UNICODE_SCRIPT_BASSA_VAH,
  G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN,
  G_UNICODE_SCRIPT_DUPLOYAN,
  G_UNICODE_SCRIPT_ELBASAN,
  G_UNICODE_SCRIPT_GRANTHA,
  G_UNICODE_SCRIPT_KHOJKI,
  G_UNICODE_SCRIPT_KHUDAWADI,
  G_UNICODE_SCRIPT_LINEAR_A,
  G_UNICODE_SCRIPT_MAHAJANI,
  G_UNICODE_SCRIPT_MANICHAEAN,
  G_UNICODE_SCRIPT_MENDE_KIKAKUI,
  G_UNICODE_SCRIPT_MODI,
  G_UNICODE_SCRIPT_MRO,
  G_UNICODE_SCRIPT_NABATAEAN,
  G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_PERMIC,
  G_UNICODE_SCRIPT_PAHAWH_HMONG,
  G_UNICODE_SCRIPT_PALMYRENE,
  G_UNICODE_SCRIPT_PAU_CIN_HAU,
  G_UNICODE_SCRIPT_PSALTER_PAHLAVI,
  G_UNICODE_SCRIPT_SIDDHAM,
  G_UNICODE_SCRIPT_TIRHUTA,
  G_UNICODE_SCRIPT_WARANG_CITI,

  G_UNICODE_SCRIPT_AHOM,
  G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_HATRAN,
  G_UNICODE_SCRIPT_MULTANI,
  G_UNICODE_SCRIPT_OLD_HUNGARIAN,
  G_UNICODE_SCRIPT_SIGNWRITING,

  G_UNICODE_SCRIPT_ADLAM,
  G_UNICODE_SCRIPT_BHAIKSUKI,
  G_UNICODE_SCRIPT_MARCHEN,
  G_UNICODE_SCRIPT_NEWA,
  G_UNICODE_SCRIPT_OSAGE,
  G_UNICODE_SCRIPT_TANGUT,

  G_UNICODE_SCRIPT_MASARAM_GONDI,
  G_UNICODE_SCRIPT_NUSHU,
  G_UNICODE_SCRIPT_SOYOMBO,
  G_UNICODE_SCRIPT_ZANABAZAR_SQUARE,

  G_UNICODE_SCRIPT_DOGRA,
  G_UNICODE_SCRIPT_GUNJALA_GONDI,
  G_UNICODE_SCRIPT_HANIFI_ROHINGYA,
  G_UNICODE_SCRIPT_MAKASAR,
  G_UNICODE_SCRIPT_MEDEFAIDRIN,
  G_UNICODE_SCRIPT_OLD_SOGDIAN,
  G_UNICODE_SCRIPT_SOGDIAN,

  G_UNICODE_SCRIPT_ELYMAIC,
  G_UNICODE_SCRIPT_NANDINAGARI,
  G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG,
  G_UNICODE_SCRIPT_WANCHO,

  G_UNICODE_SCRIPT_CHORASMIAN,
  G_UNICODE_SCRIPT_DIVES_AKURU,
  G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT,
  G_UNICODE_SCRIPT_YEZIDI,

  G_UNICODE_SCRIPT_CYPRO_MINOAN,
  G_UNICODE_SCRIPT_OLD_UYGHUR,
  G_UNICODE_SCRIPT_TANGSA,
  G_UNICODE_SCRIPT_TOTO,
  G_UNICODE_SCRIPT_VITHKUQI,

  G_UNICODE_SCRIPT_MATH,

  G_UNICODE_SCRIPT_KAWI ,
  G_UNICODE_SCRIPT_NAG_MUNDARI ,
} GUnicodeScript;
 extern
guint32 g_unicode_script_to_iso15924 (GUnicodeScript script);
 extern
GUnicodeScript g_unicode_script_from_iso15924 (guint32 iso15924);
 extern
gboolean g_unichar_isalnum (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isalpha (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_iscntrl (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isdigit (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isgraph (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_islower (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isprint (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_ispunct (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isspace (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isupper (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isxdigit (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_istitle (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isdefined (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_iswide (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_iswide_cjk(gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_iszerowidth(gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_ismark (gunichar c) __attribute__ ((__const__));
 extern
gunichar g_unichar_toupper (gunichar c) __attribute__ ((__const__));
 extern
gunichar g_unichar_tolower (gunichar c) __attribute__ ((__const__));
 extern
gunichar g_unichar_totitle (gunichar c) __attribute__ ((__const__));
 extern
gint g_unichar_digit_value (gunichar c) __attribute__ ((__const__));
 extern
gint g_unichar_xdigit_value (gunichar c) __attribute__ ((__const__));
 extern
GUnicodeType g_unichar_type (gunichar c) __attribute__ ((__const__));
 extern
GUnicodeBreakType g_unichar_break_type (gunichar c) __attribute__ ((__const__));
 extern
gint g_unichar_combining_class (gunichar uc) __attribute__ ((__const__));
 extern
gboolean g_unichar_get_mirror_char (gunichar ch,
                                    gunichar *mirrored_ch);
 extern
GUnicodeScript g_unichar_get_script (gunichar ch) __attribute__ ((__const__));
 extern
gboolean g_unichar_validate (gunichar ch) __attribute__ ((__const__));
 extern
gboolean g_unichar_compose (gunichar a,
                            gunichar b,
                            gunichar *ch);
 extern
gboolean g_unichar_decompose (gunichar ch,
                              gunichar *a,
                              gunichar *b);
 extern
gsize g_unichar_fully_decompose (gunichar ch,
                                 gboolean compat,
                                 gunichar *result,
                                 gsize result_len);

 extern
void g_unicode_canonical_ordering (gunichar *string,
                                   gsize len);
__attribute__((__deprecated__)) extern
gunichar *g_unicode_canonical_decomposition (gunichar ch,
                                             gsize *result_len) __attribute__ ((__malloc__));
 extern const gchar * const g_utf8_skip;

 extern
gunichar g_utf8_get_char (const gchar *p) __attribute__((__pure__));
 extern
gunichar g_utf8_get_char_validated (const gchar *p,
                                    gssize max_len) __attribute__((__pure__));
 extern
gchar* g_utf8_offset_to_pointer (const gchar *str,
                                   glong offset) __attribute__((__pure__));
 extern
glong g_utf8_pointer_to_offset (const gchar *str,
                                   const gchar *pos) __attribute__((__pure__));
 extern
gchar* g_utf8_prev_char (const gchar *p) __attribute__((__pure__));
 extern
gchar* g_utf8_find_next_char (const gchar *p,
                                   const gchar *end) __attribute__((__pure__));
 extern
gchar* g_utf8_find_prev_char (const gchar *str,
                                   const gchar *p) __attribute__((__pure__));
 extern
glong g_utf8_strlen (const gchar *p,
                                   gssize max) __attribute__((__pure__));
 extern
gchar *g_utf8_substring (const gchar *str,
                                   glong start_pos,
                                   glong end_pos) __attribute__ ((__malloc__));
 extern
gchar *g_utf8_strncpy (gchar *dest,
                                   const gchar *src,
                                   gsize n);
 extern
gchar* g_utf8_strchr (const gchar *p,
                       gssize len,
                       gunichar c);
 extern
gchar* g_utf8_strrchr (const gchar *p,
                       gssize len,
                       gunichar c);
 extern
gchar* g_utf8_strreverse (const gchar *str,
                          gssize len);
 extern
gunichar2 *g_utf8_to_utf16 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gunichar * g_utf8_to_ucs4 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gunichar * g_utf8_to_ucs4_fast (const gchar *str,
                                glong len,
                                glong *items_written) __attribute__ ((__malloc__));
 extern
gunichar * g_utf16_to_ucs4 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_utf16_to_utf8 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gunichar2 *g_ucs4_to_utf16 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_ucs4_to_utf8 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gint g_unichar_to_utf8 (gunichar c,
                             gchar *outbuf);
 extern
gboolean g_utf8_validate (const gchar *str,
                          gssize max_len,
                          const gchar **end);
 extern
gboolean g_utf8_validate_len (const gchar *str,
                              gsize max_len,
                              const gchar **end);
 extern
gchar *g_utf8_strup (const gchar *str,
                       gssize len) __attribute__ ((__malloc__));
 extern
gchar *g_utf8_strdown (const gchar *str,
                       gssize len) __attribute__ ((__malloc__));
 extern
gchar *g_utf8_casefold (const gchar *str,
                        gssize len) __attribute__ ((__malloc__));
typedef enum {
  G_NORMALIZE_DEFAULT,
  G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
  G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_ALL,
  G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
  G_NORMALIZE_ALL_COMPOSE,
  G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE
} GNormalizeMode;
 extern
gchar *g_utf8_normalize (const gchar *str,
                         gssize len,
                         GNormalizeMode mode) __attribute__ ((__malloc__));
 extern
gint g_utf8_collate (const gchar *str1,
                           const gchar *str2) __attribute__((__pure__));
 extern
gchar *g_utf8_collate_key (const gchar *str,
                           gssize len) __attribute__ ((__malloc__));
 extern
gchar *g_utf8_collate_key_for_filename (const gchar *str,
                                        gssize len) __attribute__ ((__malloc__));
 extern
gchar *g_utf8_make_valid (const gchar *str,
                          gssize len) __attribute__ ((__malloc__));



typedef struct _GString GString;
struct _GString
{
  gchar *str;
  gsize len;
  gsize allocated_len;
};
 extern
GString* g_string_new (const gchar *init);
 extern
GString* g_string_new_len (const gchar *init,
                                         gssize len);
 extern
GString* g_string_sized_new (gsize dfl_size);
 extern
gchar* g_string_free (GString *string,
                                         gboolean free_segment);
 extern
GBytes* g_string_free_to_bytes (GString *string);
 extern
gboolean g_string_equal (const GString *v,
                                         const GString *v2);
 extern
guint g_string_hash (const GString *str);
 extern
GString* g_string_assign (GString *string,
                                         const gchar *rval);
 extern
GString* g_string_truncate (GString *string,
                                         gsize len);
 extern
GString* g_string_set_size (GString *string,
                                         gsize len);
 extern
GString* g_string_insert_len (GString *string,
                                         gssize pos,
                                         const gchar *val,
                                         gssize len);
 extern
GString* g_string_append (GString *string,
                                         const gchar *val);
 extern
GString* g_string_append_len (GString *string,
                                         const gchar *val,
                                         gssize len);
 extern
GString* g_string_append_c (GString *string,
                                         gchar c);
 extern
GString* g_string_append_unichar (GString *string,
                                         gunichar wc);
 extern
GString* g_string_prepend (GString *string,
                                         const gchar *val);
 extern
GString* g_string_prepend_c (GString *string,
                                         gchar c);
 extern
GString* g_string_prepend_unichar (GString *string,
                                         gunichar wc);
 extern
GString* g_string_prepend_len (GString *string,
                                         const gchar *val,
                                         gssize len);
 extern
GString* g_string_insert (GString *string,
                                         gssize pos,
                                         const gchar *val);
 extern
GString* g_string_insert_c (GString *string,
                                         gssize pos,
                                         gchar c);
 extern
GString* g_string_insert_unichar (GString *string,
                                         gssize pos,
                                         gunichar wc);
 extern
GString* g_string_overwrite (GString *string,
                                         gsize pos,
                                         const gchar *val);
 extern
GString* g_string_overwrite_len (GString *string,
                                         gsize pos,
                                         const gchar *val,
                                         gssize len);
 extern
GString* g_string_erase (GString *string,
                                         gssize pos,
                                         gssize len);
 extern
guint g_string_replace (GString *string,
                                         const gchar *find,
                                         const gchar *replace,
                                         guint limit);
 extern
GString* g_string_ascii_down (GString *string);
 extern
GString* g_string_ascii_up (GString *string);
 extern
void g_string_vprintf (GString *string,
                                         const gchar *format,
                                         va_list args)
                                         __attribute__((__format__ (__printf__, 2, 0)));
 extern
void g_string_printf (GString *string,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_string_append_vprintf (GString *string,
                                         const gchar *format,
                                         va_list args)
                                         __attribute__((__format__ (__printf__, 2, 0)));
 extern
void g_string_append_printf (GString *string,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
GString* g_string_append_uri_escaped (GString *string,
                                          const gchar *unescaped,
                                          const gchar *reserved_chars_allowed,
                                          gboolean allow_utf8);

static inline GString*
g_string_append_c_inline (GString *gstring,
                          gchar c)
{
  if (gstring->len + 1 < gstring->allocated_len)
    {
      gstring->str[gstring->len++] = c;
      gstring->str[gstring->len] = 0;
    }
  else
    g_string_insert_c (gstring, -1, c);
  return gstring;
}


__attribute__((__deprecated__)) extern
GString *g_string_down (GString *string);
__attribute__((__deprecated__)) extern
GString *g_string_up (GString *string);





typedef struct _GIOChannel GIOChannel;
typedef struct _GIOFuncs GIOFuncs;
typedef enum
{
  G_IO_ERROR_NONE,
  G_IO_ERROR_AGAIN,
  G_IO_ERROR_INVAL,
  G_IO_ERROR_UNKNOWN
} GIOError;

typedef enum
{

  G_IO_CHANNEL_ERROR_FBIG,
  G_IO_CHANNEL_ERROR_INVAL,
  G_IO_CHANNEL_ERROR_IO,
  G_IO_CHANNEL_ERROR_ISDIR,
  G_IO_CHANNEL_ERROR_NOSPC,
  G_IO_CHANNEL_ERROR_NXIO,
  G_IO_CHANNEL_ERROR_OVERFLOW,
  G_IO_CHANNEL_ERROR_PIPE,

  G_IO_CHANNEL_ERROR_FAILED
} GIOChannelError;
typedef enum
{
  G_IO_STATUS_ERROR,
  G_IO_STATUS_NORMAL,
  G_IO_STATUS_EOF,
  G_IO_STATUS_AGAIN
} GIOStatus;
typedef enum
{
  G_SEEK_CUR,
  G_SEEK_SET,
  G_SEEK_END
} GSeekType;
typedef enum
{
  G_IO_FLAG_NONE = 0,
  G_IO_FLAG_APPEND = 1 << 0,
  G_IO_FLAG_NONBLOCK = 1 << 1,
  G_IO_FLAG_IS_READABLE = 1 << 2,
  G_IO_FLAG_IS_WRITABLE = 1 << 3,
  G_IO_FLAG_IS_WRITEABLE = 1 << 3,
  G_IO_FLAG_IS_SEEKABLE = 1 << 4,
  G_IO_FLAG_MASK = (1 << 5) - 1,
  G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
  G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
} GIOFlags;
struct _GIOChannel
{

  gint ref_count;
  GIOFuncs *funcs;
  gchar *encoding;
  GIConv read_cd;
  GIConv write_cd;
  gchar *line_term;
  guint line_term_len;
  gsize buf_size;
  GString *read_buf;
  GString *encoded_read_buf;
  GString *write_buf;
  gchar partial_write_buf[6];

  guint use_buffer : 1;
  guint do_encode : 1;
  guint close_on_unref : 1;
  guint is_readable : 1;
  guint is_writeable : 1;
  guint is_seekable : 1;
  gpointer reserved1;
  gpointer reserved2;
};
typedef gboolean (*GIOFunc) (GIOChannel *source,
        GIOCondition condition,
        gpointer user_data);
struct _GIOFuncs
{
  GIOStatus (*io_read) (GIOChannel *channel,
             gchar *buf,
      gsize count,
      gsize *bytes_read,
      GError **err);
  GIOStatus (*io_write) (GIOChannel *channel,
      const gchar *buf,
      gsize count,
      gsize *bytes_written,
      GError **err);
  GIOStatus (*io_seek) (GIOChannel *channel,
      gint64 offset,
      GSeekType type,
      GError **err);
  GIOStatus (*io_close) (GIOChannel *channel,
      GError **err);
  GSource* (*io_create_watch) (GIOChannel *channel,
      GIOCondition condition);
  void (*io_free) (GIOChannel *channel);
  GIOStatus (*io_set_flags) (GIOChannel *channel,
                                  GIOFlags flags,
      GError **err);
  GIOFlags (*io_get_flags) (GIOChannel *channel);
};
 extern
void g_io_channel_init (GIOChannel *channel);
 extern
GIOChannel *g_io_channel_ref (GIOChannel *channel);
 extern
void g_io_channel_unref (GIOChannel *channel);
__attribute__((__deprecated__("Use '" "g_io_channel_read_chars" "' instead"))) extern
GIOError g_io_channel_read (GIOChannel *channel,
                                 gchar *buf,
                                 gsize count,
                                 gsize *bytes_read);
__attribute__((__deprecated__("Use '" "g_io_channel_write_chars" "' instead"))) extern
GIOError g_io_channel_write (GIOChannel *channel,
                                 const gchar *buf,
                                 gsize count,
                                 gsize *bytes_written);
__attribute__((__deprecated__("Use '" "g_io_channel_seek_position" "' instead"))) extern
GIOError g_io_channel_seek (GIOChannel *channel,
                                 gint64 offset,
                                 GSeekType type);
__attribute__((__deprecated__("Use '" "g_io_channel_shutdown" "' instead"))) extern
void g_io_channel_close (GIOChannel *channel);
 extern
GIOStatus g_io_channel_shutdown (GIOChannel *channel,
     gboolean flush,
     GError **err);
 extern
guint g_io_add_watch_full (GIOChannel *channel,
     gint priority,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data,
     GDestroyNotify notify);
 extern
GSource * g_io_create_watch (GIOChannel *channel,
     GIOCondition condition);
 extern
guint g_io_add_watch (GIOChannel *channel,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data);
 extern
void g_io_channel_set_buffer_size (GIOChannel *channel,
        gsize size);
 extern
gsize g_io_channel_get_buffer_size (GIOChannel *channel);
 extern
GIOCondition g_io_channel_get_buffer_condition (GIOChannel *channel);
 extern
GIOStatus g_io_channel_set_flags (GIOChannel *channel,
        GIOFlags flags,
        GError **error);
 extern
GIOFlags g_io_channel_get_flags (GIOChannel *channel);
 extern
void g_io_channel_set_line_term (GIOChannel *channel,
        const gchar *line_term,
        gint length);
 extern
const gchar * g_io_channel_get_line_term (GIOChannel *channel,
        gint *length);
 extern
void g_io_channel_set_buffered (GIOChannel *channel,
        gboolean buffered);
 extern
gboolean g_io_channel_get_buffered (GIOChannel *channel);
 extern
GIOStatus g_io_channel_set_encoding (GIOChannel *channel,
        const gchar *encoding,
        GError **error);
 extern
const gchar * g_io_channel_get_encoding (GIOChannel *channel);
 extern
void g_io_channel_set_close_on_unref (GIOChannel *channel,
        gboolean do_close);
 extern
gboolean g_io_channel_get_close_on_unref (GIOChannel *channel);
 extern
GIOStatus g_io_channel_flush (GIOChannel *channel,
        GError **error);
 extern
GIOStatus g_io_channel_read_line (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        gsize *terminator_pos,
        GError **error);
 extern
GIOStatus g_io_channel_read_line_string (GIOChannel *channel,
        GString *buffer,
        gsize *terminator_pos,
        GError **error);
 extern
GIOStatus g_io_channel_read_to_end (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        GError **error);
 extern
GIOStatus g_io_channel_read_chars (GIOChannel *channel,
        gchar *buf,
        gsize count,
        gsize *bytes_read,
        GError **error);
 extern
GIOStatus g_io_channel_read_unichar (GIOChannel *channel,
        gunichar *thechar,
        GError **error);
 extern
GIOStatus g_io_channel_write_chars (GIOChannel *channel,
        const gchar *buf,
        gssize count,
        gsize *bytes_written,
        GError **error);
 extern
GIOStatus g_io_channel_write_unichar (GIOChannel *channel,
        gunichar thechar,
        GError **error);
 extern
GIOStatus g_io_channel_seek_position (GIOChannel *channel,
        gint64 offset,
        GSeekType type,
        GError **error);
 extern
GIOChannel* g_io_channel_new_file (const gchar *filename,
        const gchar *mode,
        GError **error);
 extern
GQuark g_io_channel_error_quark (void);
 extern
GIOChannelError g_io_channel_error_from_errno (gint en);
 extern
GIOChannel* g_io_channel_unix_new (int fd);
 extern
gint g_io_channel_unix_get_fd (GIOChannel *channel);
 extern GSourceFuncs g_io_watch_funcs;
# 7201 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
  G_KEY_FILE_ERROR_PARSE,
  G_KEY_FILE_ERROR_NOT_FOUND,
  G_KEY_FILE_ERROR_KEY_NOT_FOUND,
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
  G_KEY_FILE_ERROR_INVALID_VALUE
} GKeyFileError;

 extern
GQuark g_key_file_error_quark (void);
typedef struct _GKeyFile GKeyFile;
typedef enum
{
  G_KEY_FILE_NONE = 0,
  G_KEY_FILE_KEEP_COMMENTS = 1 << 0,
  G_KEY_FILE_KEEP_TRANSLATIONS = 1 << 1
} GKeyFileFlags;
 extern
GKeyFile *g_key_file_new (void);
 extern
GKeyFile *g_key_file_ref (GKeyFile *key_file);
 extern
void g_key_file_unref (GKeyFile *key_file);
 extern
void g_key_file_free (GKeyFile *key_file);
 extern
void g_key_file_set_list_separator (GKeyFile *key_file,
          gchar separator);
 extern
gboolean g_key_file_load_from_file (GKeyFile *key_file,
          const gchar *file,
          GKeyFileFlags flags,
          GError **error);
 extern
gboolean g_key_file_load_from_data (GKeyFile *key_file,
          const gchar *data,
          gsize length,
          GKeyFileFlags flags,
          GError **error);
 extern
gboolean g_key_file_load_from_bytes (GKeyFile *key_file,
                                             GBytes *bytes,
                                             GKeyFileFlags flags,
                                             GError **error);
 extern
gboolean g_key_file_load_from_dirs (GKeyFile *key_file,
          const gchar *file,
          const gchar **search_dirs,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
 extern
gboolean g_key_file_load_from_data_dirs (GKeyFile *key_file,
          const gchar *file,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
 extern
gchar *g_key_file_to_data (GKeyFile *key_file,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
 extern
gboolean g_key_file_save_to_file (GKeyFile *key_file,
                                             const gchar *filename,
                                             GError **error);
 extern
gchar *g_key_file_get_start_group (GKeyFile *key_file) __attribute__ ((__malloc__));
 extern
gchar **g_key_file_get_groups (GKeyFile *key_file,
          gsize *length);
 extern
gchar **g_key_file_get_keys (GKeyFile *key_file,
          const gchar *group_name,
          gsize *length,
          GError **error);
 extern
gboolean g_key_file_has_group (GKeyFile *key_file,
          const gchar *group_name);
 extern
gboolean g_key_file_has_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
gchar *g_key_file_get_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *value);
 extern
gchar *g_key_file_get_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *string);
 extern
gchar *g_key_file_get_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          GError **error) __attribute__ ((__malloc__));
 extern
gchar *g_key_file_get_locale_for_key (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             const gchar *locale) __attribute__ ((__malloc__));
 extern
void g_key_file_set_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar *string);
 extern
gboolean g_key_file_get_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
void g_key_file_set_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean value);
 extern
gint g_key_file_get_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
void g_key_file_set_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint value);
 extern
gint64 g_key_file_get_int64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
void g_key_file_set_int64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint64 value);
 extern
guint64 g_key_file_get_uint64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
void g_key_file_set_uint64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          guint64 value);
 extern
gdouble g_key_file_get_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error);
 extern
void g_key_file_set_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble value);
 extern
gchar **g_key_file_get_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error);
 extern
void g_key_file_set_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar * const list[],
          gsize length);
 extern
gchar **g_key_file_get_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          gsize *length,
          GError **error);
 extern
void g_key_file_set_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar * const list[],
          gsize length);
 extern
gboolean *g_key_file_get_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean list[],
          gsize length);
 extern
gint *g_key_file_get_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble list[],
                                             gsize length);
 extern
gdouble *g_key_file_get_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gsize *length,
                                             GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint list[],
          gsize length);
 extern
gboolean g_key_file_set_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             const gchar *comment,
                                             GError **error);
 extern
gchar *g_key_file_get_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error) __attribute__ ((__malloc__));
 extern
gboolean g_key_file_remove_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
          GError **error);
 extern
gboolean g_key_file_remove_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
gboolean g_key_file_remove_group (GKeyFile *key_file,
          const gchar *group_name,
          GError **error);
# 7493 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GMappedFile GMappedFile;
 extern
GMappedFile *g_mapped_file_new (const gchar *filename,
             gboolean writable,
             GError **error);
 extern
GMappedFile *g_mapped_file_new_from_fd (gint fd,
      gboolean writable,
      GError **error);
 extern
gsize g_mapped_file_get_length (GMappedFile *file);
 extern
gchar *g_mapped_file_get_contents (GMappedFile *file);
 extern
GBytes * g_mapped_file_get_bytes (GMappedFile *file);
 extern
GMappedFile *g_mapped_file_ref (GMappedFile *file);
 extern
void g_mapped_file_unref (GMappedFile *file);
__attribute__((__deprecated__("Use '" "g_mapped_file_unref" "' instead"))) extern
void g_mapped_file_free (GMappedFile *file);







# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 1 3
# 7522 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2

typedef enum
{
  G_MARKUP_ERROR_BAD_UTF8,
  G_MARKUP_ERROR_EMPTY,
  G_MARKUP_ERROR_PARSE,

  G_MARKUP_ERROR_UNKNOWN_ELEMENT,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
  G_MARKUP_ERROR_INVALID_CONTENT,
  G_MARKUP_ERROR_MISSING_ATTRIBUTE
} GMarkupError;

 extern
GQuark g_markup_error_quark (void);
typedef enum
{
  G_MARKUP_DEFAULT_FLAGS = 0,
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 << 0,
  G_MARKUP_TREAT_CDATA_AS_TEXT = 1 << 1,
  G_MARKUP_PREFIX_ERROR_POSITION = 1 << 2,
  G_MARKUP_IGNORE_QUALIFIED = 1 << 3
} GMarkupParseFlags;
typedef struct _GMarkupParseContext GMarkupParseContext;
typedef struct _GMarkupParser GMarkupParser;
struct _GMarkupParser
{

  void (*start_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          const gchar **attribute_names,
                          const gchar **attribute_values,
                          gpointer user_data,
                          GError **error);

  void (*end_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          gpointer user_data,
                          GError **error);


  void (*text) (GMarkupParseContext *context,
                          const gchar *text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);


  void (*passthrough) (GMarkupParseContext *context,
                          const gchar *passthrough_text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);

  void (*error) (GMarkupParseContext *context,
                          GError *error,
                          gpointer user_data);
};
 extern
GMarkupParseContext *g_markup_parse_context_new (const GMarkupParser *parser,
                                                   GMarkupParseFlags flags,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_dnotify);
 extern
GMarkupParseContext *g_markup_parse_context_ref (GMarkupParseContext *context);
 extern
void g_markup_parse_context_unref (GMarkupParseContext *context);
 extern
void g_markup_parse_context_free (GMarkupParseContext *context);
 extern
gboolean g_markup_parse_context_parse (GMarkupParseContext *context,
                                                   const gchar *text,
                                                   gssize text_len,
                                                   GError **error);
 extern
void g_markup_parse_context_push (GMarkupParseContext *context,
                                                   const GMarkupParser *parser,
                                                   gpointer user_data);
 extern
gpointer g_markup_parse_context_pop (GMarkupParseContext *context);
 extern
gboolean g_markup_parse_context_end_parse (GMarkupParseContext *context,
                                                       GError **error);
 extern
const gchar * g_markup_parse_context_get_element (GMarkupParseContext *context);
 extern
const GSList * g_markup_parse_context_get_element_stack (GMarkupParseContext *context);
 extern
void g_markup_parse_context_get_position (GMarkupParseContext *context,
                                                          gint *line_number,
                                                          gint *char_number);
 extern
gpointer g_markup_parse_context_get_user_data (GMarkupParseContext *context);
 extern
gchar* g_markup_escape_text (const gchar *text,
                             gssize length);
 extern
gchar *g_markup_printf_escaped (const char *format,
    ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
gchar *g_markup_vprintf_escaped (const char *format,
     va_list args) __attribute__((__format__ (__printf__, 1, 0)));
typedef enum
{
  G_MARKUP_COLLECT_INVALID,
  G_MARKUP_COLLECT_STRING,
  G_MARKUP_COLLECT_STRDUP,
  G_MARKUP_COLLECT_BOOLEAN,
  G_MARKUP_COLLECT_TRISTATE,
  G_MARKUP_COLLECT_OPTIONAL = (1 << 16)
} GMarkupCollectType;
 extern
gboolean g_markup_collect_attributes (const gchar *element_name,
                                        const gchar **attribute_names,
                                        const gchar **attribute_values,
                                        GError **error,
                                        GMarkupCollectType first_type,
                                        const gchar *first_attr,
                                        ...);







# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 1 3
# 7649 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 7660 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GVariantType GVariantType;
# 7693 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gboolean g_variant_type_string_is_valid (const gchar *type_string);
 extern
gboolean g_variant_type_string_scan (const gchar *string,
                                                                         const gchar *limit,
                                                                         const gchar **endptr);
 extern
void g_variant_type_free (GVariantType *type);
 extern
GVariantType * g_variant_type_copy (const GVariantType *type);
 extern
GVariantType * g_variant_type_new (const gchar *type_string);
 extern
gsize g_variant_type_get_string_length (const GVariantType *type);
 extern
const gchar * g_variant_type_peek_string (const GVariantType *type);
 extern
gchar * g_variant_type_dup_string (const GVariantType *type);
 extern
gboolean g_variant_type_is_definite (const GVariantType *type);
 extern
gboolean g_variant_type_is_container (const GVariantType *type);
 extern
gboolean g_variant_type_is_basic (const GVariantType *type);
 extern
gboolean g_variant_type_is_maybe (const GVariantType *type);
 extern
gboolean g_variant_type_is_array (const GVariantType *type);
 extern
gboolean g_variant_type_is_tuple (const GVariantType *type);
 extern
gboolean g_variant_type_is_dict_entry (const GVariantType *type);
 extern
gboolean g_variant_type_is_variant (const GVariantType *type);
 extern
guint g_variant_type_hash (gconstpointer type);
 extern
gboolean g_variant_type_equal (gconstpointer type1,
                                                                         gconstpointer type2);
 extern
gboolean g_variant_type_is_subtype_of (const GVariantType *type,
                                                                         const GVariantType *supertype);
 extern
const GVariantType * g_variant_type_element (const GVariantType *type);
 extern
const GVariantType * g_variant_type_first (const GVariantType *type);
 extern
const GVariantType * g_variant_type_next (const GVariantType *type);
 extern
gsize g_variant_type_n_items (const GVariantType *type);
 extern
const GVariantType * g_variant_type_key (const GVariantType *type);
 extern
const GVariantType * g_variant_type_value (const GVariantType *type);
 extern
GVariantType * g_variant_type_new_array (const GVariantType *element);
 extern
GVariantType * g_variant_type_new_maybe (const GVariantType *element);
 extern
GVariantType * g_variant_type_new_tuple (const GVariantType * const *items,
                                                                         gint length);
 extern
GVariantType * g_variant_type_new_dict_entry (const GVariantType *key,
                                                                         const GVariantType *value);
 extern
const GVariantType * g_variant_type_checked_ (const gchar *);
 extern
gsize g_variant_type_string_get_depth_ (const gchar *type_string);



typedef struct _GVariant GVariant;
typedef enum
{
  G_VARIANT_CLASS_BOOLEAN = 'b',
  G_VARIANT_CLASS_BYTE = 'y',
  G_VARIANT_CLASS_INT16 = 'n',
  G_VARIANT_CLASS_UINT16 = 'q',
  G_VARIANT_CLASS_INT32 = 'i',
  G_VARIANT_CLASS_UINT32 = 'u',
  G_VARIANT_CLASS_INT64 = 'x',
  G_VARIANT_CLASS_UINT64 = 't',
  G_VARIANT_CLASS_HANDLE = 'h',
  G_VARIANT_CLASS_DOUBLE = 'd',
  G_VARIANT_CLASS_STRING = 's',
  G_VARIANT_CLASS_OBJECT_PATH = 'o',
  G_VARIANT_CLASS_SIGNATURE = 'g',
  G_VARIANT_CLASS_VARIANT = 'v',
  G_VARIANT_CLASS_MAYBE = 'm',
  G_VARIANT_CLASS_ARRAY = 'a',
  G_VARIANT_CLASS_TUPLE = '(',
  G_VARIANT_CLASS_DICT_ENTRY = '{'
} GVariantClass;
 extern
void g_variant_unref (GVariant *value);
 extern
GVariant * g_variant_ref (GVariant *value);
 extern
GVariant * g_variant_ref_sink (GVariant *value);
 extern
gboolean g_variant_is_floating (GVariant *value);
 extern
GVariant * g_variant_take_ref (GVariant *value);
 extern
const GVariantType * g_variant_get_type (GVariant *value);
 extern
const gchar * g_variant_get_type_string (GVariant *value);
 extern
gboolean g_variant_is_of_type (GVariant *value,
                                                                         const GVariantType *type);
 extern
gboolean g_variant_is_container (GVariant *value);
 extern
GVariantClass g_variant_classify (GVariant *value);
 extern
GVariant * g_variant_new_boolean (gboolean value);
 extern
GVariant * g_variant_new_byte (guint8 value);
 extern
GVariant * g_variant_new_int16 (gint16 value);
 extern
GVariant * g_variant_new_uint16 (guint16 value);
 extern
GVariant * g_variant_new_int32 (gint32 value);
 extern
GVariant * g_variant_new_uint32 (guint32 value);
 extern
GVariant * g_variant_new_int64 (gint64 value);
 extern
GVariant * g_variant_new_uint64 (guint64 value);
 extern
GVariant * g_variant_new_handle (gint32 value);
 extern
GVariant * g_variant_new_double (gdouble value);
 extern
GVariant * g_variant_new_string (const gchar *string);
 extern
GVariant * g_variant_new_take_string (gchar *string);
 extern
GVariant * g_variant_new_printf (const gchar *format_string,
                                                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
GVariant * g_variant_new_object_path (const gchar *object_path);
 extern
gboolean g_variant_is_object_path (const gchar *string);
 extern
GVariant * g_variant_new_signature (const gchar *signature);
 extern
gboolean g_variant_is_signature (const gchar *string);
 extern
GVariant * g_variant_new_variant (GVariant *value);
 extern
GVariant * g_variant_new_strv (const gchar * const *strv,
                                                                         gssize length);
 extern
GVariant * g_variant_new_objv (const gchar * const *strv,
                                                                         gssize length);
 extern
GVariant * g_variant_new_bytestring (const gchar *string);
 extern
GVariant * g_variant_new_bytestring_array (const gchar * const *strv,
                                                                         gssize length);
 extern
GVariant * g_variant_new_fixed_array (const GVariantType *element_type,
                                                                         gconstpointer elements,
                                                                         gsize n_elements,
                                                                         gsize element_size);
 extern
gboolean g_variant_get_boolean (GVariant *value);
 extern
guint8 g_variant_get_byte (GVariant *value);
 extern
gint16 g_variant_get_int16 (GVariant *value);
 extern
guint16 g_variant_get_uint16 (GVariant *value);
 extern
gint32 g_variant_get_int32 (GVariant *value);
 extern
guint32 g_variant_get_uint32 (GVariant *value);
 extern
gint64 g_variant_get_int64 (GVariant *value);
 extern
guint64 g_variant_get_uint64 (GVariant *value);
 extern
gint32 g_variant_get_handle (GVariant *value);
 extern
gdouble g_variant_get_double (GVariant *value);
 extern
GVariant * g_variant_get_variant (GVariant *value);
 extern
const gchar * g_variant_get_string (GVariant *value,
                                                                         gsize *length);
 extern
gchar * g_variant_dup_string (GVariant *value,
                                                                         gsize *length);
 extern
const gchar ** g_variant_get_strv (GVariant *value,
                                                                         gsize *length);
 extern
gchar ** g_variant_dup_strv (GVariant *value,
                                                                         gsize *length);
 extern
const gchar ** g_variant_get_objv (GVariant *value,
                                                                         gsize *length);
 extern
gchar ** g_variant_dup_objv (GVariant *value,
                                                                         gsize *length);
 extern
const gchar * g_variant_get_bytestring (GVariant *value);
 extern
gchar * g_variant_dup_bytestring (GVariant *value,
                                                                         gsize *length);
 extern
const gchar ** g_variant_get_bytestring_array (GVariant *value,
                                                                         gsize *length);
 extern
gchar ** g_variant_dup_bytestring_array (GVariant *value,
                                                                         gsize *length);
 extern
GVariant * g_variant_new_maybe (const GVariantType *child_type,
                                                                         GVariant *child);
 extern
GVariant * g_variant_new_array (const GVariantType *child_type,
                                                                         GVariant * const *children,
                                                                         gsize n_children);
 extern
GVariant * g_variant_new_tuple (GVariant * const *children,
                                                                         gsize n_children);
 extern
GVariant * g_variant_new_dict_entry (GVariant *key,
                                                                         GVariant *value);
 extern
GVariant * g_variant_get_maybe (GVariant *value);
 extern
gsize g_variant_n_children (GVariant *value);
 extern
void g_variant_get_child (GVariant *value,
                                                                         gsize index_,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GVariant * g_variant_get_child_value (GVariant *value,
                                                                         gsize index_);
 extern
gboolean g_variant_lookup (GVariant *dictionary,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GVariant * g_variant_lookup_value (GVariant *dictionary,
                                                                         const gchar *key,
                                                                         const GVariantType *expected_type);
 extern
gconstpointer g_variant_get_fixed_array (GVariant *value,
                                                                         gsize *n_elements,
                                                                         gsize element_size);
 extern
gsize g_variant_get_size (GVariant *value);
 extern
gconstpointer g_variant_get_data (GVariant *value);
 extern
GBytes * g_variant_get_data_as_bytes (GVariant *value);
 extern
void g_variant_store (GVariant *value,
                                                                         gpointer data);
 extern
gchar * g_variant_print (GVariant *value,
                                                                         gboolean type_annotate);
 extern
GString * g_variant_print_string (GVariant *value,
                                                                         GString *string,
                                                                         gboolean type_annotate);
 extern
guint g_variant_hash (gconstpointer value);
 extern
gboolean g_variant_equal (gconstpointer one,
                                                                         gconstpointer two);
 extern
GVariant * g_variant_get_normal_form (GVariant *value);
 extern
gboolean g_variant_is_normal_form (GVariant *value);
 extern
GVariant * g_variant_byteswap (GVariant *value);
 extern
GVariant * g_variant_new_from_bytes (const GVariantType *type,
                                                                         GBytes *bytes,
                                                                         gboolean trusted);
 extern
GVariant * g_variant_new_from_data (const GVariantType *type,
                                                                         gconstpointer data,
                                                                         gsize size,
                                                                         gboolean trusted,
                                                                         GDestroyNotify notify,
                                                                         gpointer user_data);
typedef struct _GVariantIter GVariantIter;
struct _GVariantIter {

  gsize x[16];
};
 extern
GVariantIter * g_variant_iter_new (GVariant *value);
 extern
gsize g_variant_iter_init (GVariantIter *iter,
                                                                         GVariant *value);
 extern
GVariantIter * g_variant_iter_copy (GVariantIter *iter);
 extern
gsize g_variant_iter_n_children (GVariantIter *iter);
 extern
void g_variant_iter_free (GVariantIter *iter);
 extern
GVariant * g_variant_iter_next_value (GVariantIter *iter);
 extern
gboolean g_variant_iter_next (GVariantIter *iter,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
gboolean g_variant_iter_loop (GVariantIter *iter,
                                                                         const gchar *format_string,
                                                                         ...);
typedef struct _GVariantBuilder GVariantBuilder;
struct _GVariantBuilder {

  union
  {
    struct {
      gsize partial_magic;
      const GVariantType *type;
      gsize y[14];
    } s;
    gsize x[16];
  } u;
};
typedef enum
{
  G_VARIANT_PARSE_ERROR_FAILED,
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE,
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END,
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER,
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING,
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH,
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE,
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING,
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE,
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE,
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG,
  G_VARIANT_PARSE_ERROR_TYPE_ERROR,
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN,
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD,
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT,
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED,
  G_VARIANT_PARSE_ERROR_RECURSION
} GVariantParseError;

__attribute__((__deprecated__("Use '" "g_variant_parse_error_quark" "' instead"))) extern
GQuark g_variant_parser_get_error_quark (void);
 extern
GQuark g_variant_parse_error_quark (void);
# 8061 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GVariantBuilder * g_variant_builder_new (const GVariantType *type);
 extern
void g_variant_builder_unref (GVariantBuilder *builder);
 extern
GVariantBuilder * g_variant_builder_ref (GVariantBuilder *builder);
 extern
void g_variant_builder_init (GVariantBuilder *builder,
                                                                         const GVariantType *type);
 extern
GVariant * g_variant_builder_end (GVariantBuilder *builder);
 extern
void g_variant_builder_clear (GVariantBuilder *builder);
 extern
void g_variant_builder_open (GVariantBuilder *builder,
                                                                         const GVariantType *type);
 extern
void g_variant_builder_close (GVariantBuilder *builder);
 extern
void g_variant_builder_add_value (GVariantBuilder *builder,
                                                                         GVariant *value);
 extern
void g_variant_builder_add (GVariantBuilder *builder,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
void g_variant_builder_add_parsed (GVariantBuilder *builder,
                                                                         const gchar *format,
                                                                         ...);
 extern
GVariant * g_variant_new (const gchar *format_string,
                                                                         ...);
 extern
void g_variant_get (GVariant *value,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GVariant * g_variant_new_va (const gchar *format_string,
                                                                         const gchar **endptr,
                                                                         va_list *app);
 extern
void g_variant_get_va (GVariant *value,
                                                                         const gchar *format_string,
                                                                         const gchar **endptr,
                                                                         va_list *app);
 extern
gboolean g_variant_check_format_string (GVariant *value,
                                                                         const gchar *format_string,
                                                                         gboolean copy_only);
 extern
GVariant * g_variant_parse (const GVariantType *type,
                                                                         const gchar *text,
                                                                         const gchar *limit,
                                                                         const gchar **endptr,
                                                                         GError **error);
 extern
GVariant * g_variant_new_parsed (const gchar *format,
                                                                         ...);
 extern
GVariant * g_variant_new_parsed_va (const gchar *format,
                                                                         va_list *app);
 extern
gchar * g_variant_parse_error_print_context (GError *error,
                                                                         const gchar *source_str);
 extern
gint g_variant_compare (gconstpointer one,
                                                                         gconstpointer two);
typedef struct _GVariantDict GVariantDict;
struct _GVariantDict {

  union
  {
    struct {
      GVariant *asv;
      gsize partial_magic;
      gsize y[14];
    } s;
    gsize x[16];
  } u;
};
# 8149 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GVariantDict * g_variant_dict_new (GVariant *from_asv);
 extern
void g_variant_dict_init (GVariantDict *dict,
                                                                         GVariant *from_asv);
 extern
gboolean g_variant_dict_lookup (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GVariant * g_variant_dict_lookup_value (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const GVariantType *expected_type);
 extern
gboolean g_variant_dict_contains (GVariantDict *dict,
                                                                         const gchar *key);
 extern
void g_variant_dict_insert (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
void g_variant_dict_insert_value (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         GVariant *value);
 extern
gboolean g_variant_dict_remove (GVariantDict *dict,
                                                                         const gchar *key);
 extern
void g_variant_dict_clear (GVariantDict *dict);
 extern
GVariant * g_variant_dict_end (GVariantDict *dict);
 extern
GVariantDict * g_variant_dict_ref (GVariantDict *dict);
 extern
void g_variant_dict_unref (GVariantDict *dict);



 extern
gsize g_printf_string_upper_bound (const gchar* format,
         va_list args) __attribute__((__format__ (__printf__, 1, 0)));

typedef enum
{

  G_LOG_FLAG_RECURSION = 1 << 0,
  G_LOG_FLAG_FATAL = 1 << 1,

  G_LOG_LEVEL_ERROR = 1 << 2,
  G_LOG_LEVEL_CRITICAL = 1 << 3,
  G_LOG_LEVEL_WARNING = 1 << 4,
  G_LOG_LEVEL_MESSAGE = 1 << 5,
  G_LOG_LEVEL_INFO = 1 << 6,
  G_LOG_LEVEL_DEBUG = 1 << 7,
  G_LOG_LEVEL_MASK = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
} GLogLevelFlags;

typedef void (*GLogFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);
 extern
guint g_log_set_handler (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data);
 extern
guint g_log_set_handler_full (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data,
                                         GDestroyNotify destroy);
 extern
void g_log_remove_handler (const gchar *log_domain,
                                         guint handler_id);
 extern
void g_log_default_handler (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *message,
                                         gpointer unused_data);
 extern
GLogFunc g_log_set_default_handler (GLogFunc log_func,
        gpointer user_data);
 extern
void g_log (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 3, 4)));
 extern
void g_logv (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         va_list args) __attribute__((__format__ (__printf__, 3, 0)));
 extern
GLogLevelFlags g_log_set_fatal_mask (const gchar *log_domain,
                                         GLogLevelFlags fatal_mask);
 extern
GLogLevelFlags g_log_set_always_fatal (GLogLevelFlags fatal_mask);
typedef enum
{
  G_LOG_WRITER_HANDLED = 1,
  G_LOG_WRITER_UNHANDLED = 0,
} GLogWriterOutput;
typedef struct _GLogField GLogField;
struct _GLogField
{
  const gchar *key;
  gconstpointer value;
  gssize length;
};
typedef GLogWriterOutput (*GLogWriterFunc) (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
 extern
void g_log_structured (const gchar *log_domain,
                                                GLogLevelFlags log_level,
                                                ...);
 extern
void g_log_structured_array (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields);
 extern
void g_log_variant (const gchar *log_domain,
                                                GLogLevelFlags log_level,
                                                GVariant *fields);
 extern
void g_log_set_writer_func (GLogWriterFunc func,
                                                gpointer user_data,
                                                GDestroyNotify user_data_free);
 extern
gboolean g_log_writer_supports_color (gint output_fd);
 extern
gboolean g_log_writer_is_journald (gint output_fd);
 extern
gchar *g_log_writer_format_fields (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gboolean use_color);
 extern
GLogWriterOutput g_log_writer_journald (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
 extern
GLogWriterOutput g_log_writer_standard_streams (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
 extern
GLogWriterOutput g_log_writer_default (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
 extern
void g_log_writer_default_set_use_stderr (gboolean use_stderr);
 extern
gboolean g_log_writer_default_would_drop (GLogLevelFlags log_level,
                                                 const char *log_domain);
 extern
gboolean g_log_get_debug_enabled (void);
 extern
void g_log_set_debug_enabled (gboolean enabled);







void _g_log_fallback_handler (const gchar *log_domain,
       GLogLevelFlags log_level,
       const gchar *message,
       gpointer unused_data);
 extern
void g_return_if_fail_warning (const char *log_domain,
          const char *pretty_function,
          const char *expression) ;
 extern
void g_warn_message (const char *domain,
                               const char *file,
                               int line,
                               const char *func,
                               const char *warnexpr) ;
__attribute__((__deprecated__)) extern
__attribute__ ((__noreturn__))
void g_assert_warning (const char *log_domain,
          const char *file,
          const int line,
                 const char *pretty_function,
                 const char *expression);
 extern
void g_log_structured_standard (const gchar *log_domain,
                                GLogLevelFlags log_level,
                                const gchar *file,
                                const gchar *line,
                                const gchar *func,
                                const gchar *message_format,
                                ...) __attribute__((__format__ (__printf__, 6, 7)));
# 8525 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef void (*GPrintFunc) (const gchar *string);
 extern
void g_print (const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
GPrintFunc g_set_print_handler (GPrintFunc func);
 extern
void g_printerr (const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
GPrintFunc g_set_printerr_handler (GPrintFunc func);
# 8604 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GOptionContext GOptionContext;
typedef struct _GOptionGroup GOptionGroup;
typedef struct _GOptionEntry GOptionEntry;
typedef enum
{
  G_OPTION_FLAG_NONE = 0,
  G_OPTION_FLAG_HIDDEN = 1 << 0,
  G_OPTION_FLAG_IN_MAIN = 1 << 1,
  G_OPTION_FLAG_REVERSE = 1 << 2,
  G_OPTION_FLAG_NO_ARG = 1 << 3,
  G_OPTION_FLAG_FILENAME = 1 << 4,
  G_OPTION_FLAG_OPTIONAL_ARG = 1 << 5,
  G_OPTION_FLAG_NOALIAS = 1 << 6
} GOptionFlags;
typedef enum
{
  G_OPTION_ARG_NONE,
  G_OPTION_ARG_STRING,
  G_OPTION_ARG_INT,
  G_OPTION_ARG_CALLBACK,
  G_OPTION_ARG_FILENAME,
  G_OPTION_ARG_STRING_ARRAY,
  G_OPTION_ARG_FILENAME_ARRAY,
  G_OPTION_ARG_DOUBLE,
  G_OPTION_ARG_INT64
} GOptionArg;
typedef gboolean (*GOptionArgFunc) (const gchar *option_name,
        const gchar *value,
        gpointer user_data,
        GError **error);
typedef gboolean (*GOptionParseFunc) (GOptionContext *context,
          GOptionGroup *group,
          gpointer user_data,
          GError **error);
typedef void (*GOptionErrorFunc) (GOptionContext *context,
      GOptionGroup *group,
      gpointer user_data,
      GError **error);

typedef enum
{
  G_OPTION_ERROR_UNKNOWN_OPTION,
  G_OPTION_ERROR_BAD_VALUE,
  G_OPTION_ERROR_FAILED
} GOptionError;
 extern
GQuark g_option_error_quark (void);
struct _GOptionEntry
{
  const gchar *long_name;
  gchar short_name;
  gint flags;
  GOptionArg arg;
  gpointer arg_data;

  const gchar *description;
  const gchar *arg_description;
};




 extern
GOptionContext *g_option_context_new (const gchar *parameter_string);
 extern
void g_option_context_set_summary (GOptionContext *context,
                                                   const gchar *summary);
 extern
const gchar * g_option_context_get_summary (GOptionContext *context);
 extern
void g_option_context_set_description (GOptionContext *context,
                                                   const gchar *description);
 extern
const gchar * g_option_context_get_description (GOptionContext *context);
 extern
void g_option_context_free (GOptionContext *context);
 extern
void g_option_context_set_help_enabled (GOptionContext *context,
         gboolean help_enabled);
 extern
gboolean g_option_context_get_help_enabled (GOptionContext *context);
 extern
void g_option_context_set_ignore_unknown_options (GOptionContext *context,
            gboolean ignore_unknown);
 extern
gboolean g_option_context_get_ignore_unknown_options (GOptionContext *context);
 extern
void g_option_context_set_strict_posix (GOptionContext *context,
                                                             gboolean strict_posix);
 extern
gboolean g_option_context_get_strict_posix (GOptionContext *context);
 extern
void g_option_context_add_main_entries (GOptionContext *context,
         const GOptionEntry *entries,
         const gchar *translation_domain);
 extern
gboolean g_option_context_parse (GOptionContext *context,
         gint *argc,
         gchar ***argv,
         GError **error);
 extern
gboolean g_option_context_parse_strv (GOptionContext *context,
                                                   gchar ***arguments,
                                                   GError **error);
 extern
void g_option_context_set_translate_func (GOptionContext *context,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
 extern
void g_option_context_set_translation_domain (GOptionContext *context,
        const gchar *domain);
 extern
void g_option_context_add_group (GOptionContext *context,
       GOptionGroup *group);
 extern
void g_option_context_set_main_group (GOptionContext *context,
            GOptionGroup *group);
 extern
GOptionGroup *g_option_context_get_main_group (GOptionContext *context);
 extern
gchar *g_option_context_get_help (GOptionContext *context,
                                               gboolean main_help,
                                               GOptionGroup *group);
 extern
GOptionGroup *g_option_group_new (const gchar *name,
           const gchar *description,
           const gchar *help_description,
           gpointer user_data,
           GDestroyNotify destroy);
 extern
void g_option_group_set_parse_hooks (GOptionGroup *group,
           GOptionParseFunc pre_parse_func,
           GOptionParseFunc post_parse_func);
 extern
void g_option_group_set_error_hook (GOptionGroup *group,
           GOptionErrorFunc error_func);
__attribute__((__deprecated__)) extern
void g_option_group_free (GOptionGroup *group);
 extern
GOptionGroup *g_option_group_ref (GOptionGroup *group);
 extern
void g_option_group_unref (GOptionGroup *group);
 extern
void g_option_group_add_entries (GOptionGroup *group,
           const GOptionEntry *entries);
 extern
void g_option_group_set_translate_func (GOptionGroup *group,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
 extern
void g_option_group_set_translation_domain (GOptionGroup *group,
           const gchar *domain);
# 8766 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GPatternSpec GPatternSpec;
 extern
GPatternSpec* g_pattern_spec_new (const gchar *pattern);
 extern
void g_pattern_spec_free (GPatternSpec *pspec);
 extern
GPatternSpec *g_pattern_spec_copy (GPatternSpec *pspec);
 extern
gboolean g_pattern_spec_equal (GPatternSpec *pspec1,
     GPatternSpec *pspec2);
 extern
gboolean g_pattern_spec_match (GPatternSpec *pspec,
                               gsize string_length,
                               const gchar *string,
                               const gchar *string_reversed);
 extern
gboolean g_pattern_spec_match_string (GPatternSpec *pspec,
                                      const gchar *string);
__attribute__((__deprecated__("Use '" "g_pattern_spec_match" "' instead"))) extern
gboolean g_pattern_match (GPatternSpec *pspec,
     guint string_length,
     const gchar *string,
     const gchar *string_reversed);
__attribute__((__deprecated__("Use '" "g_pattern_spec_match_string" "' instead"))) extern
gboolean g_pattern_match_string (GPatternSpec *pspec,
     const gchar *string);
 extern
gboolean g_pattern_match_simple (const gchar *pattern,
     const gchar *string);
# 8803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFDCallbacks GFDCallbacks;
struct _GFDCallbacks
{
  void (*on_fd_opened) (gint fd, const gchar *description);
  void (*on_fd_closed) (gint fd, const gchar *description);
};
 extern
GFDCallbacks *glib_fd_callbacks;
 extern
void g_platform_audit_set_fd_callbacks (GFDCallbacks *callbacks);
# 8821 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
guint g_spaced_primes_closest (guint num) __attribute__ ((__const__));
# 8832 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_qsort_with_data (gconstpointer pbase,
   gint total_elems,
   gsize size,
   GCompareDataFunc compare_func,
   gpointer user_data);
# 8846 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GQueue GQueue;
struct _GQueue
{
  GList *head;
  GList *tail;
  guint length;
};

 extern
GQueue* g_queue_new (void);
 extern
void g_queue_free (GQueue *queue);
 extern
void g_queue_free_full (GQueue *queue,
    GDestroyNotify free_func);
 extern
void g_queue_init (GQueue *queue);
 extern
void g_queue_clear (GQueue *queue);
 extern
gboolean g_queue_is_empty (GQueue *queue);
 extern
void g_queue_clear_full (GQueue *queue,
                                 GDestroyNotify free_func);
 extern
guint g_queue_get_length (GQueue *queue);
 extern
void g_queue_reverse (GQueue *queue);
 extern
GQueue * g_queue_copy (GQueue *queue);
 extern
void g_queue_foreach (GQueue *queue,
                                 GFunc func,
                                 gpointer user_data);
 extern
GList * g_queue_find (GQueue *queue,
                                 gconstpointer data);
 extern
GList * g_queue_find_custom (GQueue *queue,
                                 gconstpointer data,
                                 GCompareFunc func);
 extern
void g_queue_sort (GQueue *queue,
                                 GCompareDataFunc compare_func,
                                 gpointer user_data);
 extern
void g_queue_push_head (GQueue *queue,
                                 gpointer data);
 extern
void g_queue_push_tail (GQueue *queue,
                                 gpointer data);
 extern
void g_queue_push_nth (GQueue *queue,
                                 gpointer data,
                                 gint n);
 extern
gpointer g_queue_pop_head (GQueue *queue);
 extern
gpointer g_queue_pop_tail (GQueue *queue);
 extern
gpointer g_queue_pop_nth (GQueue *queue,
                                 guint n);
 extern
gpointer g_queue_peek_head (GQueue *queue);
 extern
gpointer g_queue_peek_tail (GQueue *queue);
 extern
gpointer g_queue_peek_nth (GQueue *queue,
                                 guint n);
 extern
gint g_queue_index (GQueue *queue,
                                 gconstpointer data);
 extern
gboolean g_queue_remove (GQueue *queue,
                                 gconstpointer data);
 extern
guint g_queue_remove_all (GQueue *queue,
                                 gconstpointer data);
 extern
void g_queue_insert_before (GQueue *queue,
                                 GList *sibling,
                                 gpointer data);
 extern
void g_queue_insert_before_link
                                (GQueue *queue,
                                 GList *sibling,
                                 GList *link_);
 extern
void g_queue_insert_after (GQueue *queue,
                                 GList *sibling,
                                 gpointer data);
 extern
void g_queue_insert_after_link
                                (GQueue *queue,
                                 GList *sibling,
                                 GList *link_);
 extern
void g_queue_insert_sorted (GQueue *queue,
                                 gpointer data,
                                 GCompareDataFunc func,
                                 gpointer user_data);
 extern
void g_queue_push_head_link (GQueue *queue,
                                 GList *link_);
 extern
void g_queue_push_tail_link (GQueue *queue,
                                 GList *link_);
 extern
void g_queue_push_nth_link (GQueue *queue,
                                 gint n,
                                 GList *link_);
 extern
GList* g_queue_pop_head_link (GQueue *queue);
 extern
GList* g_queue_pop_tail_link (GQueue *queue);
 extern
GList* g_queue_pop_nth_link (GQueue *queue,
                                 guint n);
 extern
GList* g_queue_peek_head_link (GQueue *queue);
 extern
GList* g_queue_peek_tail_link (GQueue *queue);
 extern
GList* g_queue_peek_nth_link (GQueue *queue,
                                 guint n);
 extern
gint g_queue_link_index (GQueue *queue,
                                 GList *link_);
 extern
void g_queue_unlink (GQueue *queue,
                                 GList *link_);
 extern
void g_queue_delete_link (GQueue *queue,
                                 GList *link_);
# 8988 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GRand GRand;
 extern
GRand* g_rand_new_with_seed (guint32 seed);
 extern
GRand* g_rand_new_with_seed_array (const guint32 *seed,
        guint seed_length);
 extern
GRand* g_rand_new (void);
 extern
void g_rand_free (GRand *rand_);
 extern
GRand* g_rand_copy (GRand *rand_);
 extern
void g_rand_set_seed (GRand *rand_,
          guint32 seed);
 extern
void g_rand_set_seed_array (GRand *rand_,
          const guint32 *seed,
          guint seed_length);

 extern
guint32 g_rand_int (GRand *rand_);
 extern
gint32 g_rand_int_range (GRand *rand_,
          gint32 begin,
          gint32 end);
 extern
gdouble g_rand_double (GRand *rand_);
 extern
gdouble g_rand_double_range (GRand *rand_,
          gdouble begin,
          gdouble end);
 extern
void g_random_set_seed (guint32 seed);

 extern
guint32 g_random_int (void);
 extern
gint32 g_random_int_range (gint32 begin,
          gint32 end);
 extern
gdouble g_random_double (void);
 extern
gdouble g_random_double_range (gdouble begin,
          gdouble end);
# 9041 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gpointer g_rc_box_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_rc_box_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_rc_box_dup (gsize block_size,
                                                 gconstpointer mem_block) __attribute__((__alloc_size__(1)));
 extern
gpointer g_rc_box_acquire (gpointer mem_block);
 extern
void g_rc_box_release (gpointer mem_block);
 extern
void g_rc_box_release_full (gpointer mem_block,
                                                 GDestroyNotify clear_func);
 extern
gsize g_rc_box_get_size (gpointer mem_block);
 extern
gpointer g_atomic_rc_box_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_atomic_rc_box_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_atomic_rc_box_dup (gsize block_size,
                                                 gconstpointer mem_block) __attribute__((__alloc_size__(1)));
 extern
gpointer g_atomic_rc_box_acquire (gpointer mem_block);
 extern
void g_atomic_rc_box_release (gpointer mem_block);
 extern
void g_atomic_rc_box_release_full (gpointer mem_block,
                                                 GDestroyNotify clear_func);
 extern
gsize g_atomic_rc_box_get_size (gpointer mem_block);
# 9099 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_ref_count_init (grefcount *rc);
 extern
void g_ref_count_inc (grefcount *rc);
 extern
gboolean g_ref_count_dec (grefcount *rc);
 extern
gboolean g_ref_count_compare (grefcount *rc,
                                                 gint val);
 extern
void g_atomic_ref_count_init (gatomicrefcount *arc);
 extern
void g_atomic_ref_count_inc (gatomicrefcount *arc);
 extern
gboolean g_atomic_ref_count_dec (gatomicrefcount *arc);
 extern
gboolean g_atomic_ref_count_compare (gatomicrefcount *arc,
                                                 gint val);
# 9178 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
char * g_ref_string_new (const char *str);
 extern
char * g_ref_string_new_len (const char *str,
                                 gssize len);
 extern
char * g_ref_string_new_intern (const char *str);
 extern
char * g_ref_string_acquire (char *str);
 extern
void g_ref_string_release (char *str);
 extern
gsize g_ref_string_length (char *str);
typedef char GRefString;
# 9200 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_REGEX_ERROR_COMPILE,
  G_REGEX_ERROR_OPTIMIZE,
  G_REGEX_ERROR_REPLACE,
  G_REGEX_ERROR_MATCH,
  G_REGEX_ERROR_INTERNAL,

  G_REGEX_ERROR_STRAY_BACKSLASH = 101,
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
  G_REGEX_ERROR_MEMORY_ERROR = 121,
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
  G_REGEX_ERROR_MALFORMED_CONDITION = 126,
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
  G_REGEX_ERROR_INVALID_CONDITION = 135,
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
  G_REGEX_ERROR_INFINITE_LOOP = 140,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
  G_REGEX_ERROR_DEFINE_REPETION = 155,
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
  G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
  G_REGEX_ERROR_MISSING_DIGIT = 163,
  G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
  G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
  G_REGEX_ERROR_MISSING_NAME = 169,
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
  G_REGEX_ERROR_NAME_TOO_LONG = 175,
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
} GRegexError;

 extern
GQuark g_regex_error_quark (void);
typedef enum
{
  G_REGEX_DEFAULT = 0,
  G_REGEX_CASELESS = 1 << 0,
  G_REGEX_MULTILINE = 1 << 1,
  G_REGEX_DOTALL = 1 << 2,
  G_REGEX_EXTENDED = 1 << 3,
  G_REGEX_ANCHORED = 1 << 4,
  G_REGEX_DOLLAR_ENDONLY = 1 << 5,
  G_REGEX_UNGREEDY = 1 << 9,
  G_REGEX_RAW = 1 << 11,
  G_REGEX_NO_AUTO_CAPTURE = 1 << 12,
  G_REGEX_OPTIMIZE = 1 << 13,
  G_REGEX_FIRSTLINE = 1 << 18,
  G_REGEX_DUPNAMES = 1 << 19,
  G_REGEX_NEWLINE_CR = 1 << 20,
  G_REGEX_NEWLINE_LF = 1 << 21,
  G_REGEX_NEWLINE_CRLF = G_REGEX_NEWLINE_CR | G_REGEX_NEWLINE_LF,
  G_REGEX_NEWLINE_ANYCRLF = G_REGEX_NEWLINE_CR | 1 << 22,
  G_REGEX_BSR_ANYCRLF = 1 << 23,
  G_REGEX_JAVASCRIPT_COMPAT __attribute__((__deprecated__)) = 1 << 25
} GRegexCompileFlags;
typedef enum
{
  G_REGEX_MATCH_DEFAULT = 0,
  G_REGEX_MATCH_ANCHORED = 1 << 4,
  G_REGEX_MATCH_NOTBOL = 1 << 7,
  G_REGEX_MATCH_NOTEOL = 1 << 8,
  G_REGEX_MATCH_NOTEMPTY = 1 << 10,
  G_REGEX_MATCH_PARTIAL = 1 << 15,
  G_REGEX_MATCH_NEWLINE_CR = 1 << 20,
  G_REGEX_MATCH_NEWLINE_LF = 1 << 21,
  G_REGEX_MATCH_NEWLINE_CRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_LF,
  G_REGEX_MATCH_NEWLINE_ANY = 1 << 22,
  G_REGEX_MATCH_NEWLINE_ANYCRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_ANY,
  G_REGEX_MATCH_BSR_ANYCRLF = 1 << 23,
  G_REGEX_MATCH_BSR_ANY = 1 << 24,
  G_REGEX_MATCH_PARTIAL_SOFT = G_REGEX_MATCH_PARTIAL,
  G_REGEX_MATCH_PARTIAL_HARD = 1 << 27,
  G_REGEX_MATCH_NOTEMPTY_ATSTART = 1 << 28
} GRegexMatchFlags;
typedef struct _GRegex GRegex;
typedef struct _GMatchInfo GMatchInfo;
typedef gboolean (*GRegexEvalCallback) (const GMatchInfo *match_info,
       GString *result,
       gpointer user_data);
 extern
GRegex *g_regex_new (const gchar *pattern,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options,
       GError **error);
 extern
GRegex *g_regex_ref (GRegex *regex);
 extern
void g_regex_unref (GRegex *regex);
 extern
const gchar *g_regex_get_pattern (const GRegex *regex);
 extern
gint g_regex_get_max_backref (const GRegex *regex);
 extern
gint g_regex_get_capture_count (const GRegex *regex);
 extern
gboolean g_regex_get_has_cr_or_lf (const GRegex *regex);
 extern
gint g_regex_get_max_lookbehind (const GRegex *regex);
 extern
gint g_regex_get_string_number (const GRegex *regex,
       const gchar *name);
 extern
gchar *g_regex_escape_string (const gchar *string,
       gint length);
 extern
gchar *g_regex_escape_nul (const gchar *string,
       gint length);
 extern
GRegexCompileFlags g_regex_get_compile_flags (const GRegex *regex);
 extern
GRegexMatchFlags g_regex_get_match_flags (const GRegex *regex);
 extern
gboolean g_regex_match_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
 extern
gboolean g_regex_match (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
 extern
gboolean g_regex_match_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);
 extern
gboolean g_regex_match_all (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
 extern
gboolean g_regex_match_all_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);
 extern
gchar **g_regex_split_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
 extern
gchar **g_regex_split (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options);
 extern
gchar **g_regex_split_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       gint max_tokens,
       GError **error);
 extern
gchar *g_regex_replace (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
 extern
gchar *g_regex_replace_literal (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
 extern
gchar *g_regex_replace_eval (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GRegexEvalCallback eval,
       gpointer user_data,
       GError **error);
 extern
gboolean g_regex_check_replacement (const gchar *replacement,
       gboolean *has_references,
       GError **error);
 extern
GRegex *g_match_info_get_regex (const GMatchInfo *match_info);
 extern
const gchar *g_match_info_get_string (const GMatchInfo *match_info);
 extern
GMatchInfo *g_match_info_ref (GMatchInfo *match_info);
 extern
void g_match_info_unref (GMatchInfo *match_info);
 extern
void g_match_info_free (GMatchInfo *match_info);
 extern
gboolean g_match_info_next (GMatchInfo *match_info,
       GError **error);
 extern
gboolean g_match_info_matches (const GMatchInfo *match_info);
 extern
gint g_match_info_get_match_count (const GMatchInfo *match_info);
 extern
gboolean g_match_info_is_partial_match (const GMatchInfo *match_info);
 extern
gchar *g_match_info_expand_references(const GMatchInfo *match_info,
       const gchar *string_to_expand,
       GError **error);
 extern
gchar *g_match_info_fetch (const GMatchInfo *match_info,
       gint match_num);
 extern
gboolean g_match_info_fetch_pos (const GMatchInfo *match_info,
       gint match_num,
       gint *start_pos,
       gint *end_pos);
 extern
gchar *g_match_info_fetch_named (const GMatchInfo *match_info,
       const gchar *name);
 extern
gboolean g_match_info_fetch_named_pos (const GMatchInfo *match_info,
       const gchar *name,
       gint *start_pos,
       gint *end_pos);
 extern
gchar **g_match_info_fetch_all (const GMatchInfo *match_info);
# 9468 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GScanner GScanner;
typedef struct _GScannerConfig GScannerConfig;
typedef union _GTokenValue GTokenValue;
typedef void (*GScannerMsgFunc) (GScanner *scanner,
       gchar *message,
       gboolean error);
# 9485 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_ERR_UNKNOWN,
  G_ERR_UNEXP_EOF,
  G_ERR_UNEXP_EOF_IN_STRING,
  G_ERR_UNEXP_EOF_IN_COMMENT,
  G_ERR_NON_DIGIT_IN_CONST,
  G_ERR_DIGIT_RADIX,
  G_ERR_FLOAT_RADIX,
  G_ERR_FLOAT_MALFORMED
} GErrorType;
typedef enum
{
  G_TOKEN_EOF = 0,

  G_TOKEN_LEFT_PAREN = '(',
  G_TOKEN_RIGHT_PAREN = ')',
  G_TOKEN_LEFT_CURLY = '{',
  G_TOKEN_RIGHT_CURLY = '}',
  G_TOKEN_LEFT_BRACE = '[',
  G_TOKEN_RIGHT_BRACE = ']',
  G_TOKEN_EQUAL_SIGN = '=',
  G_TOKEN_COMMA = ',',

  G_TOKEN_NONE = 256,

  G_TOKEN_ERROR,

  G_TOKEN_CHAR,
  G_TOKEN_BINARY,
  G_TOKEN_OCTAL,
  G_TOKEN_INT,
  G_TOKEN_HEX,
  G_TOKEN_FLOAT,
  G_TOKEN_STRING,

  G_TOKEN_SYMBOL,
  G_TOKEN_IDENTIFIER,
  G_TOKEN_IDENTIFIER_NULL,

  G_TOKEN_COMMENT_SINGLE,
  G_TOKEN_COMMENT_MULTI,

  G_TOKEN_LAST
} GTokenType;
union _GTokenValue
{
  gpointer v_symbol;
  gchar *v_identifier;
  gulong v_binary;
  gulong v_octal;
  gulong v_int;
  guint64 v_int64;
  gdouble v_float;
  gulong v_hex;
  gchar *v_string;
  gchar *v_comment;
  guchar v_char;
  guint v_error;
};
struct _GScannerConfig
{

  gchar *cset_skip_characters;
  gchar *cset_identifier_first;
  gchar *cset_identifier_nth;
  gchar *cpair_comment_single;


  guint case_sensitive : 1;


  guint skip_comment_multi : 1;
  guint skip_comment_single : 1;
  guint scan_comment_multi : 1;
  guint scan_identifier : 1;
  guint scan_identifier_1char : 1;
  guint scan_identifier_NULL : 1;
  guint scan_symbols : 1;
  guint scan_binary : 1;
  guint scan_octal : 1;
  guint scan_float : 1;
  guint scan_hex : 1;
  guint scan_hex_dollar : 1;
  guint scan_string_sq : 1;
  guint scan_string_dq : 1;
  guint numbers_2_int : 1;
  guint int_2_float : 1;
  guint identifier_2_string : 1;
  guint char_2_token : 1;
  guint symbol_2_token : 1;
  guint scope_0_fallback : 1;
  guint store_int64 : 1;

  guint padding_dummy;
};
struct _GScanner
{

  gpointer user_data;
  guint max_parse_errors;


  guint parse_errors;


  const gchar *input_name;


  GData *qdata;


  GScannerConfig *config;


  GTokenType token;
  GTokenValue value;
  guint line;
  guint position;


  GTokenType next_token;
  GTokenValue next_value;
  guint next_line;
  guint next_position;


  GHashTable *symbol_table;
  gint input_fd;
  const gchar *text;
  const gchar *text_end;
  gchar *buffer;
  guint scope_id;


  GScannerMsgFunc msg_handler;
};
 extern
GScanner* g_scanner_new (const GScannerConfig *config_templ);
 extern
void g_scanner_destroy (GScanner *scanner);
 extern
void g_scanner_input_file (GScanner *scanner,
       gint input_fd);
 extern
void g_scanner_sync_file_offset (GScanner *scanner);
 extern
void g_scanner_input_text (GScanner *scanner,
       const gchar *text,
       guint text_len);
 extern
GTokenType g_scanner_get_next_token (GScanner *scanner);
 extern
GTokenType g_scanner_peek_next_token (GScanner *scanner);
 extern
GTokenType g_scanner_cur_token (GScanner *scanner);
 extern
GTokenValue g_scanner_cur_value (GScanner *scanner);
 extern
guint g_scanner_cur_line (GScanner *scanner);
 extern
guint g_scanner_cur_position (GScanner *scanner);
 extern
gboolean g_scanner_eof (GScanner *scanner);
 extern
guint g_scanner_set_scope (GScanner *scanner,
       guint scope_id);
 extern
void g_scanner_scope_add_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol,
       gpointer value);
 extern
void g_scanner_scope_remove_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
 extern
gpointer g_scanner_scope_lookup_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
 extern
void g_scanner_scope_foreach_symbol (GScanner *scanner,
       guint scope_id,
       GHFunc func,
       gpointer user_data);
 extern
gpointer g_scanner_lookup_symbol (GScanner *scanner,
       const gchar *symbol);
 extern
void g_scanner_unexp_token (GScanner *scanner,
       GTokenType expected_token,
       const gchar *identifier_spec,
       const gchar *symbol_spec,
       const gchar *symbol_name,
       const gchar *message,
       gint is_error);
 extern
void g_scanner_error (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_scanner_warn (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
# 9708 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSequence GSequence;
typedef struct _GSequenceNode GSequenceIter;
typedef gint (* GSequenceIterCompareFunc) (GSequenceIter *a,
                                           GSequenceIter *b,
                                           gpointer user_data);
 extern
GSequence * g_sequence_new (GDestroyNotify data_destroy);
 extern
void g_sequence_free (GSequence *seq);
 extern
gint g_sequence_get_length (GSequence *seq);
 extern
void g_sequence_foreach (GSequence *seq,
                                              GFunc func,
                                              gpointer user_data);
 extern
void g_sequence_foreach_range (GSequenceIter *begin,
                                              GSequenceIter *end,
                                              GFunc func,
                                              gpointer user_data);
 extern
void g_sequence_sort (GSequence *seq,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
void g_sequence_sort_iter (GSequence *seq,
                                              GSequenceIterCompareFunc cmp_func,
                                              gpointer cmp_data);
 extern
gboolean g_sequence_is_empty (GSequence *seq);
 extern
GSequenceIter *g_sequence_get_begin_iter (GSequence *seq);
 extern
GSequenceIter *g_sequence_get_end_iter (GSequence *seq);
 extern
GSequenceIter *g_sequence_get_iter_at_pos (GSequence *seq,
                                              gint pos);
 extern
GSequenceIter *g_sequence_append (GSequence *seq,
                                              gpointer data);
 extern
GSequenceIter *g_sequence_prepend (GSequence *seq,
                                              gpointer data);
 extern
GSequenceIter *g_sequence_insert_before (GSequenceIter *iter,
                                              gpointer data);
 extern
void g_sequence_move (GSequenceIter *src,
                                              GSequenceIter *dest);
 extern
void g_sequence_swap (GSequenceIter *a,
                                              GSequenceIter *b);
 extern
GSequenceIter *g_sequence_insert_sorted (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
GSequenceIter *g_sequence_insert_sorted_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
 extern
void g_sequence_sort_changed (GSequenceIter *iter,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
void g_sequence_sort_changed_iter (GSequenceIter *iter,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
 extern
void g_sequence_remove (GSequenceIter *iter);
 extern
void g_sequence_remove_range (GSequenceIter *begin,
                                              GSequenceIter *end);
 extern
void g_sequence_move_range (GSequenceIter *dest,
                                              GSequenceIter *begin,
                                              GSequenceIter *end);
 extern
GSequenceIter *g_sequence_search (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
GSequenceIter *g_sequence_search_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
 extern
GSequenceIter *g_sequence_lookup (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
GSequenceIter *g_sequence_lookup_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
 extern
gpointer g_sequence_get (GSequenceIter *iter);
 extern
void g_sequence_set (GSequenceIter *iter,
                                              gpointer data);
 extern
gboolean g_sequence_iter_is_begin (GSequenceIter *iter);
 extern
gboolean g_sequence_iter_is_end (GSequenceIter *iter);
 extern
GSequenceIter *g_sequence_iter_next (GSequenceIter *iter);
 extern
GSequenceIter *g_sequence_iter_prev (GSequenceIter *iter);
 extern
gint g_sequence_iter_get_position (GSequenceIter *iter);
 extern
GSequenceIter *g_sequence_iter_move (GSequenceIter *iter,
                                              gint delta);
 extern
GSequence * g_sequence_iter_get_sequence (GSequenceIter *iter);
 extern
gint g_sequence_iter_compare (GSequenceIter *a,
                                              GSequenceIter *b);
 extern
GSequenceIter *g_sequence_range_get_midpoint (GSequenceIter *begin,
                                              GSequenceIter *end);
# 9842 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{

  G_SHELL_ERROR_BAD_QUOTING,

  G_SHELL_ERROR_EMPTY_STRING,
  G_SHELL_ERROR_FAILED
} GShellError;
 extern
GQuark g_shell_error_quark (void);
 extern
gchar* g_shell_quote (const gchar *unquoted_string);
 extern
gchar* g_shell_unquote (const gchar *quoted_string,
                             GError **error);
 extern
gboolean g_shell_parse_argv (const gchar *command_line,
                             gint *argcp,
                             gchar ***argvp,
                             GError **error);







# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.h" 1 3 4
# 9870 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2

 extern
gpointer g_slice_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_slice_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_slice_copy (gsize block_size,
                                         gconstpointer mem_block) __attribute__((__alloc_size__(1)));
 extern
void g_slice_free1 (gsize block_size,
      gpointer mem_block);
 extern
void g_slice_free_chain_with_offset (gsize block_size,
      gpointer mem_chain,
      gsize next_offset);
# 9912 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum {
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
  G_SLICE_CONFIG_BYPASS_MAGAZINES,
  G_SLICE_CONFIG_WORKING_SET_MSECS,
  G_SLICE_CONFIG_COLOR_INCREMENT,
  G_SLICE_CONFIG_CHUNK_SIZES,
  G_SLICE_CONFIG_CONTENTION_COUNTER
} GSliceConfig;
__attribute__((__deprecated__)) extern
void g_slice_set_config (GSliceConfig ckey, gint64 value);
__attribute__((__deprecated__)) extern
gint64 g_slice_get_config (GSliceConfig ckey);
__attribute__((__deprecated__)) extern
gint64* g_slice_get_config_state (GSliceConfig ckey, gint64 address, guint *n_values);
# 9939 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_SPAWN_ERROR_FORK,
  G_SPAWN_ERROR_READ,
  G_SPAWN_ERROR_CHDIR,
  G_SPAWN_ERROR_ACCES,
  G_SPAWN_ERROR_PERM,
  G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_2BIG __attribute__((__deprecated__("Use '" "G_SPAWN_ERROR_TOO_BIG" "' instead"))) = G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_NOEXEC,
  G_SPAWN_ERROR_NAMETOOLONG,
  G_SPAWN_ERROR_NOENT,
  G_SPAWN_ERROR_NOMEM,
  G_SPAWN_ERROR_NOTDIR,
  G_SPAWN_ERROR_LOOP,
  G_SPAWN_ERROR_TXTBUSY,
  G_SPAWN_ERROR_IO,
  G_SPAWN_ERROR_NFILE,
  G_SPAWN_ERROR_MFILE,
  G_SPAWN_ERROR_INVAL,
  G_SPAWN_ERROR_ISDIR,
  G_SPAWN_ERROR_LIBBAD,
  G_SPAWN_ERROR_FAILED
} GSpawnError;

typedef void (* GSpawnChildSetupFunc) (gpointer user_data);
typedef enum
{
  G_SPAWN_DEFAULT = 0,
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 << 0,
  G_SPAWN_DO_NOT_REAP_CHILD = 1 << 1,

  G_SPAWN_SEARCH_PATH = 1 << 2,

  G_SPAWN_STDOUT_TO_DEV_NULL = 1 << 3,
  G_SPAWN_STDERR_TO_DEV_NULL = 1 << 4,
  G_SPAWN_CHILD_INHERITS_STDIN = 1 << 5,
  G_SPAWN_FILE_AND_ARGV_ZERO = 1 << 6,
  G_SPAWN_SEARCH_PATH_FROM_ENVP = 1 << 7,
  G_SPAWN_CLOEXEC_PIPES = 1 << 8,

  G_SPAWN_CHILD_INHERITS_STDOUT = 1 << 9,

  G_SPAWN_CHILD_INHERITS_STDERR = 1 << 10,

  G_SPAWN_STDIN_FROM_DEV_NULL = 1 << 11
} GSpawnFlags;
 extern
GQuark g_spawn_error_quark (void);
 extern
GQuark g_spawn_exit_error_quark (void);
 extern
gboolean g_spawn_async (const gchar *working_directory,
                        gchar **argv,
                        gchar **envp,
                        GSpawnFlags flags,
                        GSpawnChildSetupFunc child_setup,
                        gpointer user_data,
                        GPid *child_pid,
                        GError **error);
 extern
gboolean g_spawn_async_with_pipes (const gchar *working_directory,
                                   gchar **argv,
                                   gchar **envp,
                                   GSpawnFlags flags,
                                   GSpawnChildSetupFunc child_setup,
                                   gpointer user_data,
                                   GPid *child_pid,
                                   gint *standard_input,
                                   gint *standard_output,
                                   gint *standard_error,
                                   GError **error);
 extern
gboolean g_spawn_async_with_pipes_and_fds (const gchar *working_directory,
                                           const gchar * const *argv,
                                           const gchar * const *envp,
                                           GSpawnFlags flags,
                                           GSpawnChildSetupFunc child_setup,
                                           gpointer user_data,
                                           gint stdin_fd,
                                           gint stdout_fd,
                                           gint stderr_fd,
                                           const gint *source_fds,
                                           const gint *target_fds,
                                           gsize n_fds,
                                           GPid *child_pid_out,
                                           gint *stdin_pipe_out,
                                           gint *stdout_pipe_out,
                                           gint *stderr_pipe_out,
                                           GError **error);
 extern
gboolean g_spawn_async_with_fds (const gchar *working_directory,
                                 gchar **argv,
                                 gchar **envp,
                                 GSpawnFlags flags,
                                 GSpawnChildSetupFunc child_setup,
                                 gpointer user_data,
                                 GPid *child_pid,
                                 gint stdin_fd,
                                 gint stdout_fd,
                                 gint stderr_fd,
                                 GError **error);
 extern
gboolean g_spawn_sync (const gchar *working_directory,
                               gchar **argv,
                               gchar **envp,
                               GSpawnFlags flags,
                               GSpawnChildSetupFunc child_setup,
                               gpointer user_data,
                               gchar **standard_output,
                               gchar **standard_error,
                               gint *wait_status,
                               GError **error);
 extern
gboolean g_spawn_command_line_sync (const gchar *command_line,
                                     gchar **standard_output,
                                     gchar **standard_error,
                                     gint *wait_status,
                                     GError **error);
 extern
gboolean g_spawn_command_line_async (const gchar *command_line,
                                     GError **error);
 extern
gboolean g_spawn_check_wait_status (gint wait_status,
                                    GError **error);
__attribute__((__deprecated__("Use '" "g_spawn_check_wait_status" "' instead"))) extern
gboolean g_spawn_check_exit_status (gint wait_status,
        GError **error);
 extern
void g_spawn_close_pid (GPid pid);







# 1 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16/include/stdarg.h" 1 3
# 10077 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.h" 1 3 4
# 10078 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2

typedef enum {
  G_ASCII_ALNUM = 1 << 0,
  G_ASCII_ALPHA = 1 << 1,
  G_ASCII_CNTRL = 1 << 2,
  G_ASCII_DIGIT = 1 << 3,
  G_ASCII_GRAPH = 1 << 4,
  G_ASCII_LOWER = 1 << 5,
  G_ASCII_PRINT = 1 << 6,
  G_ASCII_PUNCT = 1 << 7,
  G_ASCII_SPACE = 1 << 8,
  G_ASCII_UPPER = 1 << 9,
  G_ASCII_XDIGIT = 1 << 10
} GAsciiType;
 extern const guint16 * const g_ascii_table;
# 10115 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gchar g_ascii_tolower (gchar c) __attribute__ ((__const__));
 extern
gchar g_ascii_toupper (gchar c) __attribute__ ((__const__));
 extern
gint g_ascii_digit_value (gchar c) __attribute__ ((__const__));
 extern
gint g_ascii_xdigit_value (gchar c) __attribute__ ((__const__));

 extern
gchar* g_strdelimit (gchar *string,
     const gchar *delimiters,
     gchar new_delimiter);
 extern
gchar* g_strcanon (gchar *string,
     const gchar *valid_chars,
     gchar substitutor);
 extern
const gchar * g_strerror (gint errnum) __attribute__ ((__const__));
 extern
const gchar * g_strsignal (gint signum) __attribute__ ((__const__));
 extern
gchar * g_strreverse (gchar *string);
 extern
gsize g_strlcpy (gchar *dest,
     const gchar *src,
     gsize dest_size);
 extern
gsize g_strlcat (gchar *dest,
     const gchar *src,
     gsize dest_size);
 extern
gchar * g_strstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);
 extern
gchar * g_strrstr (const gchar *haystack,
     const gchar *needle);
 extern
gchar * g_strrstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);
 extern
gboolean (g_str_has_suffix) (const gchar *str,
                                         const gchar *suffix);
 extern
gboolean (g_str_has_prefix) (const gchar *str,
                                         const gchar *prefix);
# 10212 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gdouble g_strtod (const gchar *nptr,
     gchar **endptr);
 extern
gdouble g_ascii_strtod (const gchar *nptr,
     gchar **endptr);
 extern
guint64 g_ascii_strtoull (const gchar *nptr,
     gchar **endptr,
     guint base);
 extern
gint64 g_ascii_strtoll (const gchar *nptr,
     gchar **endptr,
     guint base);

 extern
gchar * g_ascii_dtostr (gchar *buffer,
     gint buf_len,
     gdouble d);
 extern
gchar * g_ascii_formatd (gchar *buffer,
     gint buf_len,
     const gchar *format,
     gdouble d);
 extern
gchar* g_strchug (gchar *string);
 extern
gchar* g_strchomp (gchar *string);

 extern
gint g_ascii_strcasecmp (const gchar *s1,
        const gchar *s2);
 extern
gint g_ascii_strncasecmp (const gchar *s1,
        const gchar *s2,
        gsize n);
 extern
gchar* g_ascii_strdown (const gchar *str,
        gssize len) __attribute__ ((__malloc__));
 extern
gchar* g_ascii_strup (const gchar *str,
        gssize len) __attribute__ ((__malloc__));
 extern
gboolean g_str_is_ascii (const gchar *str);
__attribute__((__deprecated__)) extern
gint g_strcasecmp (const gchar *s1,
                                        const gchar *s2);
__attribute__((__deprecated__)) extern
gint g_strncasecmp (const gchar *s1,
                                        const gchar *s2,
                                        guint n);
__attribute__((__deprecated__)) extern
gchar* g_strdown (gchar *string);
__attribute__((__deprecated__)) extern
gchar* g_strup (gchar *string);
 extern
gchar* g_strdup (const gchar *str) __attribute__ ((__malloc__));
 extern
gchar* g_strdup_printf (const gchar *format,
     ...) __attribute__((__format__ (__printf__, 1, 2))) __attribute__ ((__malloc__));
 extern
gchar* g_strdup_vprintf (const gchar *format,
     va_list args) __attribute__((__format__ (__printf__, 1, 0))) __attribute__ ((__malloc__));
 extern
gchar* g_strndup (const gchar *str,
     gsize n) __attribute__ ((__malloc__));
 extern
gchar* g_strnfill (gsize length,
     gchar fill_char) __attribute__ ((__malloc__));
 extern
gchar* g_strconcat (const gchar *string1,
     ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
 extern
gchar* g_strjoin (const gchar *separator,
     ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
 extern
gchar* g_strcompress (const gchar *source) __attribute__ ((__malloc__));
 extern
gchar* g_strescape (const gchar *source,
     const gchar *exceptions) __attribute__ ((__malloc__));
__attribute__((__deprecated__("Use '" "g_memdup2" "' instead"))) extern
gpointer g_memdup (gconstpointer mem,
                                        guint byte_size) __attribute__((__alloc_size__(2)));
 extern
gpointer g_memdup2 (gconstpointer mem,
                                        gsize byte_size) __attribute__((__alloc_size__(2)));
typedef gchar** GStrv;
 extern
gchar** g_strsplit (const gchar *string,
     const gchar *delimiter,
     gint max_tokens);
 extern
gchar ** g_strsplit_set (const gchar *string,
     const gchar *delimiters,
     gint max_tokens);
 extern
gchar* g_strjoinv (const gchar *separator,
     gchar **str_array) __attribute__ ((__malloc__));
 extern
void g_strfreev (gchar **str_array);
 extern
gchar** g_strdupv (gchar **str_array);
 extern
guint g_strv_length (gchar **str_array);
 extern
gchar* g_stpcpy (gchar *dest,
                                        const char *src);
 extern
gchar * g_str_to_ascii (const gchar *str,
                                                                         const gchar *from_locale);
 extern
gchar ** g_str_tokenize_and_fold (const gchar *string,
                                                                         const gchar *translit_locale,
                                                                         gchar ***ascii_alternates);
 extern
gboolean g_str_match_string (const gchar *search_term,
                                                                         const gchar *potential_hit,
                                                                         gboolean accept_alternates);
 extern
gboolean g_strv_contains (const gchar * const *strv,
                                        const gchar *str);
 extern
gboolean g_strv_equal (const gchar * const *strv1,
                                        const gchar * const *strv2);
typedef enum
  {
    G_NUMBER_PARSER_ERROR_INVALID,
    G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS,
  } GNumberParserError;

 extern
GQuark g_number_parser_error_quark (void);
 extern
gboolean g_ascii_string_to_signed (const gchar *str,
                                                    guint base,
                                                    gint64 min,
                                                    gint64 max,
                                                    gint64 *out_num,
                                                    GError **error);
 extern
gboolean g_ascii_string_to_unsigned (const gchar *str,
                                                    guint base,
                                                    guint64 min,
                                                    guint64 max,
                                                    guint64 *out_num,
                                                    GError **error);

static inline gboolean
g_set_str (char **str_pointer,
           const char *new_str)
{
  char *copy;
  if (*str_pointer == new_str ||
      (*str_pointer && new_str && strcmp (*str_pointer, new_str) == 0))
    return (0);
  copy = g_strdup (new_str);
  g_free (*str_pointer);
  *str_pointer = copy;
  return (!(0));
}
# 10380 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GStringChunk GStringChunk;
 extern
GStringChunk* g_string_chunk_new (gsize size);
 extern
void g_string_chunk_free (GStringChunk *chunk);
 extern
void g_string_chunk_clear (GStringChunk *chunk);
 extern
gchar* g_string_chunk_insert (GStringChunk *chunk,
                                           const gchar *string);
 extern
gchar* g_string_chunk_insert_len (GStringChunk *chunk,
                                           const gchar *string,
                                           gssize len);
 extern
gchar* g_string_chunk_insert_const (GStringChunk *chunk,
                                           const gchar *string);
# 10405 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GStrvBuilder GStrvBuilder;
 extern
GStrvBuilder *g_strv_builder_new (void);
 extern
void g_strv_builder_unref (GStrvBuilder *builder);
 extern
GStrvBuilder *g_strv_builder_ref (GStrvBuilder *builder);
 extern
void g_strv_builder_add (GStrvBuilder *builder,
                         const char *value);
 extern
void g_strv_builder_addv (GStrvBuilder *builder,
                          const char **value);
 extern
void g_strv_builder_add_many (GStrvBuilder *builder,
                              ...) __attribute__((__sentinel__));
 extern
GStrv g_strv_builder_end (GStrvBuilder *builder);







# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/errno.h" 1 3 4
# 23 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/errno.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/errno.h" 1 3 4
# 80 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/errno.h" 3 4
extern int * __error(void);
# 24 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/errno.h" 2 3 4
# 10431 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h" 1 3 4
# 10432 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.h" 1 3 4
# 10433 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2

typedef struct GTestCase GTestCase;
typedef struct GTestSuite GTestSuite;
typedef void (*GTestFunc) (void);
typedef void (*GTestDataFunc) (gconstpointer user_data);
typedef void (*GTestFixtureFunc) (gpointer fixture,
                                  gconstpointer user_data);
# 10628 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
int g_strcmp0 (const char *str1,
                                         const char *str2);
 extern
void g_test_minimized_result (double minimized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_test_maximized_result (double maximized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_test_init (int *argc,
                                         char ***argv,
                                         ...) __attribute__((__sentinel__));
# 10669 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gboolean g_test_subprocess (void);
 extern
int g_test_run (void);
 extern
void g_test_add_func (const char *testpath,
                                         GTestFunc test_func);
 extern
void g_test_add_data_func (const char *testpath,
                                         gconstpointer test_data,
                                         GTestDataFunc test_func);
 extern
void g_test_add_data_func_full (const char *testpath,
                                         gpointer test_data,
                                         GTestDataFunc test_func,
                                         GDestroyNotify data_free_func);
 extern
const char * g_test_get_path (void);
 extern
void g_test_fail (void);
 extern
void g_test_fail_printf (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
void g_test_incomplete (const gchar *msg);
 extern
void g_test_incomplete_printf (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
void g_test_skip (const gchar *msg);
 extern
void g_test_skip_printf (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
gboolean g_test_failed (void);
 extern
void g_test_set_nonfatal_assertions (void);
# 10717 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_test_message (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
void g_test_bug_base (const char *uri_pattern);
 extern
void g_test_bug (const char *bug_uri_snippet);
 extern
void g_test_summary (const char *summary);
 extern
void g_test_timer_start (void);
 extern
double g_test_timer_elapsed (void);
 extern
double g_test_timer_last (void);
 extern
void g_test_queue_free (gpointer gfree_pointer);
 extern
void g_test_queue_destroy (GDestroyNotify destroy_func,
                                         gpointer destroy_data);

typedef enum {
  G_TEST_TRAP_DEFAULT = 0,
  G_TEST_TRAP_SILENCE_STDOUT = 1 << 7,
  G_TEST_TRAP_SILENCE_STDERR = 1 << 8,
  G_TEST_TRAP_INHERIT_STDIN = 1 << 9
} GTestTrapFlags __attribute__((__deprecated__("Use '" "GTestSubprocessFlags" "' instead")));
#pragma clang diagnostic push
# 10744 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_test_trap_subprocess" "' instead"))) extern
gboolean g_test_trap_fork (guint64 usec_timeout,
                                         GTestTrapFlags test_trap_flags);
#pragma clang diagnostic pop
typedef enum {
  G_TEST_SUBPROCESS_DEFAULT = 0,
  G_TEST_SUBPROCESS_INHERIT_STDIN = 1 << 0,
  G_TEST_SUBPROCESS_INHERIT_STDOUT = 1 << 1,
  G_TEST_SUBPROCESS_INHERIT_STDERR = 1 << 2
} GTestSubprocessFlags;
 extern
void g_test_trap_subprocess (const char *test_path,
                                         guint64 usec_timeout,
                                         GTestSubprocessFlags test_flags);
 extern
gboolean g_test_trap_has_passed (void);
 extern
gboolean g_test_trap_reached_timeout (void);







 extern
gint32 g_test_rand_int (void);
 extern
gint32 g_test_rand_int_range (gint32 begin,
                                         gint32 end);
 extern
double g_test_rand_double (void);
 extern
double g_test_rand_double_range (double range_start,
                                         double range_end);
 extern
GTestCase* g_test_create_case (const char *test_name,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         GTestFixtureFunc data_setup,
                                         GTestFixtureFunc data_test,
                                         GTestFixtureFunc data_teardown);
 extern
GTestSuite* g_test_create_suite (const char *suite_name);
 extern
GTestSuite* g_test_get_root (void);
 extern
void g_test_suite_add (GTestSuite *suite,
                                         GTestCase *test_case);
 extern
void g_test_suite_add_suite (GTestSuite *suite,
                                         GTestSuite *nestedsuite);
 extern
int g_test_run_suite (GTestSuite *suite);
 extern
void g_test_case_free (GTestCase *test_case);
 extern
void g_test_suite_free (GTestSuite *suite);
 extern
void g_test_trap_assertions (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         guint64 assertion_flags,
                                         const char *pattern);
 extern
void g_assertion_message (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *message) ;
 extern
__attribute__ ((__noreturn__))
void g_assertion_message_expr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr);
 extern
void g_assertion_message_cmpstr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const char *arg1,
                                         const char *cmp,
                                         const char *arg2) ;
 extern
void g_assertion_message_cmpstrv (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const char * const *arg1,
                                         const char * const *arg2,
                                         gsize first_wrong_idx) ;
 extern
void g_assertion_message_cmpnum (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         long double arg1,
                                         const char *cmp,
                                         long double arg2,
                                         char numtype) ;
 extern
void g_assertion_message_error (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const GError *error,
                                         GQuark error_domain,
                                         int error_code) ;
 extern
void g_test_add_vtable (const char *testpath,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         GTestFixtureFunc data_setup,
                                         GTestFixtureFunc data_test,
                                         GTestFixtureFunc data_teardown);
typedef struct {
  gboolean test_initialized;
  gboolean test_quick;
  gboolean test_perf;
  gboolean test_verbose;
  gboolean test_quiet;
  gboolean test_undefined;
} GTestConfig;
 extern const GTestConfig * const g_test_config_vars;
typedef enum {
  G_TEST_RUN_SUCCESS,
  G_TEST_RUN_SKIPPED,
  G_TEST_RUN_FAILURE,
  G_TEST_RUN_INCOMPLETE
} GTestResult;
typedef enum {
  G_TEST_LOG_NONE,
  G_TEST_LOG_ERROR,
  G_TEST_LOG_START_BINARY,
  G_TEST_LOG_LIST_CASE,
  G_TEST_LOG_SKIP_CASE,
  G_TEST_LOG_START_CASE,
  G_TEST_LOG_STOP_CASE,
  G_TEST_LOG_MIN_RESULT,
  G_TEST_LOG_MAX_RESULT,
  G_TEST_LOG_MESSAGE,
  G_TEST_LOG_START_SUITE,
  G_TEST_LOG_STOP_SUITE
} GTestLogType;
typedef struct {
  GTestLogType log_type;
  guint n_strings;
  gchar **strings;
  guint n_nums;
  long double *nums;
} GTestLogMsg;
typedef struct {

  GString *data;
  GSList *msgs;
} GTestLogBuffer;
 extern
const char* g_test_log_type_name (GTestLogType log_type);
 extern
GTestLogBuffer* g_test_log_buffer_new (void);
 extern
void g_test_log_buffer_free (GTestLogBuffer *tbuffer);
 extern
void g_test_log_buffer_push (GTestLogBuffer *tbuffer,
                                         guint n_bytes,
                                         const guint8 *bytes);
 extern
GTestLogMsg* g_test_log_buffer_pop (GTestLogBuffer *tbuffer);
 extern
void g_test_log_msg_free (GTestLogMsg *tmsg);
typedef gboolean (*GTestLogFatalFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);
 extern
void
g_test_log_set_fatal_handler (GTestLogFatalFunc log_func,
                                         gpointer user_data);
 extern
void g_test_expect_message (const gchar *log_domain,
                                                  GLogLevelFlags log_level,
                                                  const gchar *pattern);
 extern
void g_test_assert_expected_messages_internal (const char *domain,
                                                  const char *file,
                                                  int line,
                                                  const char *func);
typedef enum
{
  G_TEST_DIST,
  G_TEST_BUILT
} GTestFileType;
 extern
gchar * g_test_build_filename (GTestFileType file_type,
                                                  const gchar *first_path,
                                                  ...) __attribute__((__sentinel__));
 extern
const gchar *g_test_get_dir (GTestFileType file_type);
 extern
const gchar *g_test_get_filename (GTestFileType file_type,
                                                  const gchar *first_path,
                                                  ...) __attribute__((__sentinel__));
# 10963 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GThreadPool GThreadPool;
struct _GThreadPool
{
  GFunc func;
  gpointer user_data;
  gboolean exclusive;
};
 extern
GThreadPool * g_thread_pool_new (GFunc func,
                                                 gpointer user_data,
                                                 gint max_threads,
                                                 gboolean exclusive,
                                                 GError **error);
 extern
GThreadPool * g_thread_pool_new_full (GFunc func,
                                                 gpointer user_data,
                                                 GDestroyNotify item_free_func,
                                                 gint max_threads,
                                                 gboolean exclusive,
                                                 GError **error);
 extern
void g_thread_pool_free (GThreadPool *pool,
                                                 gboolean immediate,
                                                 gboolean wait_);
 extern
gboolean g_thread_pool_push (GThreadPool *pool,
                                                 gpointer data,
                                                 GError **error);
 extern
guint g_thread_pool_unprocessed (GThreadPool *pool);
 extern
void g_thread_pool_set_sort_function (GThreadPool *pool,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
gboolean g_thread_pool_move_to_front (GThreadPool *pool,
                                                 gpointer data);
 extern
gboolean g_thread_pool_set_max_threads (GThreadPool *pool,
                                                 gint max_threads,
                                                 GError **error);
 extern
gint g_thread_pool_get_max_threads (GThreadPool *pool);
 extern
guint g_thread_pool_get_num_threads (GThreadPool *pool);
 extern
void g_thread_pool_set_max_unused_threads (gint max_threads);
 extern
gint g_thread_pool_get_max_unused_threads (void);
 extern
guint g_thread_pool_get_num_unused_threads (void);
 extern
void g_thread_pool_stop_unused_threads (void);
 extern
void g_thread_pool_set_max_idle_time (guint interval);
 extern
guint g_thread_pool_get_max_idle_time (void);
# 11028 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTimer GTimer;

 extern
GTimer* g_timer_new (void);
 extern
void g_timer_destroy (GTimer *timer);
 extern
void g_timer_start (GTimer *timer);
 extern
void g_timer_stop (GTimer *timer);
 extern
void g_timer_reset (GTimer *timer);
 extern
void g_timer_continue (GTimer *timer);
 extern
gdouble g_timer_elapsed (GTimer *timer,
      gulong *microseconds);
 extern
gboolean g_timer_is_active (GTimer *timer);
 extern
void g_usleep (gulong microseconds);
#pragma clang diagnostic push
# 11049 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_time_val_add (GTimeVal *time_,
                                  glong microseconds);
__attribute__((__deprecated__("Use '" "g_date_time_new_from_iso8601" "' instead"))) extern
gboolean g_time_val_from_iso8601 (const gchar *iso_date,
      GTimeVal *time_);
__attribute__((__deprecated__("Use '" "g_date_time_format" "' instead"))) extern
gchar* g_time_val_to_iso8601 (GTimeVal *time_) __attribute__ ((__malloc__));
#pragma clang diagnostic pop








#pragma clang diagnostic push
# 11067 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
typedef struct _GTrashStack GTrashStack __attribute__((__deprecated__));
struct _GTrashStack
{
  GTrashStack *next;
} __attribute__((__deprecated__));
__attribute__((__deprecated__)) extern
void g_trash_stack_push (GTrashStack **stack_p,
                                gpointer data_p);
__attribute__((__deprecated__)) extern
gpointer g_trash_stack_pop (GTrashStack **stack_p);
__attribute__((__deprecated__)) extern
gpointer g_trash_stack_peek (GTrashStack **stack_p);
__attribute__((__deprecated__)) extern
guint g_trash_stack_height (GTrashStack **stack_p);
#pragma clang diagnostic pop
# 11092 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTree GTree;
typedef struct _GTreeNode GTreeNode;
typedef gboolean (*GTraverseFunc) (gpointer key,
                                   gpointer value,
                                   gpointer user_data);
typedef gboolean (*GTraverseNodeFunc) (GTreeNode *node,
                                       gpointer user_data);
 extern
GTree* g_tree_new (GCompareFunc key_compare_func);
 extern
GTree* g_tree_new_with_data (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data);
 extern
GTree* g_tree_new_full (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data,
                                 GDestroyNotify key_destroy_func,
                                 GDestroyNotify value_destroy_func);
 extern
GTreeNode *g_tree_node_first (GTree *tree);
 extern
GTreeNode *g_tree_node_last (GTree *tree);
 extern
GTreeNode *g_tree_node_previous (GTreeNode *node);
 extern
GTreeNode *g_tree_node_next (GTreeNode *node);
 extern
GTree* g_tree_ref (GTree *tree);
 extern
void g_tree_unref (GTree *tree);
 extern
void g_tree_destroy (GTree *tree);
 extern
GTreeNode *g_tree_insert_node (GTree *tree,
                               gpointer key,
                               gpointer value);
 extern
void g_tree_insert (GTree *tree,
                                 gpointer key,
                                 gpointer value);
 extern
GTreeNode *g_tree_replace_node (GTree *tree,
                                gpointer key,
                                gpointer value);
 extern
void g_tree_replace (GTree *tree,
                                 gpointer key,
                                 gpointer value);
 extern
gboolean g_tree_remove (GTree *tree,
                                 gconstpointer key);
 extern
void g_tree_remove_all (GTree *tree);
 extern
gboolean g_tree_steal (GTree *tree,
                                 gconstpointer key);
 extern
gpointer g_tree_node_key (GTreeNode *node);
 extern
gpointer g_tree_node_value (GTreeNode *node);
 extern
GTreeNode *g_tree_lookup_node (GTree *tree,
                               gconstpointer key);
 extern
gpointer g_tree_lookup (GTree *tree,
                                 gconstpointer key);
 extern
gboolean g_tree_lookup_extended (GTree *tree,
                                 gconstpointer lookup_key,
                                 gpointer *orig_key,
                                 gpointer *value);
 extern
void g_tree_foreach (GTree *tree,
                                 GTraverseFunc func,
                                 gpointer user_data);
 extern
void g_tree_foreach_node (GTree *tree,
                          GTraverseNodeFunc func,
                          gpointer user_data);
__attribute__((__deprecated__)) extern
void g_tree_traverse (GTree *tree,
                                 GTraverseFunc traverse_func,
                                 GTraverseType traverse_type,
                                 gpointer user_data);
 extern
GTreeNode *g_tree_search_node (GTree *tree,
                               GCompareFunc search_func,
                               gconstpointer user_data);
 extern
gpointer g_tree_search (GTree *tree,
                                 GCompareFunc search_func,
                                 gconstpointer user_data);
 extern
GTreeNode *g_tree_lower_bound (GTree *tree,
                               gconstpointer key);
 extern
GTreeNode *g_tree_upper_bound (GTree *tree,
                               gconstpointer key);
 extern
gint g_tree_height (GTree *tree);
 extern
gint g_tree_nnodes (GTree *tree);
# 11206 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11206 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
typedef struct _GUri GUri;
 extern
GUri * g_uri_ref (GUri *uri);
 extern
void g_uri_unref (GUri *uri);

typedef enum {
  G_URI_FLAGS_NONE = 0,
  G_URI_FLAGS_PARSE_RELAXED = 1 << 0,
  G_URI_FLAGS_HAS_PASSWORD = 1 << 1,
  G_URI_FLAGS_HAS_AUTH_PARAMS = 1 << 2,
  G_URI_FLAGS_ENCODED = 1 << 3,
  G_URI_FLAGS_NON_DNS = 1 << 4,
  G_URI_FLAGS_ENCODED_QUERY = 1 << 5,
  G_URI_FLAGS_ENCODED_PATH = 1 << 6,
  G_URI_FLAGS_ENCODED_FRAGMENT = 1 << 7,
  G_URI_FLAGS_SCHEME_NORMALIZE = 1 << 8,
} GUriFlags;
 extern
gboolean g_uri_split (const gchar *uri_ref,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **userinfo,
                                     gchar **host,
                                     gint *port,
                                     gchar **path,
                                     gchar **query,
                                     gchar **fragment,
                                     GError **error);
 extern
gboolean g_uri_split_with_user (const gchar *uri_ref,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **user,
                                     gchar **password,
                                     gchar **auth_params,
                                     gchar **host,
                                     gint *port,
                                     gchar **path,
                                     gchar **query,
                                     gchar **fragment,
                                     GError **error);
 extern
gboolean g_uri_split_network (const gchar *uri_string,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **host,
                                     gint *port,
                                     GError **error);
 extern
gboolean g_uri_is_valid (const gchar *uri_string,
                                     GUriFlags flags,
                                     GError **error);
 extern
gchar * g_uri_join (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *userinfo,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
 extern
gchar * g_uri_join_with_user (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *user,
                                     const gchar *password,
                                     const gchar *auth_params,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
 extern
GUri * g_uri_parse (const gchar *uri_string,
                                     GUriFlags flags,
                                     GError **error);
 extern
GUri * g_uri_parse_relative (GUri *base_uri,
                                     const gchar *uri_ref,
                                     GUriFlags flags,
                                     GError **error);
 extern
gchar * g_uri_resolve_relative (const gchar *base_uri_string,
                                     const gchar *uri_ref,
                                     GUriFlags flags,
                                     GError **error);
 extern
GUri * g_uri_build (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *userinfo,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
 extern
GUri * g_uri_build_with_user (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *user,
                                     const gchar *password,
                                     const gchar *auth_params,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);

typedef enum {
  G_URI_HIDE_NONE = 0,
  G_URI_HIDE_USERINFO = 1 << 0,
  G_URI_HIDE_PASSWORD = 1 << 1,
  G_URI_HIDE_AUTH_PARAMS = 1 << 2,
  G_URI_HIDE_QUERY = 1 << 3,
  G_URI_HIDE_FRAGMENT = 1 << 4,
} GUriHideFlags;
 extern
char * g_uri_to_string (GUri *uri);
 extern
char * g_uri_to_string_partial (GUri *uri,
                                      GUriHideFlags flags);
 extern
const gchar *g_uri_get_scheme (GUri *uri);
 extern
const gchar *g_uri_get_userinfo (GUri *uri);
 extern
const gchar *g_uri_get_user (GUri *uri);
 extern
const gchar *g_uri_get_password (GUri *uri);
 extern
const gchar *g_uri_get_auth_params (GUri *uri);
 extern
const gchar *g_uri_get_host (GUri *uri);
 extern
gint g_uri_get_port (GUri *uri);
 extern
const gchar *g_uri_get_path (GUri *uri);
 extern
const gchar *g_uri_get_query (GUri *uri);
 extern
const gchar *g_uri_get_fragment (GUri *uri);
 extern
GUriFlags g_uri_get_flags (GUri *uri);

typedef enum {
  G_URI_PARAMS_NONE = 0,
  G_URI_PARAMS_CASE_INSENSITIVE = 1 << 0,
  G_URI_PARAMS_WWW_FORM = 1 << 1,
  G_URI_PARAMS_PARSE_RELAXED = 1 << 2,
} GUriParamsFlags;
 extern
GHashTable *g_uri_parse_params (const gchar *params,
                                      gssize length,
                                      const gchar *separators,
                                      GUriParamsFlags flags,
                                      GError **error);
typedef struct _GUriParamsIter GUriParamsIter;
struct _GUriParamsIter
{

  gint dummy0;
  gpointer dummy1;
  gpointer dummy2;
  guint8 dummy3[256];
};
 extern
void g_uri_params_iter_init (GUriParamsIter *iter,
                                      const gchar *params,
                                      gssize length,
                                      const gchar *separators,
                                      GUriParamsFlags flags);
 extern
gboolean g_uri_params_iter_next (GUriParamsIter *iter,
                                      gchar **attribute,
                                      gchar **value,
                                      GError **error);

 extern
GQuark g_uri_error_quark (void);
typedef enum {
  G_URI_ERROR_FAILED,
  G_URI_ERROR_BAD_SCHEME,
  G_URI_ERROR_BAD_USER,
  G_URI_ERROR_BAD_PASSWORD,
  G_URI_ERROR_BAD_AUTH_PARAMS,
  G_URI_ERROR_BAD_HOST,
  G_URI_ERROR_BAD_PORT,
  G_URI_ERROR_BAD_PATH,
  G_URI_ERROR_BAD_QUERY,
  G_URI_ERROR_BAD_FRAGMENT,
} GUriError;





 extern
char * g_uri_unescape_string (const char *escaped_string,
                                    const char *illegal_characters);
 extern
char * g_uri_unescape_segment (const char *escaped_string,
                                    const char *escaped_string_end,
                                    const char *illegal_characters);
 extern
char * g_uri_parse_scheme (const char *uri);
 extern
const char *g_uri_peek_scheme (const char *uri);
 extern
char * g_uri_escape_string (const char *unescaped,
                                    const char *reserved_chars_allowed,
                                    gboolean allow_utf8);
 extern
GBytes * g_uri_unescape_bytes (const char *escaped_string,
                                    gssize length,
                                    const char *illegal_characters,
                                    GError **error);
 extern
char * g_uri_escape_bytes (const guint8 *unescaped,
                                    gsize length,
                                    const char *reserved_chars_allowed);
#pragma clang diagnostic pop








 extern
gboolean g_uuid_string_is_valid (const gchar *str);
 extern
gchar * g_uuid_string_random (void);
# 11448 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern const guint glib_major_version;
 extern const guint glib_minor_version;
 extern const guint glib_micro_version;
 extern const guint glib_interface_age;
 extern const guint glib_binary_age;
 extern
const gchar * glib_check_version (guint required_major,
                                  guint required_minor,
                                  guint required_micro);
# 11473 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GAllocator GAllocator;
typedef struct _GMemChunk GMemChunk;
# 11484 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
__attribute__((__deprecated__)) extern
GMemChunk * g_mem_chunk_new (const gchar *name,
                                         gint atom_size,
                                         gsize area_size,
                                         gint type);
__attribute__((__deprecated__)) extern
void g_mem_chunk_destroy (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
gpointer g_mem_chunk_alloc (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
gpointer g_mem_chunk_alloc0 (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_free (GMemChunk *mem_chunk,
                                         gpointer mem);
__attribute__((__deprecated__)) extern
void g_mem_chunk_clean (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_reset (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_print (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_info (void);
__attribute__((__deprecated__)) extern
void g_blow_chunks (void);
__attribute__((__deprecated__)) extern
GAllocator * g_allocator_new (const gchar *name,
                                         guint n_preallocs);
__attribute__((__deprecated__)) extern
void g_allocator_free (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_list_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_list_pop_allocator (void);
__attribute__((__deprecated__)) extern
void g_slist_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_slist_pop_allocator (void);
__attribute__((__deprecated__)) extern
void g_node_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_node_pop_allocator (void);
# 11533 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GCache GCache __attribute__((__deprecated__("Use '" "GHashTable" "' instead")));
typedef gpointer (*GCacheNewFunc) (gpointer key) __attribute__((__deprecated__));
typedef gpointer (*GCacheDupFunc) (gpointer value) __attribute__((__deprecated__));
typedef void (*GCacheDestroyFunc) (gpointer value) __attribute__((__deprecated__));
#pragma clang diagnostic push
# 11537 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
GCache* g_cache_new (GCacheNewFunc value_new_func,
                                GCacheDestroyFunc value_destroy_func,
                                GCacheDupFunc key_dup_func,
                                GCacheDestroyFunc key_destroy_func,
                                GHashFunc hash_key_func,
                                GHashFunc hash_value_func,
                                GEqualFunc key_equal_func);
__attribute__((__deprecated__)) extern
void g_cache_destroy (GCache *cache);
__attribute__((__deprecated__)) extern
gpointer g_cache_insert (GCache *cache,
                                gpointer key);
__attribute__((__deprecated__)) extern
void g_cache_remove (GCache *cache,
                                gconstpointer value);
__attribute__((__deprecated__)) extern
void g_cache_key_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);
__attribute__((__deprecated__)) extern
void g_cache_value_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);
#pragma clang diagnostic pop








typedef struct _GCompletion GCompletion;
typedef gchar* (*GCompletionFunc) (gpointer);
typedef gint (*GCompletionStrncmpFunc) (const gchar *s1,
                                        const gchar *s2,
                                        gsize n);
struct _GCompletion
{
  GList* items;
  GCompletionFunc func;

  gchar* prefix;
  GList* cache;
  GCompletionStrncmpFunc strncmp_func;
};
__attribute__((__deprecated__)) extern
GCompletion* g_completion_new (GCompletionFunc func);
__attribute__((__deprecated__)) extern
void g_completion_add_items (GCompletion* cmp,
                                         GList* items);
__attribute__((__deprecated__)) extern
void g_completion_remove_items (GCompletion* cmp,
                                         GList* items);
__attribute__((__deprecated__)) extern
void g_completion_clear_items (GCompletion* cmp);
__attribute__((__deprecated__)) extern
GList* g_completion_complete (GCompletion* cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
__attribute__((__deprecated__)) extern
GList* g_completion_complete_utf8 (GCompletion *cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
__attribute__((__deprecated__)) extern
void g_completion_set_compare (GCompletion *cmp,
                                         GCompletionStrncmpFunc strncmp_func);
__attribute__((__deprecated__)) extern
void g_completion_free (GCompletion* cmp);
# 11632 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GRelation GRelation;
typedef struct _GTuples GTuples;
struct _GTuples
{
  guint len;
};
__attribute__((__deprecated__)) extern
GRelation* g_relation_new (gint fields);
__attribute__((__deprecated__)) extern
void g_relation_destroy (GRelation *relation);
__attribute__((__deprecated__)) extern
void g_relation_index (GRelation *relation,
                               gint field,
                               GHashFunc hash_func,
                               GEqualFunc key_equal_func);
__attribute__((__deprecated__)) extern
void g_relation_insert (GRelation *relation,
                               ...);
__attribute__((__deprecated__)) extern
gint g_relation_delete (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
GTuples* g_relation_select (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
gint g_relation_count (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
gboolean g_relation_exists (GRelation *relation,
                               ...);
__attribute__((__deprecated__)) extern
void g_relation_print (GRelation *relation);
__attribute__((__deprecated__)) extern
void g_tuples_destroy (GTuples *tuples);
__attribute__((__deprecated__)) extern
gpointer g_tuples_index (GTuples *tuples,
                               gint index_,
                               gint field);








#pragma clang diagnostic push
# 11681 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
typedef enum
{
  G_THREAD_PRIORITY_LOW,
  G_THREAD_PRIORITY_NORMAL,
  G_THREAD_PRIORITY_HIGH,
  G_THREAD_PRIORITY_URGENT
} GThreadPriority __attribute__((__deprecated__));
struct _GThread
{

  GThreadFunc func;
  gpointer data;
  gboolean joinable;
  GThreadPriority priority;
};
typedef struct _GThreadFunctions GThreadFunctions __attribute__((__deprecated__));
struct _GThreadFunctions
{
  GMutex* (*mutex_new) (void);
  void (*mutex_lock) (GMutex *mutex);
  gboolean (*mutex_trylock) (GMutex *mutex);
  void (*mutex_unlock) (GMutex *mutex);
  void (*mutex_free) (GMutex *mutex);
  GCond* (*cond_new) (void);
  void (*cond_signal) (GCond *cond);
  void (*cond_broadcast) (GCond *cond);
  void (*cond_wait) (GCond *cond,
                                   GMutex *mutex);
  gboolean (*cond_timed_wait) (GCond *cond,
                                   GMutex *mutex,
                                   GTimeVal *end_time);
  void (*cond_free) (GCond *cond);
  GPrivate* (*private_new) (GDestroyNotify destructor);
  gpointer (*private_get) (GPrivate *private_key);
  void (*private_set) (GPrivate *private_key,
                                   gpointer data);
  void (*thread_create) (GThreadFunc func,
                                   gpointer data,
                                   gulong stack_size,
                                   gboolean joinable,
                                   gboolean bound,
                                   GThreadPriority priority,
                                   gpointer thread,
                                   GError **error);
  void (*thread_yield) (void);
  void (*thread_join) (gpointer thread);
  void (*thread_exit) (void);
  void (*thread_set_priority)(gpointer thread,
                                   GThreadPriority priority);
  void (*thread_self) (gpointer thread);
  gboolean (*thread_equal) (gpointer thread1,
                                   gpointer thread2);
} __attribute__((__deprecated__));
 extern GThreadFunctions g_thread_functions_for_glib_use;
 extern gboolean g_thread_use_default_impl;
 extern guint64 (*g_thread_gettime) (void);
__attribute__((__deprecated__("Use '" "g_thread_new" "' instead"))) extern
GThread *g_thread_create (GThreadFunc func,
                                gpointer data,
                                gboolean joinable,
                                GError **error);
__attribute__((__deprecated__("Use '" "g_thread_new" "' instead"))) extern
GThread *g_thread_create_full (GThreadFunc func,
                                gpointer data,
                                gulong stack_size,
                                gboolean joinable,
                                gboolean bound,
                                GThreadPriority priority,
                                GError **error);
__attribute__((__deprecated__)) extern
void g_thread_set_priority (GThread *thread,
                                GThreadPriority priority);
__attribute__((__deprecated__)) extern
void g_thread_foreach (GFunc thread_func,
                                gpointer user_data);

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 1 3 4
# 84 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_char.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_char.h" 3 4
typedef unsigned char u_char;
# 85 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_short.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_short.h" 3 4
typedef unsigned short u_short;
# 86 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int.h" 3 4
typedef unsigned int u_int;
# 87 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

typedef unsigned long u_long;


typedef unsigned short ushort;

typedef unsigned int uint;




typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_caddr_t.h" 1 3 4
# 30 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_caddr_t.h" 3 4
typedef char * caddr_t;
# 103 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

typedef int32_t daddr_t;



typedef u_int32_t fixpt_t;

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_blkcnt_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_blkcnt_t.h" 3 4
typedef __darwin_blkcnt_t blkcnt_t;
# 111 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_blksize_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_blksize_t.h" 3 4
typedef __darwin_blksize_t blksize_t;
# 112 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_gid_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_gid_t.h" 3 4
typedef __darwin_gid_t gid_t;
# 113 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_addr_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_addr_t.h" 3 4
typedef __uint32_t in_addr_t;
# 114 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_port_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_port_t.h" 3 4
typedef __uint16_t in_port_t;
# 115 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4



# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino64_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino64_t.h" 3 4
typedef __darwin_ino64_t ino64_t;
# 119 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_key_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_key_t.h" 3 4
typedef __int32_t key_t;
# 122 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_nlink_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_nlink_t.h" 3 4
typedef __uint16_t nlink_t;
# 124 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h" 3 4
typedef __darwin_off_t off_t;
# 127 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4

typedef int32_t segsz_t;
typedef int32_t swblk_t;
# 169 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 170 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4



# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_useconds_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_useconds_t.h" 3 4
typedef __darwin_useconds_t useconds_t;
# 174 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_suseconds_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_suseconds_t.h" 3 4
typedef __darwin_suseconds_t suseconds_t;
# 175 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 178 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 187 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h" 1 3 4
# 50 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h" 3 4
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;

int __darwin_check_fd_set_overflow(int, const void *, int) __attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=14.0))) __attribute__((availability(tvos,introduced=14.0))) __attribute__((availability(watchos,introduced=7.0)));


inline __attribute__ ((__always_inline__)) int
__darwin_check_fd_set(int _a, const void *_b)
{

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunguarded-availability-new"

 if ((uintptr_t)&__darwin_check_fd_set_overflow != (uintptr_t) 0) {



  return __darwin_check_fd_set_overflow(_a, _b, 0);

 } else {
  return 1;
 }

#pragma clang diagnostic pop

}


inline __attribute__ ((__always_inline__)) int
__darwin_fd_isset(int _fd, const struct fd_set *_p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  return _p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8))));
 }

 return 0;
}

inline __attribute__ ((__always_inline__)) void
__darwin_fd_set(int _fd, struct fd_set *const _p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  (_p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] |= ((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8)))));
 }
}

inline __attribute__ ((__always_inline__)) void
__darwin_fd_clr(int _fd, struct fd_set *const _p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  (_p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] &= ~((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8)))));
 }
}
# 188 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4




typedef __int32_t fd_mask;







# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_setsize.h" 1 3 4
# 201 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_set.h" 1 3 4
# 202 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_clr.h" 1 3 4
# 203 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_zero.h" 1 3 4
# 204 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_isset.h" 1 3 4
# 205 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_copy.h" 1 3 4
# 208 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 219 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_cond_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_cond_t.h" 3 4
typedef __darwin_pthread_cond_t pthread_cond_t;
# 220 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h" 3 4
typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 221 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h" 3 4
typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 222 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 3 4
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 223 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_once_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_once_t.h" 3 4
typedef __darwin_pthread_once_t pthread_once_t;
# 224 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h" 3 4
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 225 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 3 4
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 226 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4




# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_key_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_key_t.h" 3 4
typedef __darwin_pthread_key_t pthread_key_t;
# 231 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4




# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsblkcnt_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsblkcnt_t.h" 3 4
typedef __darwin_fsblkcnt_t fsblkcnt_t;
# 236 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsfilcnt_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsfilcnt_t.h" 3 4
typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 237 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/types.h" 2 3 4
# 11759 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 1 3 4
# 56 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/sched.h" 1 3 4
# 28 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/sched.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/pthread_impl.h" 1 3 4
# 33 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/pthread_impl.h" 3 4
#pragma clang assume_nonnull begin
# 33 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/pthread_impl.h" 3 4
#pragma clang assume_nonnull end
# 29 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/sched.h" 2 3 4






struct sched_param { int sched_priority; char __opaque[4]; };




extern int sched_yield(void);
extern int sched_get_priority_min(int);
extern int sched_get_priority_max(int);
# 57 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 2 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h" 1 3 4
# 58 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 2 3 4
# 70 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 1 3 4
# 34 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/qos.h" 1 3 4
# 130 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/qos.h" 3 4
enum { QOS_CLASS_USER_INTERACTIVE __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x21, QOS_CLASS_USER_INITIATED __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x19, QOS_CLASS_DEFAULT __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x15, QOS_CLASS_UTILITY __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x11, QOS_CLASS_BACKGROUND __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x09, QOS_CLASS_UNSPECIFIED __attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0))) = 0x00, }; typedef unsigned int qos_class_t;
# 170 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
qos_class_t
qos_class_self(void);
# 192 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
qos_class_t
qos_class_main(void);
# 35 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 2 3 4




#pragma clang assume_nonnull begin
# 81 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_attr_set_qos_class_np(pthread_attr_t *__attr,
  qos_class_t __qos_class, int __relative_priority);
# 112 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_attr_get_qos_class_np(pthread_attr_t * restrict __attr,
  qos_class_t * _Nullable restrict __qos_class,
  int * _Nullable restrict __relative_priority);
# 153 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_set_qos_class_self_np(qos_class_t __qos_class,
  int __relative_priority);
# 184 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_get_qos_class_np(pthread_t __pthread,
  qos_class_t * _Nullable restrict __qos_class,
  int * _Nullable restrict __relative_priority);
# 211 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
typedef struct pthread_override_s* pthread_override_t;
# 263 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
pthread_override_t
pthread_override_qos_class_start_np(pthread_t __pthread,
  qos_class_t __qos_class, int __relative_priority);
# 291 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macos,introduced=10.10))) __attribute__((availability(ios,introduced=8.0)))
int
pthread_override_qos_class_end_np(pthread_override_t __override);
# 293 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread/qos.h" 3 4
#pragma clang assume_nonnull end
# 71 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 2 3 4



# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_mach_port_t.h" 1 3 4
# 50 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_mach_port_t.h" 3 4
typedef __darwin_mach_port_t mach_port_t;
# 75 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 2 3 4
# 103 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
#pragma clang assume_nonnull begin
# 225 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_atfork(void (* _Nullable)(void), void (* _Nullable)(void),
  void (* _Nullable)(void));

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_destroy(pthread_attr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getdetachstate(const pthread_attr_t *, int *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getguardsize(const pthread_attr_t * restrict, size_t * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getinheritsched(const pthread_attr_t * restrict, int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getschedparam(const pthread_attr_t * restrict,
  struct sched_param * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getschedpolicy(const pthread_attr_t * restrict, int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getscope(const pthread_attr_t * restrict, int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getstack(const pthread_attr_t * restrict,
  void * _Nullable * _Nonnull restrict, size_t * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getstackaddr(const pthread_attr_t * restrict,
  void * _Nullable * _Nonnull restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_getstacksize(const pthread_attr_t * restrict, size_t * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_init(pthread_attr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setdetachstate(pthread_attr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setguardsize(pthread_attr_t *, size_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setinheritsched(pthread_attr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setschedparam(pthread_attr_t * restrict,
  const struct sched_param * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setschedpolicy(pthread_attr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setscope(pthread_attr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setstack(pthread_attr_t *, void *, size_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setstackaddr(pthread_attr_t *, void *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_attr_setstacksize(pthread_attr_t *, size_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cancel(pthread_t) __asm("_" "pthread_cancel" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_broadcast(pthread_cond_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_destroy(pthread_cond_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_init(
  pthread_cond_t * restrict,
  const pthread_condattr_t * _Nullable restrict)
  __asm("_" "pthread_cond_init" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_signal(pthread_cond_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use an asynchronous wait instead of a synchronous wait" "\")")))
int pthread_cond_timedwait(
  pthread_cond_t * restrict, pthread_mutex_t * restrict,
  const struct timespec * _Nullable restrict)
  __asm("_" "pthread_cond_timedwait" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use an asynchronous wait instead of a synchronous wait" "\")")))
int pthread_cond_wait(pthread_cond_t * restrict,
  pthread_mutex_t * restrict) __asm("_" "pthread_cond_wait" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_condattr_destroy(pthread_condattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_condattr_init(pthread_condattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_condattr_getpshared(const pthread_condattr_t * restrict,
  int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_condattr_setpshared(pthread_condattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))

int pthread_create(pthread_t _Nullable * _Nonnull restrict,
  const pthread_attr_t * _Nullable restrict,
  void * _Nullable (* _Nonnull)(void * _Nullable),
  void * _Nullable restrict);






__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_detach(pthread_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_equal(pthread_t _Nullable, pthread_t _Nullable);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Thread lifecycle is owned by Swift Concurrency runtime" "\")")))
void pthread_exit(void * _Nullable) __attribute__((__noreturn__));

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_getconcurrency(void);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_getschedparam(pthread_t , int * _Nullable restrict,
  struct sched_param * _Nullable restrict);

__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task Local Values instead" "\")")))
__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
void* _Nullable pthread_getspecific(pthread_key_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use an asynchronous wait instead of a synchronous wait" "\")")))
int pthread_join(pthread_t , void * _Nullable * _Nullable)
  __asm("_" "pthread_join" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_key_create(pthread_key_t *, void (* _Nullable)(void *));

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_key_delete(pthread_key_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutex_destroy(pthread_mutex_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutex_getprioceiling(const pthread_mutex_t * restrict,
  int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutex_init(pthread_mutex_t * restrict,
  const pthread_mutexattr_t * _Nullable restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use OSAllocatedUnfairLock's withLock or NSLock for async-safe scoped locking" "\")")))
int pthread_mutex_lock(pthread_mutex_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutex_setprioceiling(pthread_mutex_t * restrict, int,
  int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use OSAllocatedUnfairLock's withLockIfAvailable or NSLock for async-safe scoped locking" "\")")))
int pthread_mutex_trylock(pthread_mutex_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use OSAllocatedUnfairLock's withLock or NSLock for async-safe scoped locking" "\")")))
int pthread_mutex_unlock(pthread_mutex_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_destroy(pthread_mutexattr_t *) __asm("_" "pthread_mutexattr_destroy" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_getpshared(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_gettype(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macos,introduced=10.13.4))) __attribute__((availability(ios,introduced=11.3))) __attribute__((availability(watchos,introduced=4.3))) __attribute__((availability(tvos,introduced=11.3)))
int pthread_mutexattr_getpolicy_np(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_init(pthread_mutexattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_mutexattr_settype(pthread_mutexattr_t *, int);

__attribute__((availability(macos,introduced=10.7))) __attribute__((availability(ios,introduced=5.0)))
int pthread_mutexattr_setpolicy_np(pthread_mutexattr_t *, int);

__attribute__((availability(swift,unavailable,message="Use lazily initialized globals instead")))
__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_once(pthread_once_t *, void (* _Nonnull)(void));

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlock_destroy(pthread_rwlock_t * ) __asm("_" "pthread_rwlock_destroy" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlock_init(pthread_rwlock_t * restrict,
  const pthread_rwlockattr_t * _Nullable restrict)
  __asm("_" "pthread_rwlock_init" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_rdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_rdlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_tryrdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_tryrdlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_trywrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_trywrlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_wrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_wrlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use async-safe scoped locking instead" "\")")))
int pthread_rwlock_unlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_unlock" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t * restrict,
  int * restrict);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlockattr_init(pthread_rwlockattr_t *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
pthread_t pthread_self(void);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task cancellation instead" "\")")))
int pthread_setcancelstate(int , int * _Nullable)
  __asm("_" "pthread_setcancelstate" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task cancellation instead" "\")")))
int pthread_setcanceltype(int , int * _Nullable)
  __asm("_" "pthread_setcanceltype" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_setconcurrency(int);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_setschedparam(pthread_t, int, const struct sched_param *);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task Local Values instead" "\")")))
int pthread_setspecific(pthread_key_t , const void * _Nullable);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task cancellation instead" "\")")))
void pthread_testcancel(void) __asm("_" "pthread_testcancel" );




__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_is_threaded_np(void);

__attribute__((availability(macos,introduced=10.6))) __attribute__((availability(ios,introduced=3.2)))
int pthread_threadid_np(pthread_t _Nullable,__uint64_t* _Nullable);


__attribute__((availability(macos,introduced=10.6))) __attribute__((availability(ios,introduced=3.2)))
int pthread_getname_np(pthread_t,char*,size_t);

__attribute__((availability(macos,introduced=10.6))) __attribute__((availability(ios,introduced=3.2)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Thread lifecycle is owned by Swift Concurrency runtime" "\")")))
int pthread_setname_np(const char*);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_main_np(void);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
mach_port_t pthread_mach_thread_np(pthread_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
size_t pthread_get_stacksize_np(pthread_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
void* pthread_get_stackaddr_np(pthread_t);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t _Nullable);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use an asynchronous wait instead of a synchronous wait" "\")")))
int pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *,
  const struct timespec * _Nullable);


__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))

int pthread_create_suspended_np(
  pthread_t _Nullable * _Nonnull, const pthread_attr_t * _Nullable,
  void * _Nullable (* _Nonnull)(void * _Nullable), void * _Nullable);





__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_kill(pthread_t, int);

__attribute__((availability(macos,introduced=10.5))) __attribute__((availability(ios,introduced=2.0)))
_Nullable pthread_t pthread_from_mach_thread_np(mach_port_t);

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
int pthread_sigmask(int, const sigset_t * _Nullable, sigset_t * _Nullable)
  __asm("_" "pthread_sigmask" );

__attribute__((availability(macos,introduced=10.4))) __attribute__((availability(ios,introduced=2.0)))
__attribute__((__swift_attr__("@_unavailableFromAsync(message: \"" "Use Task.yield(), or await a condition instead of spinning" "\")")))
void pthread_yield_np(void);

__attribute__((availability(macos,introduced=11.0)))
__attribute__((availability(ios,unavailable))) __attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(driverkit,unavailable)))
void pthread_jit_write_protect_np(int enabled);

__attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=17.4)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(driverkit,unavailable))) __attribute__((availability(visionos,unavailable)))
int pthread_jit_write_protect_supported_np(void);
# 608 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
typedef int (*pthread_jit_write_callback_t)(void * _Nullable ctx);
# 694 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
__attribute__((availability(macos,introduced=11.4))) __attribute__((availability(ios,introduced=17.4)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(driverkit,unavailable))) __attribute__((availability(visionos,unavailable)))
__attribute__((availability(swift,unavailable,message="This interface cannot be safely used from Swift")))
int pthread_jit_write_with_callback_np(
  pthread_jit_write_callback_t _Nonnull callback, void * _Nullable ctx);
# 725 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
__attribute__((availability(macos,introduced=12.1))) __attribute__((availability(ios,introduced=17.4)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(driverkit,unavailable))) __attribute__((availability(visionos,unavailable)))
void pthread_jit_write_freeze_callbacks_np(void);
# 744 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
__attribute__((availability(macos,introduced=11.0))) __attribute__((availability(ios,introduced=14.2))) __attribute__((availability(tvos,introduced=14.2))) __attribute__((availability(watchos,introduced=7.1)))
int
pthread_cpu_number_np(size_t *cpu_number_out);
# 746 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/pthread.h" 3 4
#pragma clang assume_nonnull end
# 11760 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2







typedef struct
{
  GMutex *mutex;


  pthread_mutex_t unused;

} GStaticMutex __attribute__((__deprecated__("Use '" "GMutex" "' instead")));






__attribute__((__deprecated__("Use '" "g_mutex_init" "' instead"))) extern
void g_static_mutex_init (GStaticMutex *mutex);
__attribute__((__deprecated__("Use '" "g_mutex_clear" "' instead"))) extern
void g_static_mutex_free (GStaticMutex *mutex);
__attribute__((__deprecated__("Use '" "GMutex" "' instead"))) extern
GMutex *g_static_mutex_get_mutex_impl (GStaticMutex *mutex);
typedef struct _GStaticRecMutex GStaticRecMutex __attribute__((__deprecated__("Use '" "GRecMutex" "' instead")));
struct _GStaticRecMutex
{

  GStaticMutex mutex;
  guint depth;

  union {



    pthread_t owner;

    gdouble dummy;
  } unused;
} __attribute__((__deprecated__("Use '" "GRecMutex" "' instead")));

__attribute__((__deprecated__("Use '" "g_rec_mutex_init" "' instead"))) extern
void g_static_rec_mutex_init (GStaticRecMutex *mutex);
__attribute__((__deprecated__("Use '" "g_rec_mutex_lock" "' instead"))) extern
void g_static_rec_mutex_lock (GStaticRecMutex *mutex);
__attribute__((__deprecated__("Use '" "g_rec_mutex_try_lock" "' instead"))) extern
gboolean g_static_rec_mutex_trylock (GStaticRecMutex *mutex);
__attribute__((__deprecated__("Use '" "g_rec_mutex_unlock" "' instead"))) extern
void g_static_rec_mutex_unlock (GStaticRecMutex *mutex);
__attribute__((__deprecated__)) extern
void g_static_rec_mutex_lock_full (GStaticRecMutex *mutex,
                                         guint depth);
__attribute__((__deprecated__)) extern
guint g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);
__attribute__((__deprecated__("Use '" "g_rec_mutex_free" "' instead"))) extern
void g_static_rec_mutex_free (GStaticRecMutex *mutex);
typedef struct _GStaticRWLock GStaticRWLock __attribute__((__deprecated__("Use '" "GRWLock" "' instead")));
struct _GStaticRWLock
{

  GStaticMutex mutex;
  GCond *read_cond;
  GCond *write_cond;
  guint read_counter;
  gboolean have_writer;
  guint want_to_read;
  guint want_to_write;
} __attribute__((__deprecated__("Use '" "GRWLock" "' instead")));

__attribute__((__deprecated__("Use '" "g_rw_lock_init" "' instead"))) extern
void g_static_rw_lock_init (GStaticRWLock *lock);
__attribute__((__deprecated__("Use '" "g_rw_lock_reader_lock" "' instead"))) extern
void g_static_rw_lock_reader_lock (GStaticRWLock *lock);
__attribute__((__deprecated__("Use '" "g_rw_lock_reader_trylock" "' instead"))) extern
gboolean g_static_rw_lock_reader_trylock (GStaticRWLock *lock);
__attribute__((__deprecated__("Use '" "g_rw_lock_reader_unlock" "' instead"))) extern
void g_static_rw_lock_reader_unlock (GStaticRWLock *lock);
__attribute__((__deprecated__("Use '" "g_rw_lock_writer_lock" "' instead"))) extern
void g_static_rw_lock_writer_lock (GStaticRWLock *lock);
__attribute__((__deprecated__("Use '" "g_rw_lock_writer_trylock" "' instead"))) extern
gboolean g_static_rw_lock_writer_trylock (GStaticRWLock *lock);
__attribute__((__deprecated__("Use '" "g_rw_lock_writer_unlock" "' instead"))) extern
void g_static_rw_lock_writer_unlock (GStaticRWLock *lock);
__attribute__((__deprecated__("Use '" "g_rw_lock_free" "' instead"))) extern
void g_static_rw_lock_free (GStaticRWLock *lock);
__attribute__((__deprecated__)) extern
GPrivate * g_private_new (GDestroyNotify notify);
typedef struct _GStaticPrivate GStaticPrivate __attribute__((__deprecated__("Use '" "GPrivate" "' instead")));
struct _GStaticPrivate
{

  guint index;
} __attribute__((__deprecated__("Use '" "GPrivate" "' instead")));

__attribute__((__deprecated__)) extern
void g_static_private_init (GStaticPrivate *private_key);
__attribute__((__deprecated__("Use '" "g_private_get" "' instead"))) extern
gpointer g_static_private_get (GStaticPrivate *private_key);
__attribute__((__deprecated__("Use '" "g_private_set" "' instead"))) extern
void g_static_private_set (GStaticPrivate *private_key,
                                          gpointer data,
                                          GDestroyNotify notify);
__attribute__((__deprecated__)) extern
void g_static_private_free (GStaticPrivate *private_key);
__attribute__((__deprecated__)) extern
gboolean g_once_init_enter_impl (volatile gsize *location);
__attribute__((__deprecated__)) extern
void g_thread_init (gpointer vtable);
__attribute__((__deprecated__)) extern
void g_thread_init_with_errorcheck_mutexes (gpointer vtable);
__attribute__((__deprecated__)) extern
gboolean g_thread_get_initialized (void);
 extern gboolean g_threads_got_initialized;

__attribute__((__deprecated__)) extern
GMutex * g_mutex_new (void);
__attribute__((__deprecated__)) extern
void g_mutex_free (GMutex *mutex);
__attribute__((__deprecated__)) extern
GCond * g_cond_new (void);
__attribute__((__deprecated__)) extern
void g_cond_free (GCond *cond);
__attribute__((__deprecated__)) extern
gboolean g_cond_timed_wait (GCond *cond,
                                         GMutex *mutex,
                                         GTimeVal *timeval);
#pragma clang diagnostic pop





static inline void
g_autoptr_cleanup_generic_gfree (void *p)
{
  void **pp = (void**)p;
  g_free (*pp);
}
static inline void
g_autoptr_cleanup_gstring_free (GString *string)
{
  if (string)
    g_string_free (string, (!(0)));
}
#pragma clang diagnostic push
# 11907 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
typedef GAsyncQueue *GAsyncQueue_autoptr; typedef GList *GAsyncQueue_listautoptr; typedef GSList *GAsyncQueue_slistautoptr; typedef GQueue *GAsyncQueue_queueautoptr;
# 11908 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11908 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11908 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncQueue (GAsyncQueue *_ptr) { if (_ptr) (g_async_queue_unref) ((GAsyncQueue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncQueue (GAsyncQueue **_ptr) { glib_autoptr_clear_GAsyncQueue (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncQueue (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_async_queue_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncQueue (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_async_queue_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncQueue (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_async_queue_unref); }
# 11908 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GBookmarkFile *GBookmarkFile_autoptr; typedef GList *GBookmarkFile_listautoptr; typedef GSList *GBookmarkFile_slistautoptr; typedef GQueue *GBookmarkFile_queueautoptr;
# 11909 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11909 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11909 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBookmarkFile (GBookmarkFile *_ptr) { if (_ptr) (g_bookmark_file_free) ((GBookmarkFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBookmarkFile (GBookmarkFile **_ptr) { glib_autoptr_clear_GBookmarkFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBookmarkFile (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_bookmark_file_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBookmarkFile (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_bookmark_file_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBookmarkFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_bookmark_file_free); }
# 11909 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GBytes *GBytes_autoptr; typedef GList *GBytes_listautoptr; typedef GSList *GBytes_slistautoptr; typedef GQueue *GBytes_queueautoptr;
# 11910 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11910 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11910 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBytes (GBytes *_ptr) { if (_ptr) (g_bytes_unref) ((GBytes *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBytes (GBytes **_ptr) { glib_autoptr_clear_GBytes (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBytes (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_bytes_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBytes (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_bytes_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBytes (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_bytes_unref); }
# 11910 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GChecksum *GChecksum_autoptr; typedef GList *GChecksum_listautoptr; typedef GSList *GChecksum_slistautoptr; typedef GQueue *GChecksum_queueautoptr;
# 11911 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11911 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11911 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GChecksum (GChecksum *_ptr) { if (_ptr) (g_checksum_free) ((GChecksum *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GChecksum (GChecksum **_ptr) { glib_autoptr_clear_GChecksum (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GChecksum (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_checksum_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GChecksum (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_checksum_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GChecksum (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_checksum_free); }
# 11911 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDateTime *GDateTime_autoptr; typedef GList *GDateTime_listautoptr; typedef GSList *GDateTime_slistautoptr; typedef GQueue *GDateTime_queueautoptr;
# 11912 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11912 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11912 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDateTime (GDateTime *_ptr) { if (_ptr) (g_date_time_unref) ((GDateTime *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDateTime (GDateTime **_ptr) { glib_autoptr_clear_GDateTime (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDateTime (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_date_time_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDateTime (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_date_time_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDateTime (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_date_time_unref); }
# 11912 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDate *GDate_autoptr; typedef GList *GDate_listautoptr; typedef GSList *GDate_slistautoptr; typedef GQueue *GDate_queueautoptr;
# 11913 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11913 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11913 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDate (GDate *_ptr) { if (_ptr) (g_date_free) ((GDate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDate (GDate **_ptr) { glib_autoptr_clear_GDate (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDate (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_date_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDate (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_date_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDate (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_date_free); }
# 11913 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDir *GDir_autoptr; typedef GList *GDir_listautoptr; typedef GSList *GDir_slistautoptr; typedef GQueue *GDir_queueautoptr;
# 11914 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11914 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11914 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDir (GDir *_ptr) { if (_ptr) (g_dir_close) ((GDir *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDir (GDir **_ptr) { glib_autoptr_clear_GDir (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDir (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_dir_close); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDir (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_dir_close); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDir (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_dir_close); }
# 11914 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GError *GError_autoptr; typedef GList *GError_listautoptr; typedef GSList *GError_slistautoptr; typedef GQueue *GError_queueautoptr;
# 11915 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11915 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11915 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GError (GError *_ptr) { if (_ptr) (g_error_free) ((GError *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GError (GError **_ptr) { glib_autoptr_clear_GError (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GError (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_error_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GError (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_error_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GError (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_error_free); }
# 11915 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GHashTable *GHashTable_autoptr; typedef GList *GHashTable_listautoptr; typedef GSList *GHashTable_slistautoptr; typedef GQueue *GHashTable_queueautoptr;
# 11916 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11916 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11916 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GHashTable (GHashTable *_ptr) { if (_ptr) (g_hash_table_unref) ((GHashTable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GHashTable (GHashTable **_ptr) { glib_autoptr_clear_GHashTable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GHashTable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_hash_table_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GHashTable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_hash_table_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GHashTable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_hash_table_unref); }
# 11916 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GHmac *GHmac_autoptr; typedef GList *GHmac_listautoptr; typedef GSList *GHmac_slistautoptr; typedef GQueue *GHmac_queueautoptr;
# 11917 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11917 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11917 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GHmac (GHmac *_ptr) { if (_ptr) (g_hmac_unref) ((GHmac *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GHmac (GHmac **_ptr) { glib_autoptr_clear_GHmac (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GHmac (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_hmac_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GHmac (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_hmac_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GHmac (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_hmac_unref); }
# 11917 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GIOChannel *GIOChannel_autoptr; typedef GList *GIOChannel_listautoptr; typedef GSList *GIOChannel_slistautoptr; typedef GQueue *GIOChannel_queueautoptr;
# 11918 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11918 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11918 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOChannel (GIOChannel *_ptr) { if (_ptr) (g_io_channel_unref) ((GIOChannel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOChannel (GIOChannel **_ptr) { glib_autoptr_clear_GIOChannel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOChannel (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_io_channel_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOChannel (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_io_channel_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOChannel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_io_channel_unref); }
# 11918 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GKeyFile *GKeyFile_autoptr; typedef GList *GKeyFile_listautoptr; typedef GSList *GKeyFile_slistautoptr; typedef GQueue *GKeyFile_queueautoptr;
# 11919 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11919 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11919 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GKeyFile (GKeyFile *_ptr) { if (_ptr) (g_key_file_unref) ((GKeyFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GKeyFile (GKeyFile **_ptr) { glib_autoptr_clear_GKeyFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GKeyFile (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_key_file_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GKeyFile (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_key_file_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GKeyFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_key_file_unref); }
# 11919 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GList *GList_autoptr; typedef GList *GList_listautoptr; typedef GSList *GList_slistautoptr; typedef GQueue *GList_queueautoptr;
# 11920 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11920 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11920 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GList (GList *_ptr) { if (_ptr) (g_list_free) ((GList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GList (GList **_ptr) { glib_autoptr_clear_GList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GList (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_list_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GList (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_list_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_list_free); }
# 11920 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GArray *GArray_autoptr; typedef GList *GArray_listautoptr; typedef GSList *GArray_slistautoptr; typedef GQueue *GArray_queueautoptr;
# 11921 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11921 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11921 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GArray (GArray *_ptr) { if (_ptr) (g_array_unref) ((GArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GArray (GArray **_ptr) { glib_autoptr_clear_GArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GArray (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_array_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GArray (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_array_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_array_unref); }
# 11921 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GPtrArray *GPtrArray_autoptr; typedef GList *GPtrArray_listautoptr; typedef GSList *GPtrArray_slistautoptr; typedef GQueue *GPtrArray_queueautoptr;
# 11922 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11922 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11922 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPtrArray (GPtrArray *_ptr) { if (_ptr) (g_ptr_array_unref) ((GPtrArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPtrArray (GPtrArray **_ptr) { glib_autoptr_clear_GPtrArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPtrArray (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_ptr_array_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPtrArray (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_ptr_array_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPtrArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_ptr_array_unref); }
# 11922 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GByteArray *GByteArray_autoptr; typedef GList *GByteArray_listautoptr; typedef GSList *GByteArray_slistautoptr; typedef GQueue *GByteArray_queueautoptr;
# 11923 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11923 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11923 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GByteArray (GByteArray *_ptr) { if (_ptr) (g_byte_array_unref) ((GByteArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GByteArray (GByteArray **_ptr) { glib_autoptr_clear_GByteArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GByteArray (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_byte_array_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GByteArray (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_byte_array_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GByteArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_byte_array_unref); }
# 11923 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMainContext *GMainContext_autoptr; typedef GList *GMainContext_listautoptr; typedef GSList *GMainContext_slistautoptr; typedef GQueue *GMainContext_queueautoptr;
# 11924 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11924 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11924 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainContext (GMainContext *_ptr) { if (_ptr) (g_main_context_unref) ((GMainContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainContext (GMainContext **_ptr) { glib_autoptr_clear_GMainContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainContext (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_context_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainContext (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_context_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_main_context_unref); }
# 11924 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMainContextPusher *GMainContextPusher_autoptr; typedef GList *GMainContextPusher_listautoptr; typedef GSList *GMainContextPusher_slistautoptr; typedef GQueue *GMainContextPusher_queueautoptr;
# 11925 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11925 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11925 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainContextPusher (GMainContextPusher *_ptr) { if (_ptr) (g_main_context_pusher_free) ((GMainContextPusher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainContextPusher (GMainContextPusher **_ptr) { glib_autoptr_clear_GMainContextPusher (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainContextPusher (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_context_pusher_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainContextPusher (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_context_pusher_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainContextPusher (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_main_context_pusher_free); }
# 11925 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMainLoop *GMainLoop_autoptr; typedef GList *GMainLoop_listautoptr; typedef GSList *GMainLoop_slistautoptr; typedef GQueue *GMainLoop_queueautoptr;
# 11926 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11926 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11926 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainLoop (GMainLoop *_ptr) { if (_ptr) (g_main_loop_unref) ((GMainLoop *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainLoop (GMainLoop **_ptr) { glib_autoptr_clear_GMainLoop (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainLoop (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_loop_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainLoop (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_loop_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainLoop (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_main_loop_unref); }
# 11926 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSource *GSource_autoptr; typedef GList *GSource_listautoptr; typedef GSList *GSource_slistautoptr; typedef GQueue *GSource_queueautoptr;
# 11927 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11927 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11927 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSource (GSource *_ptr) { if (_ptr) (g_source_unref) ((GSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSource (GSource **_ptr) { glib_autoptr_clear_GSource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSource (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_source_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSource (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_source_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_source_unref); }
# 11927 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMappedFile *GMappedFile_autoptr; typedef GList *GMappedFile_listautoptr; typedef GSList *GMappedFile_slistautoptr; typedef GQueue *GMappedFile_queueautoptr;
# 11928 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11928 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11928 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMappedFile (GMappedFile *_ptr) { if (_ptr) (g_mapped_file_unref) ((GMappedFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMappedFile (GMappedFile **_ptr) { glib_autoptr_clear_GMappedFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMappedFile (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_mapped_file_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMappedFile (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_mapped_file_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMappedFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_mapped_file_unref); }
# 11928 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMarkupParseContext *GMarkupParseContext_autoptr; typedef GList *GMarkupParseContext_listautoptr; typedef GSList *GMarkupParseContext_slistautoptr; typedef GQueue *GMarkupParseContext_queueautoptr;
# 11929 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11929 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11929 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMarkupParseContext (GMarkupParseContext *_ptr) { if (_ptr) (g_markup_parse_context_unref) ((GMarkupParseContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMarkupParseContext (GMarkupParseContext **_ptr) { glib_autoptr_clear_GMarkupParseContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMarkupParseContext (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_markup_parse_context_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMarkupParseContext (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_markup_parse_context_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMarkupParseContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_markup_parse_context_unref); }
# 11929 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GNode *GNode_autoptr; typedef GList *GNode_listautoptr; typedef GSList *GNode_slistautoptr; typedef GQueue *GNode_queueautoptr;
# 11930 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11930 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11930 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNode (GNode *_ptr) { if (_ptr) (g_node_destroy) ((GNode *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNode (GNode **_ptr) { glib_autoptr_clear_GNode (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNode (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_node_destroy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNode (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_node_destroy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNode (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_node_destroy); }
# 11930 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GOptionContext *GOptionContext_autoptr; typedef GList *GOptionContext_listautoptr; typedef GSList *GOptionContext_slistautoptr; typedef GQueue *GOptionContext_queueautoptr;
# 11931 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11931 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11931 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOptionContext (GOptionContext *_ptr) { if (_ptr) (g_option_context_free) ((GOptionContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOptionContext (GOptionContext **_ptr) { glib_autoptr_clear_GOptionContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOptionContext (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_option_context_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOptionContext (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_option_context_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOptionContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_option_context_free); }
# 11931 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GOptionGroup *GOptionGroup_autoptr; typedef GList *GOptionGroup_listautoptr; typedef GSList *GOptionGroup_slistautoptr; typedef GQueue *GOptionGroup_queueautoptr;
# 11932 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11932 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11932 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOptionGroup (GOptionGroup *_ptr) { if (_ptr) (g_option_group_unref) ((GOptionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOptionGroup (GOptionGroup **_ptr) { glib_autoptr_clear_GOptionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOptionGroup (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_option_group_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOptionGroup (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_option_group_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOptionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_option_group_unref); }
# 11932 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GPatternSpec *GPatternSpec_autoptr; typedef GList *GPatternSpec_listautoptr; typedef GSList *GPatternSpec_slistautoptr; typedef GQueue *GPatternSpec_queueautoptr;
# 11933 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11933 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11933 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPatternSpec (GPatternSpec *_ptr) { if (_ptr) (g_pattern_spec_free) ((GPatternSpec *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPatternSpec (GPatternSpec **_ptr) { glib_autoptr_clear_GPatternSpec (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPatternSpec (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_pattern_spec_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPatternSpec (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_pattern_spec_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPatternSpec (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_pattern_spec_free); }
# 11933 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GQueue *GQueue_autoptr; typedef GList *GQueue_listautoptr; typedef GSList *GQueue_slistautoptr; typedef GQueue *GQueue_queueautoptr;
# 11934 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11934 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11934 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GQueue (GQueue *_ptr) { if (_ptr) (g_queue_free) ((GQueue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GQueue (GQueue **_ptr) { glib_autoptr_clear_GQueue (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GQueue (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_queue_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GQueue (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_queue_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GQueue (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_queue_free); }
# 11934 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 11935 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11935 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GQueue (GQueue *_ptr) { (g_queue_clear) (_ptr); }
# 11935 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GRand *GRand_autoptr; typedef GList *GRand_listautoptr; typedef GSList *GRand_slistautoptr; typedef GQueue *GRand_queueautoptr;
# 11936 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11936 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11936 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRand (GRand *_ptr) { if (_ptr) (g_rand_free) ((GRand *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRand (GRand **_ptr) { glib_autoptr_clear_GRand (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRand (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rand_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRand (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rand_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRand (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_rand_free); }
# 11936 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GRegex *GRegex_autoptr; typedef GList *GRegex_listautoptr; typedef GSList *GRegex_slistautoptr; typedef GQueue *GRegex_queueautoptr;
# 11937 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11937 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11937 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRegex (GRegex *_ptr) { if (_ptr) (g_regex_unref) ((GRegex *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRegex (GRegex **_ptr) { glib_autoptr_clear_GRegex (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRegex (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_regex_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRegex (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_regex_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRegex (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_regex_unref); }
# 11937 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMatchInfo *GMatchInfo_autoptr; typedef GList *GMatchInfo_listautoptr; typedef GSList *GMatchInfo_slistautoptr; typedef GQueue *GMatchInfo_queueautoptr;
# 11938 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11938 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11938 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMatchInfo (GMatchInfo *_ptr) { if (_ptr) (g_match_info_unref) ((GMatchInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMatchInfo (GMatchInfo **_ptr) { glib_autoptr_clear_GMatchInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMatchInfo (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_match_info_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMatchInfo (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_match_info_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMatchInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_match_info_unref); }
# 11938 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GScanner *GScanner_autoptr; typedef GList *GScanner_listautoptr; typedef GSList *GScanner_slistautoptr; typedef GQueue *GScanner_queueautoptr;
# 11939 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11939 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11939 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GScanner (GScanner *_ptr) { if (_ptr) (g_scanner_destroy) ((GScanner *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GScanner (GScanner **_ptr) { glib_autoptr_clear_GScanner (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GScanner (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_scanner_destroy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GScanner (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_scanner_destroy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GScanner (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_scanner_destroy); }
# 11939 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSequence *GSequence_autoptr; typedef GList *GSequence_listautoptr; typedef GSList *GSequence_slistautoptr; typedef GQueue *GSequence_queueautoptr;
# 11940 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11940 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11940 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSequence (GSequence *_ptr) { if (_ptr) (g_sequence_free) ((GSequence *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSequence (GSequence **_ptr) { glib_autoptr_clear_GSequence (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSequence (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_sequence_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSequence (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_sequence_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSequence (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_sequence_free); }
# 11940 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSList *GSList_autoptr; typedef GList *GSList_listautoptr; typedef GSList *GSList_slistautoptr; typedef GQueue *GSList_queueautoptr;
# 11941 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11941 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11941 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSList (GSList *_ptr) { if (_ptr) (g_slist_free) ((GSList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSList (GSList **_ptr) { glib_autoptr_clear_GSList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSList (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_slist_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSList (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_slist_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_slist_free); }
# 11941 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GString *GString_autoptr; typedef GList *GString_listautoptr; typedef GSList *GString_slistautoptr; typedef GQueue *GString_queueautoptr;
# 11942 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11942 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11942 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GString (GString *_ptr) { if (_ptr) (g_autoptr_cleanup_gstring_free) ((GString *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GString (GString **_ptr) { glib_autoptr_clear_GString (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GString (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_autoptr_cleanup_gstring_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GString (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_autoptr_cleanup_gstring_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GString (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_autoptr_cleanup_gstring_free); }
# 11942 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GStringChunk *GStringChunk_autoptr; typedef GList *GStringChunk_listautoptr; typedef GSList *GStringChunk_slistautoptr; typedef GQueue *GStringChunk_queueautoptr;
# 11943 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11943 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11943 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GStringChunk (GStringChunk *_ptr) { if (_ptr) (g_string_chunk_free) ((GStringChunk *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GStringChunk (GStringChunk **_ptr) { glib_autoptr_clear_GStringChunk (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GStringChunk (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_string_chunk_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GStringChunk (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_string_chunk_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GStringChunk (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_string_chunk_free); }
# 11943 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GStrvBuilder *GStrvBuilder_autoptr; typedef GList *GStrvBuilder_listautoptr; typedef GSList *GStrvBuilder_slistautoptr; typedef GQueue *GStrvBuilder_queueautoptr;
# 11944 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11944 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11944 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GStrvBuilder (GStrvBuilder *_ptr) { if (_ptr) (g_strv_builder_unref) ((GStrvBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GStrvBuilder (GStrvBuilder **_ptr) { glib_autoptr_clear_GStrvBuilder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GStrvBuilder (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_strv_builder_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GStrvBuilder (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_strv_builder_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GStrvBuilder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_strv_builder_unref); }
# 11944 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GThread *GThread_autoptr; typedef GList *GThread_listautoptr; typedef GSList *GThread_slistautoptr; typedef GQueue *GThread_queueautoptr;
# 11945 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11945 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11945 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThread (GThread *_ptr) { if (_ptr) (g_thread_unref) ((GThread *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThread (GThread **_ptr) { glib_autoptr_clear_GThread (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThread (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_thread_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThread (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_thread_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThread (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_thread_unref); }
# 11945 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 11946 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11946 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GMutex (GMutex *_ptr) { (g_mutex_clear) (_ptr); }
# 11946 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMutexLocker *GMutexLocker_autoptr; typedef GList *GMutexLocker_listautoptr; typedef GSList *GMutexLocker_slistautoptr; typedef GQueue *GMutexLocker_queueautoptr;
# 11947 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11947 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11947 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMutexLocker (GMutexLocker *_ptr) { if (_ptr) (g_mutex_locker_free) ((GMutexLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMutexLocker (GMutexLocker **_ptr) { glib_autoptr_clear_GMutexLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMutexLocker (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_mutex_locker_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMutexLocker (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_mutex_locker_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMutexLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_mutex_locker_free); }
# 11947 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GRecMutexLocker *GRecMutexLocker_autoptr; typedef GList *GRecMutexLocker_listautoptr; typedef GSList *GRecMutexLocker_slistautoptr; typedef GQueue *GRecMutexLocker_queueautoptr;
# 11948 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11948 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11948 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRecMutexLocker (GRecMutexLocker *_ptr) { if (_ptr) (g_rec_mutex_locker_free) ((GRecMutexLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRecMutexLocker (GRecMutexLocker **_ptr) { glib_autoptr_clear_GRecMutexLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRecMutexLocker (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rec_mutex_locker_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRecMutexLocker (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rec_mutex_locker_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRecMutexLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_rec_mutex_locker_free); }
# 11948 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GRWLockWriterLocker *GRWLockWriterLocker_autoptr; typedef GList *GRWLockWriterLocker_listautoptr; typedef GSList *GRWLockWriterLocker_slistautoptr; typedef GQueue *GRWLockWriterLocker_queueautoptr;
# 11949 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11949 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11949 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRWLockWriterLocker (GRWLockWriterLocker *_ptr) { if (_ptr) (g_rw_lock_writer_locker_free) ((GRWLockWriterLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRWLockWriterLocker (GRWLockWriterLocker **_ptr) { glib_autoptr_clear_GRWLockWriterLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRWLockWriterLocker (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rw_lock_writer_locker_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRWLockWriterLocker (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rw_lock_writer_locker_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRWLockWriterLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_rw_lock_writer_locker_free); }
# 11949 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GRWLockReaderLocker *GRWLockReaderLocker_autoptr; typedef GList *GRWLockReaderLocker_listautoptr; typedef GSList *GRWLockReaderLocker_slistautoptr; typedef GQueue *GRWLockReaderLocker_queueautoptr;
# 11950 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11950 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11950 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRWLockReaderLocker (GRWLockReaderLocker *_ptr) { if (_ptr) (g_rw_lock_reader_locker_free) ((GRWLockReaderLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRWLockReaderLocker (GRWLockReaderLocker **_ptr) { glib_autoptr_clear_GRWLockReaderLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRWLockReaderLocker (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rw_lock_reader_locker_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRWLockReaderLocker (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rw_lock_reader_locker_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRWLockReaderLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_rw_lock_reader_locker_free); }
# 11950 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 11951 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11951 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GCond (GCond *_ptr) { (g_cond_clear) (_ptr); }
# 11951 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTimer *GTimer_autoptr; typedef GList *GTimer_listautoptr; typedef GSList *GTimer_slistautoptr; typedef GQueue *GTimer_queueautoptr;
# 11952 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11952 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11952 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTimer (GTimer *_ptr) { if (_ptr) (g_timer_destroy) ((GTimer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTimer (GTimer **_ptr) { glib_autoptr_clear_GTimer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTimer (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_timer_destroy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTimer (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_timer_destroy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTimer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_timer_destroy); }
# 11952 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTimeZone *GTimeZone_autoptr; typedef GList *GTimeZone_listautoptr; typedef GSList *GTimeZone_slistautoptr; typedef GQueue *GTimeZone_queueautoptr;
# 11953 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11953 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11953 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTimeZone (GTimeZone *_ptr) { if (_ptr) (g_time_zone_unref) ((GTimeZone *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTimeZone (GTimeZone **_ptr) { glib_autoptr_clear_GTimeZone (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTimeZone (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_time_zone_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTimeZone (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_time_zone_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTimeZone (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_time_zone_unref); }
# 11953 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTree *GTree_autoptr; typedef GList *GTree_listautoptr; typedef GSList *GTree_slistautoptr; typedef GQueue *GTree_queueautoptr;
# 11954 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11954 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11954 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTree (GTree *_ptr) { if (_ptr) (g_tree_unref) ((GTree *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTree (GTree **_ptr) { glib_autoptr_clear_GTree (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTree (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_tree_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTree (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_tree_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTree (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_tree_unref); }
# 11954 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GVariant *GVariant_autoptr; typedef GList *GVariant_listautoptr; typedef GSList *GVariant_slistautoptr; typedef GQueue *GVariant_queueautoptr;
# 11955 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11955 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11955 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariant (GVariant *_ptr) { if (_ptr) (g_variant_unref) ((GVariant *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariant (GVariant **_ptr) { glib_autoptr_clear_GVariant (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariant (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariant (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariant (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_unref); }
# 11955 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GVariantBuilder *GVariantBuilder_autoptr; typedef GList *GVariantBuilder_listautoptr; typedef GSList *GVariantBuilder_slistautoptr; typedef GQueue *GVariantBuilder_queueautoptr;
# 11956 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11956 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11956 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantBuilder (GVariantBuilder *_ptr) { if (_ptr) (g_variant_builder_unref) ((GVariantBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantBuilder (GVariantBuilder **_ptr) { glib_autoptr_clear_GVariantBuilder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantBuilder (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_builder_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantBuilder (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_builder_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantBuilder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_builder_unref); }
# 11956 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 11957 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11957 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GVariantBuilder (GVariantBuilder *_ptr) { (g_variant_builder_clear) (_ptr); }
# 11957 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GVariantIter *GVariantIter_autoptr; typedef GList *GVariantIter_listautoptr; typedef GSList *GVariantIter_slistautoptr; typedef GQueue *GVariantIter_queueautoptr;
# 11958 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11958 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11958 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantIter (GVariantIter *_ptr) { if (_ptr) (g_variant_iter_free) ((GVariantIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantIter (GVariantIter **_ptr) { glib_autoptr_clear_GVariantIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantIter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_iter_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantIter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_iter_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_iter_free); }
# 11958 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GVariantDict *GVariantDict_autoptr; typedef GList *GVariantDict_listautoptr; typedef GSList *GVariantDict_slistautoptr; typedef GQueue *GVariantDict_queueautoptr;
# 11959 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11959 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11959 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantDict (GVariantDict *_ptr) { if (_ptr) (g_variant_dict_unref) ((GVariantDict *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantDict (GVariantDict **_ptr) { glib_autoptr_clear_GVariantDict (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantDict (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_dict_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantDict (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_dict_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantDict (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_dict_unref); }
# 11959 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 11960 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11960 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GVariantDict (GVariantDict *_ptr) { (g_variant_dict_clear) (_ptr); }
# 11960 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GVariantType *GVariantType_autoptr; typedef GList *GVariantType_listautoptr; typedef GSList *GVariantType_slistautoptr; typedef GQueue *GVariantType_queueautoptr;
# 11961 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11961 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11961 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantType (GVariantType *_ptr) { if (_ptr) (g_variant_type_free) ((GVariantType *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantType (GVariantType **_ptr) { glib_autoptr_clear_GVariantType (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantType (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_type_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantType (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_type_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantType (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_type_free); }
# 11961 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 11962 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11962 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GStrv (GStrv *_ptr) { if (*_ptr != ((void *)0)) (g_strfreev) (*_ptr); }
# 11962 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GRefString *GRefString_autoptr; typedef GList *GRefString_listautoptr; typedef GSList *GRefString_slistautoptr; typedef GQueue *GRefString_queueautoptr;
# 11963 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11963 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11963 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRefString (GRefString *_ptr) { if (_ptr) (g_ref_string_release) ((GRefString *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRefString (GRefString **_ptr) { glib_autoptr_clear_GRefString (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRefString (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_ref_string_release); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRefString (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_ref_string_release); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRefString (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_ref_string_release); }
# 11963 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GUri *GUri_autoptr; typedef GList *GUri_listautoptr; typedef GSList *GUri_slistautoptr; typedef GQueue *GUri_queueautoptr;
# 11964 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 11964 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 11964 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUri (GUri *_ptr) { if (_ptr) (g_uri_unref) ((GUri *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUri (GUri **_ptr) { glib_autoptr_clear_GUri (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUri (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_uri_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUri (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_uri_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUri (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_uri_unref); }
# 11964 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
#pragma clang diagnostic pop


 extern
void glib_init (void);
 extern
void glib_enable_io_features (void);
 extern
void glib_shutdown (void);
 extern
void glib_deinit (void);
 extern
void glib_prepare_to_fork (void);
 extern
void glib_recover_from_fork_in_parent (void);
 extern
void glib_recover_from_fork_in_child (void);
# 12909 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef gsize GType;



typedef struct _GValue GValue;
typedef union _GTypeCValue GTypeCValue;
typedef struct _GTypePlugin GTypePlugin;
typedef struct _GTypeClass GTypeClass;
typedef struct _GTypeInterface GTypeInterface;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeInfo GTypeInfo;
typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
typedef struct _GInterfaceInfo GInterfaceInfo;
typedef struct _GTypeValueTable GTypeValueTable;
typedef struct _GTypeQuery GTypeQuery;
struct _GTypeClass
{

  GType g_type;
};
struct _GTypeInstance
{

  GTypeClass *g_class;
};
struct _GTypeInterface
{

  GType g_type;
  GType g_instance_type;
};
struct _GTypeQuery
{
  GType type;
  const gchar *type_name;
  guint class_size;
  guint instance_size;
};
# 12962 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_TYPE_DEBUG_NONE = 0,
  G_TYPE_DEBUG_OBJECTS = 1 << 0,
  G_TYPE_DEBUG_SIGNALS = 1 << 1,
  G_TYPE_DEBUG_INSTANCE_COUNT = 1 << 2,
  G_TYPE_DEBUG_MASK = 0x07
} GTypeDebugFlags __attribute__((__deprecated__));
 extern
void gobject_init (void);
#pragma clang diagnostic push
# 12972 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_type_init (void);
__attribute__((__deprecated__)) extern
void g_type_init_with_debug_flags (GTypeDebugFlags debug_flags);
#pragma clang diagnostic pop
 extern
const gchar * g_type_name (GType type);
 extern
GQuark g_type_qname (GType type);
 extern
GType g_type_from_name (const gchar *name);
 extern
GType g_type_parent (GType type);
 extern
guint g_type_depth (GType type);
 extern
GType g_type_next_base (GType leaf_type,
            GType root_type);
 extern
gboolean g_type_is_a (GType type,
            GType is_a_type);

 extern
gpointer g_type_class_ref (GType type);
 extern
gpointer g_type_class_peek (GType type);
 extern
gpointer g_type_class_peek_static (GType type);
 extern
void g_type_class_unref (gpointer g_class);
 extern
gpointer g_type_class_peek_parent (gpointer g_class);
 extern
gpointer g_type_interface_peek (gpointer instance_class,
            GType iface_type);
 extern
gpointer g_type_interface_peek_parent (gpointer g_iface);
 extern
gpointer g_type_default_interface_ref (GType g_type);
 extern
gpointer g_type_default_interface_peek (GType g_type);
 extern
void g_type_default_interface_unref (gpointer g_iface);
 extern
GType* g_type_children (GType type,
            guint *n_children);
 extern
GType* g_type_interfaces (GType type,
            guint *n_interfaces);
 extern
void g_type_set_qdata (GType type,
            GQuark quark,
            gpointer data);
 extern
gpointer g_type_get_qdata (GType type,
            GQuark quark);
 extern
void g_type_query (GType type,
            GTypeQuery *query);
 extern
int g_type_get_instance_count (GType type);
typedef void (*GBaseInitFunc) (gpointer g_class);
typedef void (*GBaseFinalizeFunc) (gpointer g_class);
typedef void (*GClassInitFunc) (gpointer g_class,
           gpointer class_data);
typedef void (*GClassFinalizeFunc) (gpointer g_class,
           gpointer class_data);
typedef void (*GInstanceInitFunc) (GTypeInstance *instance,
           gpointer g_class);
typedef void (*GInterfaceInitFunc) (gpointer g_iface,
           gpointer iface_data);
typedef void (*GInterfaceFinalizeFunc) (gpointer g_iface,
           gpointer iface_data);
typedef gboolean (*GTypeClassCacheFunc) (gpointer cache_data,
           GTypeClass *g_class);
typedef void (*GTypeInterfaceCheckFunc) (gpointer check_data,
           gpointer g_iface);
typedef enum
{

  G_TYPE_FLAG_CLASSED = (1 << 0),
  G_TYPE_FLAG_INSTANTIATABLE = (1 << 1),
  G_TYPE_FLAG_DERIVABLE = (1 << 2),
  G_TYPE_FLAG_DEEP_DERIVABLE = (1 << 3)
} GTypeFundamentalFlags;
typedef enum
{
  G_TYPE_FLAG_NONE = 0,
  G_TYPE_FLAG_ABSTRACT = (1 << 4),
  G_TYPE_FLAG_VALUE_ABSTRACT = (1 << 5),
  G_TYPE_FLAG_FINAL = (1 << 6)
} GTypeFlags;
struct _GTypeInfo
{

  guint16 class_size;

  GBaseInitFunc base_init;
  GBaseFinalizeFunc base_finalize;


  GClassInitFunc class_init;
  GClassFinalizeFunc class_finalize;
  gconstpointer class_data;


  guint16 instance_size;
  guint16 n_preallocs;
  GInstanceInitFunc instance_init;


  const GTypeValueTable *value_table;
};
struct _GTypeFundamentalInfo
{
  GTypeFundamentalFlags type_flags;
};
struct _GInterfaceInfo
{
  GInterfaceInitFunc interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer interface_data;
};
struct _GTypeValueTable
{
  void (*value_init) (GValue *value);
  void (*value_free) (GValue *value);
  void (*value_copy) (const GValue *src_value,
      GValue *dest_value);

  gpointer (*value_peek_pointer) (const GValue *value);
  const gchar *collect_format;
  gchar* (*collect_value) (GValue *value,
      guint n_collect_values,
      GTypeCValue *collect_values,
      guint collect_flags);
  const gchar *lcopy_format;
  gchar* (*lcopy_value) (const GValue *value,
      guint n_collect_values,
      GTypeCValue *collect_values,
      guint collect_flags);
};
 extern
GType g_type_register_static (GType parent_type,
      const gchar *type_name,
      const GTypeInfo *info,
      GTypeFlags flags);
 extern
GType g_type_register_static_simple (GType parent_type,
      const gchar *type_name,
      guint class_size,
      GClassInitFunc class_init,
      guint instance_size,
      GInstanceInitFunc instance_init,
      GTypeFlags flags);

 extern
GType g_type_register_dynamic (GType parent_type,
      const gchar *type_name,
      GTypePlugin *plugin,
      GTypeFlags flags);
 extern
GType g_type_register_fundamental (GType type_id,
      const gchar *type_name,
      const GTypeInfo *info,
      const GTypeFundamentalInfo *finfo,
      GTypeFlags flags);
 extern
void g_type_add_interface_static (GType instance_type,
      GType interface_type,
      const GInterfaceInfo *info);
 extern
void g_type_add_interface_dynamic (GType instance_type,
      GType interface_type,
      GTypePlugin *plugin);
 extern
void g_type_interface_add_prerequisite (GType interface_type,
      GType prerequisite_type);
 extern
GType*g_type_interface_prerequisites (GType interface_type,
      guint *n_prerequisites);
 extern
GType g_type_interface_instantiatable_prerequisite
                                        (GType interface_type);
__attribute__((__deprecated__)) extern
void g_type_class_add_private (gpointer g_class,
                                         gsize private_size);
 extern
gint g_type_add_instance_private (GType class_type,
                                         gsize private_size);
 extern
gpointer g_type_instance_get_private (GTypeInstance *instance,
                                         GType private_type);
 extern
void g_type_class_adjust_private_offset (gpointer g_class,
                                             gint *private_size_or_offset);
 extern
void g_type_add_class_private (GType class_type,
      gsize private_size);
 extern
gpointer g_type_class_get_private (GTypeClass *klass,
      GType private_type);
 extern
gint g_type_class_get_instance_private_offset (gpointer g_class);
 extern
void g_type_ensure (GType type);
 extern
guint g_type_get_type_registration_serial (void);
# 13445 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GTypePlugin* g_type_get_plugin (GType type);
 extern
GTypePlugin* g_type_interface_get_plugin (GType instance_type,
       GType interface_type);
 extern
GType g_type_fundamental_next (void);
 extern
GType g_type_fundamental (GType type_id);
 extern
GTypeInstance* g_type_create_instance (GType type);
 extern
void g_type_free_instance (GTypeInstance *instance);
 extern
void g_type_add_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
 extern
void g_type_remove_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
 extern
void g_type_class_unref_uncached (gpointer g_class);
 extern
void g_type_add_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);
 extern
void g_type_remove_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);
 extern
GTypeValueTable* g_type_value_table_peek (GType type);
 extern
gboolean g_type_check_instance (GTypeInstance *instance) __attribute__((__pure__));
 extern
GTypeInstance* g_type_check_instance_cast (GTypeInstance *instance,
       GType iface_type);
 extern
gboolean g_type_check_instance_is_a (GTypeInstance *instance,
       GType iface_type) __attribute__((__pure__));
 extern
gboolean g_type_check_instance_is_fundamentally_a (GTypeInstance *instance,
                                                           GType fundamental_type) __attribute__((__pure__));
 extern
GTypeClass* g_type_check_class_cast (GTypeClass *g_class,
       GType is_a_type);
 extern
gboolean g_type_check_class_is_a (GTypeClass *g_class,
       GType is_a_type) __attribute__((__pure__));
 extern
gboolean g_type_check_is_value_type (GType type) __attribute__ ((__const__));
 extern
gboolean g_type_check_value (const GValue *value) __attribute__((__pure__));
 extern
gboolean g_type_check_value_holds (const GValue *value,
       GType type) __attribute__((__pure__));
 extern
gboolean g_type_test_flags (GType type,
       guint flags) __attribute__ ((__const__));
 extern
const gchar * g_type_name_from_instance (GTypeInstance *instance);
 extern
const gchar * g_type_name_from_class (GTypeClass *g_class);
# 13569 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef void (*GValueTransform) (const GValue *src_value,
     GValue *dest_value);
struct _GValue
{

  GType g_type;

  union {
    gint v_int;
    guint v_uint;
    glong v_long;
    gulong v_ulong;
    gint64 v_int64;
    guint64 v_uint64;
    gfloat v_float;
    gdouble v_double;
    gpointer v_pointer;
  } data[2];
};
 extern
GValue* g_value_init (GValue *value,
      GType g_type);
 extern
void g_value_copy (const GValue *src_value,
      GValue *dest_value);
 extern
GValue* g_value_reset (GValue *value);
 extern
void g_value_unset (GValue *value);
 extern
void g_value_set_instance (GValue *value,
      gpointer instance);
 extern
void g_value_init_from_instance (GValue *value,
                                              gpointer instance);
 extern
gboolean g_value_fits_pointer (const GValue *value);
 extern
gpointer g_value_peek_pointer (const GValue *value);
 extern
gboolean g_value_type_compatible (GType src_type,
      GType dest_type);
 extern
gboolean g_value_type_transformable (GType src_type,
      GType dest_type);
 extern
gboolean g_value_transform (const GValue *src_value,
      GValue *dest_value);
 extern
void g_value_register_transform_func (GType src_type,
      GType dest_type,
      GValueTransform transform_func);
# 13647 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_PARAM_READABLE = 1 << 0,
  G_PARAM_WRITABLE = 1 << 1,
  G_PARAM_READWRITE = (G_PARAM_READABLE | G_PARAM_WRITABLE),
  G_PARAM_CONSTRUCT = 1 << 2,
  G_PARAM_CONSTRUCT_ONLY = 1 << 3,
  G_PARAM_LAX_VALIDATION = 1 << 4,
  G_PARAM_STATIC_NAME = 1 << 5,
  G_PARAM_PRIVATE __attribute__((__deprecated__)) = G_PARAM_STATIC_NAME,
  G_PARAM_STATIC_NICK = 1 << 6,
  G_PARAM_STATIC_BLURB = 1 << 7,

  G_PARAM_EXPLICIT_NOTIFY = 1 << 30,

  G_PARAM_DEPRECATED = (gint)(1u << 31)
} GParamFlags;



typedef struct _GParamSpec GParamSpec;
typedef struct _GParamSpecClass GParamSpecClass;
typedef struct _GParameter GParameter __attribute__((__deprecated__));
typedef struct _GParamSpecPool GParamSpecPool;
struct _GParamSpec
{
  GTypeInstance g_type_instance;
  const gchar *name;
  GParamFlags flags;
  GType value_type;
  GType owner_type;

  gchar *_nick;
  gchar *_blurb;
  GData *qdata;
  guint ref_count;
  guint param_id;
};
struct _GParamSpecClass
{
  GTypeClass g_type_class;
  GType value_type;
  void (*finalize) (GParamSpec *pspec);

  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);
  gboolean (*value_is_valid) (GParamSpec *pspec,
                                         const GValue *value);

  gpointer dummy[3];
};
struct _GParameter
{
  const gchar *name;
  GValue value;
} __attribute__((__deprecated__));
 extern
GParamSpec* g_param_spec_ref (GParamSpec *pspec);
 extern
void g_param_spec_unref (GParamSpec *pspec);
 extern
void g_param_spec_sink (GParamSpec *pspec);
 extern
GParamSpec* g_param_spec_ref_sink (GParamSpec *pspec);
 extern
gpointer g_param_spec_get_qdata (GParamSpec *pspec,
       GQuark quark);
 extern
void g_param_spec_set_qdata (GParamSpec *pspec,
       GQuark quark,
       gpointer data);
 extern
void g_param_spec_set_qdata_full (GParamSpec *pspec,
       GQuark quark,
       gpointer data,
       GDestroyNotify destroy);
 extern
gpointer g_param_spec_steal_qdata (GParamSpec *pspec,
       GQuark quark);
 extern
GParamSpec* g_param_spec_get_redirect_target (GParamSpec *pspec);
 extern
void g_param_value_set_default (GParamSpec *pspec,
       GValue *value);
 extern
gboolean g_param_value_defaults (GParamSpec *pspec,
       const GValue *value);
 extern
gboolean g_param_value_validate (GParamSpec *pspec,
       GValue *value);
 extern
gboolean g_param_value_is_valid (GParamSpec *pspec,
                                                 const GValue *value);
 extern
gboolean g_param_value_convert (GParamSpec *pspec,
       const GValue *src_value,
       GValue *dest_value,
       gboolean strict_validation);
 extern
gint g_param_values_cmp (GParamSpec *pspec,
       const GValue *value1,
       const GValue *value2);
 extern
const gchar * g_param_spec_get_name (GParamSpec *pspec);
 extern
const gchar * g_param_spec_get_nick (GParamSpec *pspec);
 extern
const gchar * g_param_spec_get_blurb (GParamSpec *pspec);
 extern
void g_value_set_param (GValue *value,
       GParamSpec *param);
 extern
GParamSpec* g_value_get_param (const GValue *value);
 extern
GParamSpec* g_value_dup_param (const GValue *value);
 extern
void g_value_take_param (GValue *value,
              GParamSpec *param);
__attribute__((__deprecated__("Use '" "g_value_take_param" "' instead"))) extern
void g_value_set_param_take_ownership (GValue *value,
                                                 GParamSpec *param);
 extern
const GValue * g_param_spec_get_default_value (GParamSpec *pspec);
 extern
GQuark g_param_spec_get_name_quark (GParamSpec *pspec);
typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
struct _GParamSpecTypeInfo
{

  guint16 instance_size;
  guint16 n_preallocs;
  void (*instance_init) (GParamSpec *pspec);

  GType value_type;
  void (*finalize) (GParamSpec *pspec);
  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);
};
 extern
GType g_param_type_register_static (const gchar *name,
      const GParamSpecTypeInfo *pspec_info);
 extern
gboolean g_param_spec_is_valid_name (const gchar *name);
GType _g_param_type_register_static_constant (const gchar *name,
            const GParamSpecTypeInfo *pspec_info,
            GType opt_type);
 extern
gpointer g_param_spec_internal (GType param_type,
       const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
 extern
GParamSpecPool* g_param_spec_pool_new (gboolean type_prefixing);
 extern
void g_param_spec_pool_insert (GParamSpecPool *pool,
       GParamSpec *pspec,
       GType owner_type);
 extern
void g_param_spec_pool_remove (GParamSpecPool *pool,
       GParamSpec *pspec);
 extern
GParamSpec* g_param_spec_pool_lookup (GParamSpecPool *pool,
       const gchar *param_name,
       GType owner_type,
       gboolean walk_ancestors);
 extern
GList* g_param_spec_pool_list_owned (GParamSpecPool *pool,
       GType owner_type);
 extern
GParamSpec** g_param_spec_pool_list (GParamSpecPool *pool,
       GType owner_type,
       guint *n_pspecs_p);
# 13843 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GClosure GClosure;
typedef struct _GClosureNotifyData GClosureNotifyData;
typedef void (*GCallback) (void);
typedef void (*GClosureNotify) (gpointer data,
      GClosure *closure);
typedef void (*GClosureMarshal) (GClosure *closure,
      GValue *return_value,
      guint n_param_values,
      const GValue *param_values,
      gpointer invocation_hint,
      gpointer user_data);
typedef void (* GVaClosureMarshal) (GClosure *closure,
        GValue *return_value,
        gpointer instance,
        va_list args,
        gpointer marshal_data,
        int n_params,
        GType *param_types);
typedef struct _GCClosure GCClosure;
struct _GClosureNotifyData
{
  gpointer data;
  GClosureNotify notify;
};
struct _GClosure
{

  guint ref_count : 15;

  guint meta_marshal_nouse : 1;
  guint n_guards : 1;
  guint n_fnotifiers : 2;
  guint n_inotifiers : 8;
  guint in_inotify : 1;
  guint floating : 1;

  guint derivative_flag : 1;

  guint in_marshal : 1;
  guint is_invalid : 1;
   void (*marshal) (GClosure *closure,
         GValue *return_value,
         guint n_param_values,
         const GValue *param_values,
         gpointer invocation_hint,
         gpointer marshal_data);
   gpointer data;
   GClosureNotifyData *notifiers;

};
struct _GCClosure
{
  GClosure closure;
  gpointer callback;
};
 extern
GClosure* g_cclosure_new (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
 extern
GClosure* g_cclosure_new_swap (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
 extern
GClosure* g_signal_type_cclosure_new (GType itype,
       guint struct_offset);
 extern
GClosure* g_closure_ref (GClosure *closure);
 extern
void g_closure_sink (GClosure *closure);
 extern
void g_closure_unref (GClosure *closure);
 extern
GClosure* g_closure_new_simple (guint sizeof_closure,
       gpointer data);
 extern
void g_closure_add_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
 extern
void g_closure_remove_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
 extern
void g_closure_add_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
 extern
void g_closure_remove_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
 extern
void g_closure_add_marshal_guards (GClosure *closure,
       gpointer pre_marshal_data,
       GClosureNotify pre_marshal_notify,
       gpointer post_marshal_data,
       GClosureNotify post_marshal_notify);
 extern
void g_closure_set_marshal (GClosure *closure,
       GClosureMarshal marshal);
 extern
void g_closure_set_meta_marshal (GClosure *closure,
       gpointer marshal_data,
       GClosureMarshal meta_marshal);
 extern
void g_closure_invalidate (GClosure *closure);
 extern
void g_closure_invoke (GClosure *closure,
       GValue *return_value,
       guint n_param_values,
       const GValue *param_values,
       gpointer invocation_hint);
 extern
void g_cclosure_marshal_generic (GClosure *closure,
                                 GValue *return_gvalue,
                                 guint n_param_values,
                                 const GValue *param_values,
                                 gpointer invocation_hint,
                                 gpointer marshal_data);
 extern
void g_cclosure_marshal_generic_va (GClosure *closure,
        GValue *return_value,
        gpointer instance,
        va_list args_list,
        gpointer marshal_data,
        int n_params,
        GType *param_types);
# 13980 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_cclosure_marshal_VOID__VOID (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__VOIDv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
 extern
void g_cclosure_marshal_VOID__BOOLEAN (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__BOOLEANv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);
 extern
void g_cclosure_marshal_VOID__CHAR (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__CHARv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
 extern
void g_cclosure_marshal_VOID__UCHAR (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__UCHARv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
 extern
void g_cclosure_marshal_VOID__INT (GClosure *closure,
                                   GValue *return_value,
                                   guint n_param_values,
                                   const GValue *param_values,
                                   gpointer invocation_hint,
                                   gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__INTv (GClosure *closure,
                                    GValue *return_value,
                                    gpointer instance,
                                    va_list args,
                                    gpointer marshal_data,
                                    int n_params,
                                    GType *param_types);
 extern
void g_cclosure_marshal_VOID__UINT (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__UINTv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
 extern
void g_cclosure_marshal_VOID__LONG (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__LONGv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
 extern
void g_cclosure_marshal_VOID__ULONG (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__ULONGv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
 extern
void g_cclosure_marshal_VOID__ENUM (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__ENUMv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);
 extern
void g_cclosure_marshal_VOID__FLAGS (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__FLAGSv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
 extern
void g_cclosure_marshal_VOID__FLOAT (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__FLOATv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
 extern
void g_cclosure_marshal_VOID__DOUBLE (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__DOUBLEv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);
 extern
void g_cclosure_marshal_VOID__STRING (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__STRINGv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);
 extern
void g_cclosure_marshal_VOID__PARAM (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__PARAMv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
 extern
void g_cclosure_marshal_VOID__BOXED (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__BOXEDv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);
 extern
void g_cclosure_marshal_VOID__POINTER (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__POINTERv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);
 extern
void g_cclosure_marshal_VOID__OBJECT (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__OBJECTv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);
 extern
void g_cclosure_marshal_VOID__VARIANT (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__VARIANTv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);
 extern
void g_cclosure_marshal_VOID__UINT_POINTER (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__UINT_POINTERv (GClosure *closure,
                                             GValue *return_value,
                                             gpointer instance,
                                             va_list args,
                                             gpointer marshal_data,
                                             int n_params,
                                             GType *param_types);
 extern
void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure *closure,
                                        GValue *return_value,
                                        guint n_param_values,
                                        const GValue *param_values,
                                        gpointer invocation_hint,
                                        gpointer marshal_data);
 extern
void g_cclosure_marshal_BOOLEAN__FLAGSv (GClosure *closure,
                                         GValue *return_value,
                                         gpointer instance,
                                         va_list args,
                                         gpointer marshal_data,
                                         int n_params,
                                         GType *param_types);

 extern
void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure *closure,
                                                GValue *return_value,
                                                guint n_param_values,
                                                const GValue *param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
 extern
void g_cclosure_marshal_STRING__OBJECT_POINTERv (GClosure *closure,
                                                 GValue *return_value,
                                                 gpointer instance,
                                                 va_list args,
                                                 gpointer marshal_data,
                                                 int n_params,
                                                 GType *param_types);
 extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXED (GClosure *closure,
                                              GValue *return_value,
                                              guint n_param_values,
                                              const GValue *param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);
 extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv (GClosure *closure,
                                               GValue *return_value,
                                               gpointer instance,
                                               va_list args,
                                               gpointer marshal_data,
                                               int n_params,
                                               GType *param_types);




typedef struct _GSignalQuery GSignalQuery;
typedef struct _GSignalInvocationHint GSignalInvocationHint;
typedef GClosureMarshal GSignalCMarshaller;
typedef GVaClosureMarshal GSignalCVaMarshaller;
typedef gboolean (*GSignalEmissionHook) (GSignalInvocationHint *ihint,
      guint n_param_values,
      const GValue *param_values,
      gpointer user_data);
typedef gboolean (*GSignalAccumulator) (GSignalInvocationHint *ihint,
      GValue *return_accu,
      const GValue *handler_return,
      gpointer user_data);
typedef enum
{
  G_SIGNAL_RUN_FIRST = 1 << 0,
  G_SIGNAL_RUN_LAST = 1 << 1,
  G_SIGNAL_RUN_CLEANUP = 1 << 2,
  G_SIGNAL_NO_RECURSE = 1 << 3,
  G_SIGNAL_DETAILED = 1 << 4,
  G_SIGNAL_ACTION = 1 << 5,
  G_SIGNAL_NO_HOOKS = 1 << 6,
  G_SIGNAL_MUST_COLLECT = 1 << 7,
  G_SIGNAL_DEPRECATED = 1 << 8,

  G_SIGNAL_ACCUMULATOR_FIRST_RUN = 1 << 17,
} GSignalFlags;

typedef enum
{
  G_CONNECT_DEFAULT = 0,
  G_CONNECT_AFTER = 1 << 0,
  G_CONNECT_SWAPPED = 1 << 1
} GConnectFlags;
typedef enum
{
  G_SIGNAL_MATCH_ID = 1 << 0,
  G_SIGNAL_MATCH_DETAIL = 1 << 1,
  G_SIGNAL_MATCH_CLOSURE = 1 << 2,
  G_SIGNAL_MATCH_FUNC = 1 << 3,
  G_SIGNAL_MATCH_DATA = 1 << 4,
  G_SIGNAL_MATCH_UNBLOCKED = 1 << 5
} GSignalMatchType;


struct _GSignalInvocationHint
{
  guint signal_id;
  GQuark detail;
  GSignalFlags run_type;
};
struct _GSignalQuery
{
  guint signal_id;
  const gchar *signal_name;
  GType itype;
  GSignalFlags signal_flags;
  GType return_type;
  guint n_params;
  const GType *param_types;
};
 extern
guint g_signal_newv (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          GType *param_types);
 extern
guint g_signal_new_valist (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          va_list args);
 extern
guint g_signal_new (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          guint class_offset,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          ...);
 extern
guint g_signal_new_class_handler (const gchar *signal_name,
                                             GType itype,
                                             GSignalFlags signal_flags,
                                             GCallback class_handler,
                                             GSignalAccumulator accumulator,
                                             gpointer accu_data,
                                             GSignalCMarshaller c_marshaller,
                                             GType return_type,
                                             guint n_params,
                                             ...);
 extern
void g_signal_set_va_marshaller (guint signal_id,
          GType instance_type,
          GSignalCVaMarshaller va_marshaller);
 extern
void g_signal_emitv (const GValue *instance_and_params,
          guint signal_id,
          GQuark detail,
          GValue *return_value);
 extern
void g_signal_emit_valist (gpointer instance,
          guint signal_id,
          GQuark detail,
          va_list var_args);
 extern
void g_signal_emit (gpointer instance,
          guint signal_id,
          GQuark detail,
          ...);
 extern
void g_signal_emit_by_name (gpointer instance,
          const gchar *detailed_signal,
          ...);
 extern
guint g_signal_lookup (const gchar *name,
          GType itype);
 extern
const gchar * g_signal_name (guint signal_id);
 extern
void g_signal_query (guint signal_id,
          GSignalQuery *query);
 extern
guint* g_signal_list_ids (GType itype,
          guint *n_ids);
 extern
gboolean g_signal_is_valid_name (const gchar *name);
 extern
gboolean g_signal_parse_name (const gchar *detailed_signal,
          GType itype,
          guint *signal_id_p,
          GQuark *detail_p,
          gboolean force_detail_quark);
 extern
GSignalInvocationHint* g_signal_get_invocation_hint (gpointer instance);
 extern
void g_signal_stop_emission (gpointer instance,
          guint signal_id,
          GQuark detail);
 extern
void g_signal_stop_emission_by_name (gpointer instance,
          const gchar *detailed_signal);
 extern
gulong g_signal_add_emission_hook (guint signal_id,
          GQuark detail,
          GSignalEmissionHook hook_func,
          gpointer hook_data,
          GDestroyNotify data_destroy);
 extern
void g_signal_remove_emission_hook (guint signal_id,
          gulong hook_id);
 extern
gboolean g_signal_has_handler_pending (gpointer instance,
            guint signal_id,
            GQuark detail,
            gboolean may_be_blocked);
 extern
gulong g_signal_connect_closure_by_id (gpointer instance,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gboolean after);
 extern
gulong g_signal_connect_closure (gpointer instance,
            const gchar *detailed_signal,
            GClosure *closure,
            gboolean after);
 extern
gulong g_signal_connect_data (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer data,
            GClosureNotify destroy_data,
            GConnectFlags connect_flags);
 extern
void g_signal_handler_block (gpointer instance,
            gulong handler_id);
 extern
void g_signal_handler_unblock (gpointer instance,
            gulong handler_id);
 extern
void g_signal_handler_disconnect (gpointer instance,
            gulong handler_id);
 extern
gboolean g_signal_handler_is_connected (gpointer instance,
            gulong handler_id);
 extern
gulong g_signal_handler_find (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
 extern
guint g_signal_handlers_block_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
 extern
guint g_signal_handlers_unblock_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
 extern
guint g_signal_handlers_disconnect_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
 extern
void g_clear_signal_handler (gulong *handler_id_ptr,
            gpointer instance);
# 14562 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_signal_override_class_closure (guint signal_id,
                                               GType instance_type,
                                               GClosure *class_closure);
 extern
void g_signal_override_class_handler (const gchar *signal_name,
                                               GType instance_type,
                                               GCallback class_handler);
 extern
void g_signal_chain_from_overridden (const GValue *instance_and_params,
                                               GValue *return_value);
 extern
void g_signal_chain_from_overridden_handler (gpointer instance,
                                               ...);
# 14596 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint,
         GValue *return_accu,
         const GValue *handler_return,
         gpointer dummy);
 extern
gboolean g_signal_accumulator_first_wins (GSignalInvocationHint *ihint,
                                            GValue *return_accu,
                                            const GValue *handler_return,
                                            gpointer dummy);
 extern
void g_signal_handlers_destroy (gpointer instance);
void _g_signals_destroy (GType itype);
# 14658 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_date_get_type (void) __attribute__ ((__const__));
 extern
GType g_strv_get_type (void) __attribute__ ((__const__));
 extern
GType g_gstring_get_type (void) __attribute__ ((__const__));
 extern
GType g_hash_table_get_type (void) __attribute__ ((__const__));
 extern
GType g_array_get_type (void) __attribute__ ((__const__));
 extern
GType g_byte_array_get_type (void) __attribute__ ((__const__));
 extern
GType g_ptr_array_get_type (void) __attribute__ ((__const__));
 extern
GType g_bytes_get_type (void) __attribute__ ((__const__));
 extern
GType g_variant_type_get_gtype (void) __attribute__ ((__const__));
 extern
GType g_regex_get_type (void) __attribute__ ((__const__));
 extern
GType g_match_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_error_get_type (void) __attribute__ ((__const__));
 extern
GType g_date_time_get_type (void) __attribute__ ((__const__));
 extern
GType g_time_zone_get_type (void) __attribute__ ((__const__));
 extern
GType g_io_channel_get_type (void) __attribute__ ((__const__));
 extern
GType g_io_condition_get_type (void) __attribute__ ((__const__));
 extern
GType g_variant_builder_get_type (void) __attribute__ ((__const__));
 extern
GType g_variant_dict_get_type (void) __attribute__ ((__const__));
 extern
GType g_key_file_get_type (void) __attribute__ ((__const__));
 extern
GType g_main_loop_get_type (void) __attribute__ ((__const__));
 extern
GType g_main_context_get_type (void) __attribute__ ((__const__));
 extern
GType g_source_get_type (void) __attribute__ ((__const__));
 extern
GType g_pollfd_get_type (void) __attribute__ ((__const__));
 extern
GType g_thread_get_type (void) __attribute__ ((__const__));
 extern
GType g_checksum_get_type (void) __attribute__ ((__const__));
 extern
GType g_markup_parse_context_get_type (void) __attribute__ ((__const__));
 extern
GType g_mapped_file_get_type (void) __attribute__ ((__const__));
 extern
GType g_option_group_get_type (void) __attribute__ ((__const__));
 extern
GType g_uri_get_type (void) __attribute__ ((__const__));
 extern
GType g_tree_get_type (void) __attribute__ ((__const__));
 extern
GType g_pattern_spec_get_type (void) __attribute__ ((__const__));
 extern
GType g_bookmark_file_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "'G_TYPE_VARIANT'" "' instead"))) extern
GType g_variant_get_gtype (void) __attribute__ ((__const__));






typedef gpointer (*GBoxedCopyFunc) (gpointer boxed);
typedef void (*GBoxedFreeFunc) (gpointer boxed);
 extern
gpointer g_boxed_copy (GType boxed_type,
                                           gconstpointer src_boxed);
 extern
void g_boxed_free (GType boxed_type,
                                           gpointer boxed);
 extern
void g_value_set_boxed (GValue *value,
                                           gconstpointer v_boxed);
 extern
void g_value_set_static_boxed (GValue *value,
                                           gconstpointer v_boxed);
 extern
void g_value_take_boxed (GValue *value,
                                           gconstpointer v_boxed);
__attribute__((__deprecated__("Use '" "g_value_take_boxed" "' instead"))) extern
void g_value_set_boxed_take_ownership (GValue *value,
                                           gconstpointer v_boxed);
 extern
gpointer g_value_get_boxed (const GValue *value);
 extern
gpointer g_value_dup_boxed (const GValue *value);
 extern
GType g_boxed_type_register_static (const gchar *name,
                                           GBoxedCopyFunc boxed_copy,
                                           GBoxedFreeFunc boxed_free);


 extern
GType g_closure_get_type (void) __attribute__ ((__const__));
 extern
GType g_value_get_type (void) __attribute__ ((__const__));
# 14788 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GObject GObject;
typedef struct _GObjectClass GObjectClass;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GObjectClass GInitiallyUnownedClass;
typedef struct _GObjectConstructParam GObjectConstructParam;
typedef void (*GObjectGetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
typedef void (*GObjectSetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
typedef void (*GObjectFinalizeFunc) (GObject *object);
typedef void (*GWeakNotify) (gpointer data,
      GObject *where_the_object_was);
struct _GObject
{
  GTypeInstance g_type_instance;


  guint ref_count;
  GData *qdata;
};
struct _GObjectClass
{
  GTypeClass g_type_class;

  GSList *construct_properties;


  GObject* (*constructor) (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam *construct_properties);

  void (*set_property) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
  void (*get_property) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
  void (*dispose) (GObject *object);
  void (*finalize) (GObject *object);

  void (*dispatch_properties_changed) (GObject *object,
          guint n_pspecs,
          GParamSpec **pspecs);

  void (*notify) (GObject *object,
      GParamSpec *pspec);

  void (*constructed) (GObject *object);

  gsize flags;
  gsize n_construct_properties;
  gpointer pspecs;
  gsize n_pspecs;

  gpointer pdummy[3];
};
struct _GObjectConstructParam
{
  GParamSpec *pspec;
  GValue *value;
};
 extern
GType g_initially_unowned_get_type (void);
 extern
void g_object_class_install_property (GObjectClass *oclass,
            guint property_id,
            GParamSpec *pspec);
 extern
GParamSpec* g_object_class_find_property (GObjectClass *oclass,
            const gchar *property_name);
 extern
GParamSpec**g_object_class_list_properties (GObjectClass *oclass,
            guint *n_properties);
 extern
void g_object_class_override_property (GObjectClass *oclass,
            guint property_id,
            const gchar *name);
 extern
void g_object_class_install_properties (GObjectClass *oclass,
                                               guint n_pspecs,
                                               GParamSpec **pspecs);
 extern
void g_object_interface_install_property (gpointer g_iface,
       GParamSpec *pspec);
 extern
GParamSpec* g_object_interface_find_property (gpointer g_iface,
       const gchar *property_name);
 extern
GParamSpec**g_object_interface_list_properties (gpointer g_iface,
       guint *n_properties_p);
 extern
GType g_object_get_type (void) __attribute__ ((__const__));
 extern
gpointer g_object_new (GType object_type,
            const gchar *first_property_name,
            ...);
 extern
GObject* g_object_new_with_properties (GType object_type,
                                               guint n_properties,
                                               const char *names[],
                                               const GValue values[]);
#pragma clang diagnostic push
# 14895 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_object_new_with_properties" "' instead"))) extern
gpointer g_object_newv (GType object_type,
            guint n_parameters,
            GParameter *parameters);
#pragma clang diagnostic pop
 extern
GObject* g_object_new_valist (GType object_type,
            const gchar *first_property_name,
            va_list var_args);
 extern
void g_object_set (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
 extern
void g_object_get (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
 extern
gpointer g_object_connect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
 extern
void g_object_disconnect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
 extern
void g_object_setv (GObject *object,
                                               guint n_properties,
                                               const gchar *names[],
                                               const GValue values[]);
 extern
void g_object_set_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
 extern
void g_object_getv (GObject *object,
                                               guint n_properties,
                                               const gchar *names[],
                                               GValue values[]);
 extern
void g_object_get_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
 extern
void g_object_set_property (GObject *object,
            const gchar *property_name,
            const GValue *value);
 extern
void g_object_get_property (GObject *object,
            const gchar *property_name,
            GValue *value);
 extern
void g_object_freeze_notify (GObject *object);
 extern
void g_object_notify (GObject *object,
            const gchar *property_name);
 extern
void g_object_notify_by_pspec (GObject *object,
            GParamSpec *pspec);
 extern
void g_object_thaw_notify (GObject *object);
 extern
gboolean g_object_is_floating (gpointer object);
 extern
gpointer g_object_ref_sink (gpointer object);
 extern
gpointer g_object_take_ref (gpointer object);
 extern
gpointer g_object_ref (gpointer object);
 extern
void g_object_unref (gpointer object);
 extern
void g_object_weak_ref (GObject *object,
            GWeakNotify notify,
            gpointer data);
 extern
void g_object_weak_unref (GObject *object,
            GWeakNotify notify,
            gpointer data);
 extern
void g_object_add_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
 extern
void g_object_remove_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);




typedef void (*GToggleNotify) (gpointer data,
          GObject *object,
          gboolean is_last_ref);
 extern
void g_object_add_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);
 extern
void g_object_remove_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);
 extern
gpointer g_object_get_qdata (GObject *object,
            GQuark quark);
 extern
void g_object_set_qdata (GObject *object,
            GQuark quark,
            gpointer data);
 extern
void g_object_set_qdata_full (GObject *object,
            GQuark quark,
            gpointer data,
            GDestroyNotify destroy);
 extern
gpointer g_object_steal_qdata (GObject *object,
            GQuark quark);
 extern
gpointer g_object_dup_qdata (GObject *object,
                                               GQuark quark,
                                               GDuplicateFunc dup_func,
            gpointer user_data);
 extern
gboolean g_object_replace_qdata (GObject *object,
                                               GQuark quark,
                                               gpointer oldval,
                                               gpointer newval,
                                               GDestroyNotify destroy,
            GDestroyNotify *old_destroy);
 extern
gpointer g_object_get_data (GObject *object,
            const gchar *key);
 extern
void g_object_set_data (GObject *object,
            const gchar *key,
            gpointer data);
 extern
void g_object_set_data_full (GObject *object,
            const gchar *key,
            gpointer data,
            GDestroyNotify destroy);
 extern
gpointer g_object_steal_data (GObject *object,
            const gchar *key);
 extern
gpointer g_object_dup_data (GObject *object,
                                               const gchar *key,
                                               GDuplicateFunc dup_func,
            gpointer user_data);
 extern
gboolean g_object_replace_data (GObject *object,
                                               const gchar *key,
                                               gpointer oldval,
                                               gpointer newval,
                                               GDestroyNotify destroy,
            GDestroyNotify *old_destroy);
 extern
void g_object_watch_closure (GObject *object,
            GClosure *closure);
 extern
GClosure* g_cclosure_new_object (GCallback callback_func,
            GObject *object);
 extern
GClosure* g_cclosure_new_object_swap (GCallback callback_func,
            GObject *object);
 extern
GClosure* g_closure_new_object (guint sizeof_closure,
            GObject *object);
 extern
void g_value_set_object (GValue *value,
            gpointer v_object);
 extern
gpointer g_value_get_object (const GValue *value);
 extern
gpointer g_value_dup_object (const GValue *value);
 extern
gulong g_signal_connect_object (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer gobject,
            GConnectFlags connect_flags);
 extern
void g_object_force_floating (GObject *object);
 extern
void g_object_run_dispose (GObject *object);
 extern
void g_value_take_object (GValue *value,
            gpointer v_object);
__attribute__((__deprecated__("Use '" "g_value_take_object" "' instead"))) extern
void g_value_set_object_take_ownership (GValue *value,
                                               gpointer v_object);
__attribute__((__deprecated__)) extern
gsize g_object_compat_control (gsize what,
            gpointer data);
# 15110 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_clear_object (GObject **object_ptr);

static inline gboolean
(g_set_object) (GObject **object_ptr,
                GObject *new_object)
{
  GObject *old_object = *object_ptr;

  if (old_object == new_object)
    return (0);
  if (new_object != ((void *)0))
    ((__typeof__ (new_object)) (g_object_ref) (new_object));
  *object_ptr = new_object;
  if (old_object != ((void *)0))
    g_object_unref (old_object);
  return (!(0));
}
# 15147 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
static inline void
(g_assert_finalize_object) (GObject *object)
{
  gpointer weak_pointer = object;
  do { if ((((g_type_check_instance_is_fundamentally_a ((GTypeInstance*) ((weak_pointer)), (((GType) ((20) << (2))))))))) ; else g_assertion_message (((gchar*) 0), "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h", 15151, ((const char*) (__func__)), "'" "G_IS_OBJECT (weak_pointer)" "' should be TRUE"); } while (0);
  g_object_add_weak_pointer (object, &weak_pointer);
  g_object_unref (weak_pointer);
  do { if ((weak_pointer) == ((void *)0)) ; else g_assertion_message (((gchar*) 0), "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h", 15154, ((const char*) (__func__)), "'" "weak_pointer" "' should be NULL"); } while (0);
}





static inline void
(g_clear_weak_pointer) (gpointer *weak_pointer_location)
{
  GObject *object = (GObject *) *weak_pointer_location;
  if (object != ((void *)0))
    {
      g_object_remove_weak_pointer (object, weak_pointer_location);
      *weak_pointer_location = ((void *)0);
    }
}




static inline gboolean
(g_set_weak_pointer) (gpointer *weak_pointer_location,
                      GObject *new_object)
{
  GObject *old_object = (GObject *) *weak_pointer_location;

  if (old_object == new_object)
    return (0);
  if (old_object != ((void *)0))
    g_object_remove_weak_pointer (old_object, weak_pointer_location);
  *weak_pointer_location = new_object;
  if (new_object != ((void *)0))
    g_object_add_weak_pointer (new_object, weak_pointer_location);
  return (!(0));
}





typedef struct {

    union { gpointer p; } priv;
} GWeakRef;
 extern
void g_weak_ref_init (GWeakRef *weak_ref,
                                gpointer object);
 extern
void g_weak_ref_clear (GWeakRef *weak_ref);
 extern
gpointer g_weak_ref_get (GWeakRef *weak_ref);
 extern
void g_weak_ref_set (GWeakRef *weak_ref,
                                gpointer object);







typedef struct _GBinding GBinding;
typedef gboolean (* GBindingTransformFunc) (GBinding *binding,
                                            const GValue *from_value,
                                            GValue *to_value,
                                            gpointer user_data);
typedef enum {
  G_BINDING_DEFAULT = 0,
  G_BINDING_BIDIRECTIONAL = 1 << 0,
  G_BINDING_SYNC_CREATE = 1 << 1,
  G_BINDING_INVERT_BOOLEAN = 1 << 2
} GBindingFlags;
 extern
GType g_binding_flags_get_type (void) __attribute__ ((__const__));
 extern
GType g_binding_get_type (void) __attribute__ ((__const__));
 extern
GBindingFlags g_binding_get_flags (GBinding *binding);
__attribute__((__deprecated__("Use '" "g_binding_dup_source" "' instead"))) extern
GObject * g_binding_get_source (GBinding *binding);
 extern
GObject * g_binding_dup_source (GBinding *binding);
__attribute__((__deprecated__("Use '" "g_binding_dup_target" "' instead"))) extern
GObject * g_binding_get_target (GBinding *binding);
 extern
GObject * g_binding_dup_target (GBinding *binding);
 extern
const gchar * g_binding_get_source_property (GBinding *binding);
 extern
const gchar * g_binding_get_target_property (GBinding *binding);
 extern
void g_binding_unbind (GBinding *binding);
 extern
GBinding *g_object_bind_property (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags);
 extern
GBinding *g_object_bind_property_full (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags,
                                                GBindingTransformFunc transform_to,
                                                GBindingTransformFunc transform_from,
                                                gpointer user_data,
                                                GDestroyNotify notify);
 extern
GBinding *g_object_bind_property_with_closures (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags,
                                                GClosure *transform_to,
                                                GClosure *transform_from);
# 15282 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GBindingGroup GBindingGroup;
 extern
GType g_binding_group_get_type (void) __attribute__ ((__const__));
 extern
GBindingGroup *g_binding_group_new (void);
 extern
gpointer g_binding_group_dup_source (GBindingGroup *self);
 extern
void g_binding_group_set_source (GBindingGroup *self,
                                                   gpointer source);
 extern
void g_binding_group_bind (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags);
 extern
void g_binding_group_bind_full (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags,
                                                   GBindingTransformFunc transform_to,
                                                   GBindingTransformFunc transform_from,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_destroy);
 extern
void g_binding_group_bind_with_closures (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags,
                                                   GClosure *transform_to,
                                                   GClosure *transform_from);
# 15336 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GEnumClass GEnumClass;
typedef struct _GFlagsClass GFlagsClass;
typedef struct _GEnumValue GEnumValue;
typedef struct _GFlagsValue GFlagsValue;
struct _GEnumClass
{
  GTypeClass g_type_class;

  gint minimum;
  gint maximum;
  guint n_values;
  GEnumValue *values;
};
struct _GFlagsClass
{
  GTypeClass g_type_class;


  guint mask;
  guint n_values;
  GFlagsValue *values;
};
struct _GEnumValue
{
  gint value;
  const gchar *value_name;
  const gchar *value_nick;
};
struct _GFlagsValue
{
  guint value;
  const gchar *value_name;
  const gchar *value_nick;
};
 extern
GEnumValue* g_enum_get_value (GEnumClass *enum_class,
       gint value);
 extern
GEnumValue* g_enum_get_value_by_name (GEnumClass *enum_class,
       const gchar *name);
 extern
GEnumValue* g_enum_get_value_by_nick (GEnumClass *enum_class,
       const gchar *nick);
 extern
GFlagsValue* g_flags_get_first_value (GFlagsClass *flags_class,
       guint value);
 extern
GFlagsValue* g_flags_get_value_by_name (GFlagsClass *flags_class,
       const gchar *name);
 extern
GFlagsValue* g_flags_get_value_by_nick (GFlagsClass *flags_class,
       const gchar *nick);
 extern
gchar *g_enum_to_string (GType g_enum_type,
                                                 gint value);
 extern
gchar *g_flags_to_string (GType flags_type,
                                                 guint value);
 extern
void g_value_set_enum (GValue *value,
       gint v_enum);
 extern
gint g_value_get_enum (const GValue *value);
 extern
void g_value_set_flags (GValue *value,
       guint v_flags);
 extern
guint g_value_get_flags (const GValue *value);
 extern
GType g_enum_register_static (const gchar *name,
        const GEnumValue *const_static_values);
 extern
GType g_flags_register_static (const gchar *name,
        const GFlagsValue *const_static_values);
 extern
void g_enum_complete_type_info (GType g_enum_type,
        GTypeInfo *info,
        const GEnumValue *const_values);
 extern
void g_flags_complete_type_info (GType g_flags_type,
        GTypeInfo *info,
        const GFlagsValue *const_values);
# 15456 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern GType g_unicode_type_get_type (void) __attribute__ ((__const__));

 extern GType g_unicode_break_type_get_type (void) __attribute__ ((__const__));

 extern GType g_unicode_script_get_type (void) __attribute__ ((__const__));

 extern GType g_normalize_mode_get_type (void) __attribute__ ((__const__));
# 15541 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GParamSpecChar GParamSpecChar;
typedef struct _GParamSpecUChar GParamSpecUChar;
typedef struct _GParamSpecBoolean GParamSpecBoolean;
typedef struct _GParamSpecInt GParamSpecInt;
typedef struct _GParamSpecUInt GParamSpecUInt;
typedef struct _GParamSpecLong GParamSpecLong;
typedef struct _GParamSpecULong GParamSpecULong;
typedef struct _GParamSpecInt64 GParamSpecInt64;
typedef struct _GParamSpecUInt64 GParamSpecUInt64;
typedef struct _GParamSpecUnichar GParamSpecUnichar;
typedef struct _GParamSpecEnum GParamSpecEnum;
typedef struct _GParamSpecFlags GParamSpecFlags;
typedef struct _GParamSpecFloat GParamSpecFloat;
typedef struct _GParamSpecDouble GParamSpecDouble;
typedef struct _GParamSpecString GParamSpecString;
typedef struct _GParamSpecParam GParamSpecParam;
typedef struct _GParamSpecBoxed GParamSpecBoxed;
typedef struct _GParamSpecPointer GParamSpecPointer;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecObject GParamSpecObject;
typedef struct _GParamSpecOverride GParamSpecOverride;
typedef struct _GParamSpecGType GParamSpecGType;
typedef struct _GParamSpecVariant GParamSpecVariant;
struct _GParamSpecChar
{
  GParamSpec parent_instance;

  gint8 minimum;
  gint8 maximum;
  gint8 default_value;
};
struct _GParamSpecUChar
{
  GParamSpec parent_instance;

  guint8 minimum;
  guint8 maximum;
  guint8 default_value;
};
struct _GParamSpecBoolean
{
  GParamSpec parent_instance;

  gboolean default_value;
};
struct _GParamSpecInt
{
  GParamSpec parent_instance;

  gint minimum;
  gint maximum;
  gint default_value;
};
struct _GParamSpecUInt
{
  GParamSpec parent_instance;

  guint minimum;
  guint maximum;
  guint default_value;
};
struct _GParamSpecLong
{
  GParamSpec parent_instance;

  glong minimum;
  glong maximum;
  glong default_value;
};
struct _GParamSpecULong
{
  GParamSpec parent_instance;

  gulong minimum;
  gulong maximum;
  gulong default_value;
};
struct _GParamSpecInt64
{
  GParamSpec parent_instance;

  gint64 minimum;
  gint64 maximum;
  gint64 default_value;
};
struct _GParamSpecUInt64
{
  GParamSpec parent_instance;

  guint64 minimum;
  guint64 maximum;
  guint64 default_value;
};
struct _GParamSpecUnichar
{
  GParamSpec parent_instance;

  gunichar default_value;
};
struct _GParamSpecEnum
{
  GParamSpec parent_instance;

  GEnumClass *enum_class;
  gint default_value;
};
struct _GParamSpecFlags
{
  GParamSpec parent_instance;

  GFlagsClass *flags_class;
  guint default_value;
};
struct _GParamSpecFloat
{
  GParamSpec parent_instance;

  gfloat minimum;
  gfloat maximum;
  gfloat default_value;
  gfloat epsilon;
};
struct _GParamSpecDouble
{
  GParamSpec parent_instance;

  gdouble minimum;
  gdouble maximum;
  gdouble default_value;
  gdouble epsilon;
};
struct _GParamSpecString
{
  GParamSpec parent_instance;

  gchar *default_value;
  gchar *cset_first;
  gchar *cset_nth;
  gchar substitutor;
  guint null_fold_if_empty : 1;
  guint ensure_non_null : 1;
};
struct _GParamSpecParam
{
  GParamSpec parent_instance;
};
struct _GParamSpecBoxed
{
  GParamSpec parent_instance;
};
struct _GParamSpecPointer
{
  GParamSpec parent_instance;
};
struct _GParamSpecValueArray
{
  GParamSpec parent_instance;
  GParamSpec *element_spec;
  guint fixed_n_elements;
};
struct _GParamSpecObject
{
  GParamSpec parent_instance;
};
struct _GParamSpecOverride
{

  GParamSpec parent_instance;
  GParamSpec *overridden;
};
struct _GParamSpecGType
{
  GParamSpec parent_instance;
  GType is_a_type;
};
struct _GParamSpecVariant
{
  GParamSpec parent_instance;
  GVariantType *type;
  GVariant *default_value;

  gpointer padding[4];
};
 extern
GParamSpec* g_param_spec_char (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint8 minimum,
       gint8 maximum,
       gint8 default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_uchar (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint8 minimum,
       guint8 maximum,
       guint8 default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_boolean (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gboolean default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_int (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint minimum,
       gint maximum,
       gint default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_uint (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint minimum,
       guint maximum,
       guint default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_long (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       glong minimum,
       glong maximum,
       glong default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_ulong (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gulong minimum,
       gulong maximum,
       gulong default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_int64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint64 minimum,
       gint64 maximum,
       gint64 default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_uint64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint64 minimum,
       guint64 maximum,
       guint64 default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_unichar (const gchar *name,
              const gchar *nick,
              const gchar *blurb,
              gunichar default_value,
              GParamFlags flags);
 extern
GParamSpec* g_param_spec_enum (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType enum_type,
       gint default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_flags (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType flags_type,
       guint default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_float (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gfloat minimum,
       gfloat maximum,
       gfloat default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_double (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gdouble minimum,
       gdouble maximum,
       gdouble default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_string (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const gchar *default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_param (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType param_type,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_boxed (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType boxed_type,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_pointer (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_value_array (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamSpec *element_spec,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_object (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType object_type,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_override (const gchar *name,
       GParamSpec *overridden);
 extern
GParamSpec* g_param_spec_gtype (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType is_a_type,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_variant (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const GVariantType *type,
       GVariant *default_value,
       GParamFlags flags);
 extern GType *g_param_spec_types;
# 15893 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSignalGroup GSignalGroup;
 extern
GType g_signal_group_get_type (void) __attribute__ ((__const__));
 extern
GSignalGroup *g_signal_group_new (GType target_type);
 extern
void g_signal_group_set_target (GSignalGroup *self,
                                              gpointer target);
 extern
gpointer g_signal_group_dup_target (GSignalGroup *self);
 extern
void g_signal_group_block (GSignalGroup *self);
 extern
void g_signal_group_unblock (GSignalGroup *self);
 extern
void g_signal_group_connect_closure (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GClosure *closure,
                                              gboolean after);
 extern
void g_signal_group_connect_object (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer object,
                                              GConnectFlags flags);
 extern
void g_signal_group_connect_data (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data,
                                              GClosureNotify notify,
                                              GConnectFlags flags);
 extern
void g_signal_group_connect (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);
 extern
void g_signal_group_connect_after (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);
 extern
void g_signal_group_connect_swapped (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);
# 15948 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
void g_source_set_closure (GSource *source,
      GClosure *closure);
 extern
void g_source_set_dummy_callback (GSource *source);
# 15961 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTypeModule GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;






typedef GTypeModule *GTypeModule_autoptr; typedef GList *GTypeModule_listautoptr; typedef GSList *GTypeModule_slistautoptr; typedef GQueue *GTypeModule_queueautoptr;
# 15969 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 15969 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 15969 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTypeModule (GTypeModule *_ptr) { if (_ptr) (g_object_unref) ((GTypeModule *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTypeModule (GTypeModule **_ptr) { glib_autoptr_clear_GTypeModule (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTypeModule (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTypeModule (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTypeModule (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 15969 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
struct _GTypeModule
{
  GObject parent_instance;
  guint use_count;
  GSList *type_infos;
  GSList *interface_infos;

  gchar *name;
};
struct _GTypeModuleClass
{
  GObjectClass parent_class;

  gboolean (* load) (GTypeModule *module);
  void (* unload) (GTypeModule *module);


  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};
# 16048 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_type_module_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_type_module_use (GTypeModule *module);
 extern
void g_type_module_unuse (GTypeModule *module);
 extern
void g_type_module_set_name (GTypeModule *module,
                                       const gchar *name);
 extern
GType g_type_module_register_type (GTypeModule *module,
                                       GType parent_type,
                                       const gchar *type_name,
                                       const GTypeInfo *type_info,
                                       GTypeFlags flags);
 extern
void g_type_module_add_interface (GTypeModule *module,
                                       GType instance_type,
                                       GType interface_type,
                                       const GInterfaceInfo *interface_info);
 extern
GType g_type_module_register_enum (GTypeModule *module,
                                       const gchar *name,
                                       const GEnumValue *const_static_values);
 extern
GType g_type_module_register_flags (GTypeModule *module,
                                       const gchar *name,
                                       const GFlagsValue *const_static_values);
# 16090 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTypePluginClass GTypePluginClass;
typedef void (*GTypePluginUse) (GTypePlugin *plugin);
typedef void (*GTypePluginUnuse) (GTypePlugin *plugin);
typedef void (*GTypePluginCompleteTypeInfo) (GTypePlugin *plugin,
         GType g_type,
         GTypeInfo *info,
         GTypeValueTable *value_table);
typedef void (*GTypePluginCompleteInterfaceInfo) (GTypePlugin *plugin,
         GType instance_type,
         GType interface_type,
         GInterfaceInfo *info);
struct _GTypePluginClass
{

  GTypeInterface base_iface;


  GTypePluginUse use_plugin;
  GTypePluginUnuse unuse_plugin;
  GTypePluginCompleteTypeInfo complete_type_info;
  GTypePluginCompleteInterfaceInfo complete_interface_info;
};
 extern
GType g_type_plugin_get_type (void) __attribute__ ((__const__));
 extern
void g_type_plugin_use (GTypePlugin *plugin);
 extern
void g_type_plugin_unuse (GTypePlugin *plugin);
 extern
void g_type_plugin_complete_type_info (GTypePlugin *plugin,
       GType g_type,
       GTypeInfo *info,
       GTypeValueTable *value_table);
 extern
void g_type_plugin_complete_interface_info (GTypePlugin *plugin,
       GType instance_type,
       GType interface_type,
       GInterfaceInfo *info);
# 16137 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GValueArray GValueArray;
struct _GValueArray
{
  guint n_values;
  GValue *values;

  guint n_prealloced;
};
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GType g_value_array_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValue* g_value_array_get_nth (GValueArray *value_array,
           guint index_);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_new (guint n_prealloced);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
void g_value_array_free (GValueArray *value_array);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_copy (const GValueArray *value_array);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_prepend (GValueArray *value_array,
           const GValue *value);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_append (GValueArray *value_array,
           const GValue *value);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_insert (GValueArray *value_array,
           guint index_,
           const GValue *value);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_remove (GValueArray *value_array,
           guint index_);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_sort (GValueArray *value_array,
           GCompareFunc compare_func);
__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_sort_with_data (GValueArray *value_array,
           GCompareDataFunc compare_func,
           gpointer user_data);
# 16201 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
__attribute__((__deprecated__("Use '" "g_value_set_schar" "' instead"))) extern
void g_value_set_char (GValue *value,
                                                 gchar v_char);
__attribute__((__deprecated__("Use '" "g_value_get_schar" "' instead"))) extern
gchar g_value_get_char (const GValue *value);
 extern
void g_value_set_schar (GValue *value,
       gint8 v_char);
 extern
gint8 g_value_get_schar (const GValue *value);
 extern
void g_value_set_uchar (GValue *value,
       guchar v_uchar);
 extern
guchar g_value_get_uchar (const GValue *value);
 extern
void g_value_set_boolean (GValue *value,
       gboolean v_boolean);
 extern
gboolean g_value_get_boolean (const GValue *value);
 extern
void g_value_set_int (GValue *value,
       gint v_int);
 extern
gint g_value_get_int (const GValue *value);
 extern
void g_value_set_uint (GValue *value,
       guint v_uint);
 extern
guint g_value_get_uint (const GValue *value);
 extern
void g_value_set_long (GValue *value,
       glong v_long);
 extern
glong g_value_get_long (const GValue *value);
 extern
void g_value_set_ulong (GValue *value,
       gulong v_ulong);
 extern
gulong g_value_get_ulong (const GValue *value);
 extern
void g_value_set_int64 (GValue *value,
       gint64 v_int64);
 extern
gint64 g_value_get_int64 (const GValue *value);
 extern
void g_value_set_uint64 (GValue *value,
       guint64 v_uint64);
 extern
guint64 g_value_get_uint64 (const GValue *value);
 extern
void g_value_set_float (GValue *value,
       gfloat v_float);
 extern
gfloat g_value_get_float (const GValue *value);
 extern
void g_value_set_double (GValue *value,
       gdouble v_double);
 extern
gdouble g_value_get_double (const GValue *value);
 extern
void g_value_set_string (GValue *value,
       const gchar *v_string);
 extern
void g_value_set_static_string (GValue *value,
       const gchar *v_string);
 extern
void g_value_set_interned_string (GValue *value,
         const gchar *v_string);
 extern
const gchar * g_value_get_string (const GValue *value);
 extern
gchar* g_value_dup_string (const GValue *value);
 extern
void g_value_set_pointer (GValue *value,
       gpointer v_pointer);
 extern
gpointer g_value_get_pointer (const GValue *value);
 extern
GType g_gtype_get_type (void);
 extern
void g_value_set_gtype (GValue *value,
       GType v_gtype);
 extern
GType g_value_get_gtype (const GValue *value);
 extern
void g_value_set_variant (GValue *value,
       GVariant *variant);
 extern
void g_value_take_variant (GValue *value,
       GVariant *variant);
 extern
GVariant* g_value_get_variant (const GValue *value);
 extern
GVariant* g_value_dup_variant (const GValue *value);
 extern
GType g_pointer_type_register_static (const gchar *name);
 extern
gchar* g_strdup_value_contents (const GValue *value);
 extern
void g_value_take_string (GValue *value,
       gchar *v_string);
__attribute__((__deprecated__("Use '" "g_value_take_string" "' instead"))) extern
void g_value_set_string_take_ownership (GValue *value,
                                                 gchar *v_string);
typedef gchar* gchararray;





typedef GClosure *GClosure_autoptr; typedef GList *GClosure_listautoptr; typedef GSList *GClosure_slistautoptr; typedef GQueue *GClosure_queueautoptr;
# 16312 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 16312 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 16312 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GClosure (GClosure *_ptr) { if (_ptr) (g_closure_unref) ((GClosure *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GClosure (GClosure **_ptr) { glib_autoptr_clear_GClosure (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GClosure (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_closure_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GClosure (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_closure_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GClosure (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_closure_unref); }
# 16312 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GEnumClass *GEnumClass_autoptr; typedef GList *GEnumClass_listautoptr; typedef GSList *GEnumClass_slistautoptr; typedef GQueue *GEnumClass_queueautoptr;
# 16313 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 16313 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 16313 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEnumClass (GEnumClass *_ptr) { if (_ptr) (g_type_class_unref) ((GEnumClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEnumClass (GEnumClass **_ptr) { glib_autoptr_clear_GEnumClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEnumClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEnumClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEnumClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 16313 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFlagsClass *GFlagsClass_autoptr; typedef GList *GFlagsClass_listautoptr; typedef GSList *GFlagsClass_slistautoptr; typedef GQueue *GFlagsClass_queueautoptr;
# 16314 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 16314 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 16314 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFlagsClass (GFlagsClass *_ptr) { if (_ptr) (g_type_class_unref) ((GFlagsClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFlagsClass (GFlagsClass **_ptr) { glib_autoptr_clear_GFlagsClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFlagsClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFlagsClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFlagsClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 16314 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GObject *GObject_autoptr; typedef GList *GObject_listautoptr; typedef GSList *GObject_slistautoptr; typedef GQueue *GObject_queueautoptr;
# 16315 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 16315 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 16315 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GObject (GObject *_ptr) { if (_ptr) (g_object_unref) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GObject (GObject **_ptr) { glib_autoptr_clear_GObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GObject (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GObject (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 16315 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GInitiallyUnowned *GInitiallyUnowned_autoptr; typedef GList *GInitiallyUnowned_listautoptr; typedef GSList *GInitiallyUnowned_slistautoptr; typedef GQueue *GInitiallyUnowned_queueautoptr;
# 16316 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 16316 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 16316 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInitiallyUnowned (GInitiallyUnowned *_ptr) { if (_ptr) (g_object_unref) ((GInitiallyUnowned *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInitiallyUnowned (GInitiallyUnowned **_ptr) { glib_autoptr_clear_GInitiallyUnowned (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInitiallyUnowned (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInitiallyUnowned (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInitiallyUnowned (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 16316 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GParamSpec *GParamSpec_autoptr; typedef GList *GParamSpec_listautoptr; typedef GSList *GParamSpec_slistautoptr; typedef GQueue *GParamSpec_queueautoptr;
# 16317 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 16317 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 16317 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GParamSpec (GParamSpec *_ptr) { if (_ptr) (g_param_spec_unref) ((GParamSpec *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GParamSpec (GParamSpec **_ptr) { glib_autoptr_clear_GParamSpec (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GParamSpec (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_param_spec_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GParamSpec (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_param_spec_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GParamSpec (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_param_spec_unref); }
# 16317 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTypeClass *GTypeClass_autoptr; typedef GList *GTypeClass_listautoptr; typedef GSList *GTypeClass_slistautoptr; typedef GQueue *GTypeClass_queueautoptr;
# 16318 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 16318 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 16318 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTypeClass (GTypeClass *_ptr) { if (_ptr) (g_type_class_unref) ((GTypeClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTypeClass (GTypeClass **_ptr) { glib_autoptr_clear_GTypeClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTypeClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTypeClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTypeClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 16318 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 16319 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 16319 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GValue (GValue *_ptr) { (g_value_unset) (_ptr); }
# 16319 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 17198 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum {
  G_APP_INFO_CREATE_NONE = 0,
  G_APP_INFO_CREATE_NEEDS_TERMINAL = (1 << 0),
  G_APP_INFO_CREATE_SUPPORTS_URIS = (1 << 1),
  G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = (1 << 2)
} GAppInfoCreateFlags;
typedef enum {
  G_CONVERTER_NO_FLAGS = 0,
  G_CONVERTER_INPUT_AT_END = (1 << 0),
  G_CONVERTER_FLUSH = (1 << 1)
} GConverterFlags;
typedef enum {
  G_CONVERTER_ERROR = 0,
  G_CONVERTER_CONVERTED = 1,
  G_CONVERTER_FINISHED = 2,
  G_CONVERTER_FLUSHED = 3
} GConverterResult;
typedef enum {
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
} GDataStreamByteOrder;
typedef enum {
  G_DATA_STREAM_NEWLINE_TYPE_LF,
  G_DATA_STREAM_NEWLINE_TYPE_CR,
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
  G_DATA_STREAM_NEWLINE_TYPE_ANY
} GDataStreamNewlineType;
typedef enum {
  G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
  G_FILE_ATTRIBUTE_TYPE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
  G_FILE_ATTRIBUTE_TYPE_UINT32,
  G_FILE_ATTRIBUTE_TYPE_INT32,
  G_FILE_ATTRIBUTE_TYPE_UINT64,
  G_FILE_ATTRIBUTE_TYPE_INT64,
  G_FILE_ATTRIBUTE_TYPE_OBJECT,
  G_FILE_ATTRIBUTE_TYPE_STRINGV
} GFileAttributeType;
typedef enum {
  G_FILE_ATTRIBUTE_INFO_NONE = 0,
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = (1 << 0),
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = (1 << 1)
} GFileAttributeInfoFlags;
typedef enum {
  G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
  G_FILE_ATTRIBUTE_STATUS_SET,
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
} GFileAttributeStatus;
typedef enum {
  G_FILE_QUERY_INFO_NONE = 0,
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (1 << 0)
} GFileQueryInfoFlags;
typedef enum {
  G_FILE_CREATE_NONE = 0,
  G_FILE_CREATE_PRIVATE = (1 << 0),
  G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1)
} GFileCreateFlags;
typedef enum {
  G_FILE_MEASURE_NONE = 0,
  G_FILE_MEASURE_REPORT_ANY_ERROR = (1 << 1),
  G_FILE_MEASURE_APPARENT_SIZE = (1 << 2),
  G_FILE_MEASURE_NO_XDEV = (1 << 3)
} GFileMeasureFlags;
typedef enum {
  G_MOUNT_MOUNT_NONE = 0
} GMountMountFlags;
typedef enum {
  G_MOUNT_UNMOUNT_NONE = 0,
  G_MOUNT_UNMOUNT_FORCE = (1 << 0)
} GMountUnmountFlags;
typedef enum {
  G_DRIVE_START_NONE = 0
} GDriveStartFlags;
typedef enum {
  G_DRIVE_START_STOP_TYPE_UNKNOWN,
  G_DRIVE_START_STOP_TYPE_SHUTDOWN,
  G_DRIVE_START_STOP_TYPE_NETWORK,
  G_DRIVE_START_STOP_TYPE_MULTIDISK,
  G_DRIVE_START_STOP_TYPE_PASSWORD
} GDriveStartStopType;
typedef enum {
  G_FILE_COPY_NONE = 0,
  G_FILE_COPY_OVERWRITE = (1 << 0),
  G_FILE_COPY_BACKUP = (1 << 1),
  G_FILE_COPY_NOFOLLOW_SYMLINKS = (1 << 2),
  G_FILE_COPY_ALL_METADATA = (1 << 3),
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (1 << 4),
  G_FILE_COPY_TARGET_DEFAULT_PERMS = (1 << 5)
} GFileCopyFlags;
typedef enum {
  G_FILE_MONITOR_NONE = 0,
  G_FILE_MONITOR_WATCH_MOUNTS = (1 << 0),
  G_FILE_MONITOR_SEND_MOVED = (1 << 1),
  G_FILE_MONITOR_WATCH_HARD_LINKS = (1 << 2),
  G_FILE_MONITOR_WATCH_MOVES = (1 << 3)
} GFileMonitorFlags;
typedef enum {
  G_FILE_TYPE_UNKNOWN = 0,
  G_FILE_TYPE_REGULAR,
  G_FILE_TYPE_DIRECTORY,
  G_FILE_TYPE_SYMBOLIC_LINK,
  G_FILE_TYPE_SPECIAL,
  G_FILE_TYPE_SHORTCUT,
  G_FILE_TYPE_MOUNTABLE
} GFileType;
typedef enum {
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
  G_FILESYSTEM_PREVIEW_TYPE_NEVER
} GFilesystemPreviewType;
typedef enum {
  G_FILE_MONITOR_EVENT_CHANGED,
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
  G_FILE_MONITOR_EVENT_DELETED,
  G_FILE_MONITOR_EVENT_CREATED,
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
  G_FILE_MONITOR_EVENT_UNMOUNTED,
  G_FILE_MONITOR_EVENT_MOVED,
  G_FILE_MONITOR_EVENT_RENAMED,
  G_FILE_MONITOR_EVENT_MOVED_IN,
  G_FILE_MONITOR_EVENT_MOVED_OUT
} GFileMonitorEvent;
typedef enum {
  G_IO_ERROR_FAILED,
  G_IO_ERROR_NOT_FOUND,
  G_IO_ERROR_EXISTS,
  G_IO_ERROR_IS_DIRECTORY,
  G_IO_ERROR_NOT_DIRECTORY,
  G_IO_ERROR_NOT_EMPTY,
  G_IO_ERROR_NOT_REGULAR_FILE,
  G_IO_ERROR_NOT_SYMBOLIC_LINK,
  G_IO_ERROR_NOT_MOUNTABLE_FILE,
  G_IO_ERROR_FILENAME_TOO_LONG,
  G_IO_ERROR_INVALID_FILENAME,
  G_IO_ERROR_TOO_MANY_LINKS,
  G_IO_ERROR_NO_SPACE,
  G_IO_ERROR_INVALID_ARGUMENT,
  G_IO_ERROR_PERMISSION_DENIED,
  G_IO_ERROR_NOT_SUPPORTED,
  G_IO_ERROR_NOT_MOUNTED,
  G_IO_ERROR_ALREADY_MOUNTED,
  G_IO_ERROR_CLOSED,
  G_IO_ERROR_CANCELLED,
  G_IO_ERROR_PENDING,
  G_IO_ERROR_READ_ONLY,
  G_IO_ERROR_CANT_CREATE_BACKUP,
  G_IO_ERROR_WRONG_ETAG,
  G_IO_ERROR_TIMED_OUT,
  G_IO_ERROR_WOULD_RECURSE,
  G_IO_ERROR_BUSY,
  G_IO_ERROR_WOULD_BLOCK,
  G_IO_ERROR_HOST_NOT_FOUND,
  G_IO_ERROR_WOULD_MERGE,
  G_IO_ERROR_FAILED_HANDLED,
  G_IO_ERROR_TOO_MANY_OPEN_FILES,
  G_IO_ERROR_NOT_INITIALIZED,
  G_IO_ERROR_ADDRESS_IN_USE,
  G_IO_ERROR_PARTIAL_INPUT,
  G_IO_ERROR_INVALID_DATA,
  G_IO_ERROR_DBUS_ERROR,
  G_IO_ERROR_HOST_UNREACHABLE,
  G_IO_ERROR_NETWORK_UNREACHABLE,
  G_IO_ERROR_CONNECTION_REFUSED,
  G_IO_ERROR_PROXY_FAILED,
  G_IO_ERROR_PROXY_AUTH_FAILED,
  G_IO_ERROR_PROXY_NEED_AUTH,
  G_IO_ERROR_PROXY_NOT_ALLOWED,
  G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_CONNECTION_CLOSED = G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_NOT_CONNECTED,
  G_IO_ERROR_MESSAGE_TOO_LARGE,
  G_IO_ERROR_NO_SUCH_DEVICE ,
} GIOErrorEnum;
typedef enum {
  G_ASK_PASSWORD_NEED_PASSWORD = (1 << 0),
  G_ASK_PASSWORD_NEED_USERNAME = (1 << 1),
  G_ASK_PASSWORD_NEED_DOMAIN = (1 << 2),
  G_ASK_PASSWORD_SAVING_SUPPORTED = (1 << 3),
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = (1 << 4),
  G_ASK_PASSWORD_TCRYPT = (1 << 5),
} GAskPasswordFlags;
typedef enum {
  G_PASSWORD_SAVE_NEVER,
  G_PASSWORD_SAVE_FOR_SESSION,
  G_PASSWORD_SAVE_PERMANENTLY
} GPasswordSave;
typedef enum {
  G_MOUNT_OPERATION_HANDLED,
  G_MOUNT_OPERATION_ABORTED,
  G_MOUNT_OPERATION_UNHANDLED
} GMountOperationResult;
typedef enum {
  G_OUTPUT_STREAM_SPLICE_NONE = 0,
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = (1 << 0),
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = (1 << 1)
} GOutputStreamSpliceFlags;
typedef enum {
  G_IO_STREAM_SPLICE_NONE = 0,
  G_IO_STREAM_SPLICE_CLOSE_STREAM1 = (1 << 0),
  G_IO_STREAM_SPLICE_CLOSE_STREAM2 = (1 << 1),
  G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = (1 << 2)
} GIOStreamSpliceFlags;
typedef enum {
  G_EMBLEM_ORIGIN_UNKNOWN,
  G_EMBLEM_ORIGIN_DEVICE,
  G_EMBLEM_ORIGIN_LIVEMETADATA,
  G_EMBLEM_ORIGIN_TAG
} GEmblemOrigin;
typedef enum {
  G_RESOLVER_ERROR_NOT_FOUND,
  G_RESOLVER_ERROR_TEMPORARY_FAILURE,
  G_RESOLVER_ERROR_INTERNAL
} GResolverError;
typedef enum {
  G_RESOLVER_RECORD_SRV = 1,
  G_RESOLVER_RECORD_MX,
  G_RESOLVER_RECORD_TXT,
  G_RESOLVER_RECORD_SOA,
  G_RESOLVER_RECORD_NS
} GResolverRecordType;
typedef enum {
  G_RESOURCE_ERROR_NOT_FOUND,
  G_RESOURCE_ERROR_INTERNAL
} GResourceError;
typedef enum {
  G_RESOURCE_FLAGS_NONE = 0,
  G_RESOURCE_FLAGS_COMPRESSED = (1<<0)
} GResourceFlags;
typedef enum {
  G_RESOURCE_LOOKUP_FLAGS_NONE = 0
} GResourceLookupFlags;
typedef enum {
  G_SOCKET_FAMILY_INVALID,
  G_SOCKET_FAMILY_UNIX = 1,
  G_SOCKET_FAMILY_IPV4 = 2,
  G_SOCKET_FAMILY_IPV6 = 30
} GSocketFamily;
typedef enum
{
  G_SOCKET_TYPE_INVALID,
  G_SOCKET_TYPE_STREAM,
  G_SOCKET_TYPE_DATAGRAM,
  G_SOCKET_TYPE_SEQPACKET
} GSocketType;
typedef enum
{
  G_SOCKET_MSG_NONE,
  G_SOCKET_MSG_OOB = 1,
  G_SOCKET_MSG_PEEK = 2,
  G_SOCKET_MSG_DONTROUTE = 4
} GSocketMsgFlags;
typedef enum {
  G_SOCKET_PROTOCOL_UNKNOWN = -1,
  G_SOCKET_PROTOCOL_DEFAULT = 0,
  G_SOCKET_PROTOCOL_TCP = 6,
  G_SOCKET_PROTOCOL_UDP = 17,
  G_SOCKET_PROTOCOL_SCTP = 132
} GSocketProtocol;
typedef enum {
  G_ZLIB_COMPRESSOR_FORMAT_ZLIB,
  G_ZLIB_COMPRESSOR_FORMAT_GZIP,
  G_ZLIB_COMPRESSOR_FORMAT_RAW
} GZlibCompressorFormat;
typedef enum {
  G_UNIX_SOCKET_ADDRESS_INVALID,
  G_UNIX_SOCKET_ADDRESS_ANONYMOUS,
  G_UNIX_SOCKET_ADDRESS_PATH,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
} GUnixSocketAddressType;
typedef enum
{
  G_BUS_TYPE_STARTER = -1,
  G_BUS_TYPE_NONE = 0,
  G_BUS_TYPE_SYSTEM = 1,
  G_BUS_TYPE_SESSION = 2
} GBusType;
typedef enum
{
  G_BUS_NAME_OWNER_FLAGS_NONE = 0,
  G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = (1<<0),
  G_BUS_NAME_OWNER_FLAGS_REPLACE = (1<<1),
  G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = (1<<2)
} GBusNameOwnerFlags;
typedef enum
{
  G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
  G_BUS_NAME_WATCHER_FLAGS_AUTO_START = (1<<0)
} GBusNameWatcherFlags;
typedef enum
{
  G_DBUS_PROXY_FLAGS_NONE = 0,
  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = (1<<0),
  G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = (1<<1),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = (1<<2),
  G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = (1<<3),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = (1<<4),
  G_DBUS_PROXY_FLAGS_NO_MATCH_RULE = (1<<5)
} GDBusProxyFlags;
typedef enum
{

  G_DBUS_ERROR_FAILED,
  G_DBUS_ERROR_NO_MEMORY,
  G_DBUS_ERROR_SERVICE_UNKNOWN,
  G_DBUS_ERROR_NAME_HAS_NO_OWNER,
  G_DBUS_ERROR_NO_REPLY,
  G_DBUS_ERROR_IO_ERROR,
  G_DBUS_ERROR_BAD_ADDRESS,
  G_DBUS_ERROR_NOT_SUPPORTED,
  G_DBUS_ERROR_LIMITS_EXCEEDED,
  G_DBUS_ERROR_ACCESS_DENIED,
  G_DBUS_ERROR_AUTH_FAILED,
  G_DBUS_ERROR_NO_SERVER,
  G_DBUS_ERROR_TIMEOUT,
  G_DBUS_ERROR_NO_NETWORK,
  G_DBUS_ERROR_ADDRESS_IN_USE,
  G_DBUS_ERROR_DISCONNECTED,
  G_DBUS_ERROR_INVALID_ARGS,
  G_DBUS_ERROR_FILE_NOT_FOUND,
  G_DBUS_ERROR_FILE_EXISTS,
  G_DBUS_ERROR_UNKNOWN_METHOD,
  G_DBUS_ERROR_TIMED_OUT,
  G_DBUS_ERROR_MATCH_RULE_NOT_FOUND,
  G_DBUS_ERROR_MATCH_RULE_INVALID,
  G_DBUS_ERROR_SPAWN_EXEC_FAILED,
  G_DBUS_ERROR_SPAWN_FORK_FAILED,
  G_DBUS_ERROR_SPAWN_CHILD_EXITED,
  G_DBUS_ERROR_SPAWN_CHILD_SIGNALED,
  G_DBUS_ERROR_SPAWN_FAILED,
  G_DBUS_ERROR_SPAWN_SETUP_FAILED,
  G_DBUS_ERROR_SPAWN_CONFIG_INVALID,
  G_DBUS_ERROR_SPAWN_SERVICE_INVALID,
  G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND,
  G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID,
  G_DBUS_ERROR_SPAWN_FILE_INVALID,
  G_DBUS_ERROR_SPAWN_NO_MEMORY,
  G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN,
  G_DBUS_ERROR_INVALID_SIGNATURE,
  G_DBUS_ERROR_INVALID_FILE_CONTENT,
  G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN,
  G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN,
  G_DBUS_ERROR_OBJECT_PATH_IN_USE,
  G_DBUS_ERROR_UNKNOWN_OBJECT,
  G_DBUS_ERROR_UNKNOWN_INTERFACE,
  G_DBUS_ERROR_UNKNOWN_PROPERTY,
  G_DBUS_ERROR_PROPERTY_READ_ONLY
} GDBusError;
typedef enum {
  G_DBUS_CONNECTION_FLAGS_NONE = 0,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = (1<<0),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = (1<<1),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<2),
  G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = (1<<3),
  G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = (1<<4),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = (1<<5),
  G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE = (1<<6)
} GDBusConnectionFlags;
typedef enum {
  G_DBUS_CAPABILITY_FLAGS_NONE = 0,
  G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = (1<<0)
} GDBusCapabilityFlags;
typedef enum {
  G_DBUS_CALL_FLAGS_NONE = 0,
  G_DBUS_CALL_FLAGS_NO_AUTO_START = (1<<0),
  G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<1)
} GDBusCallFlags;
typedef enum {
  G_DBUS_MESSAGE_TYPE_INVALID,
  G_DBUS_MESSAGE_TYPE_METHOD_CALL,
  G_DBUS_MESSAGE_TYPE_METHOD_RETURN,
  G_DBUS_MESSAGE_TYPE_ERROR,
  G_DBUS_MESSAGE_TYPE_SIGNAL
} GDBusMessageType;
typedef enum {
  G_DBUS_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = (1<<0),
  G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = (1<<1),
  G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<2)
} GDBusMessageFlags;
typedef enum {
  G_DBUS_MESSAGE_HEADER_FIELD_INVALID,
  G_DBUS_MESSAGE_HEADER_FIELD_PATH,
  G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE,
  G_DBUS_MESSAGE_HEADER_FIELD_MEMBER,
  G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME,
  G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL,
  G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION,
  G_DBUS_MESSAGE_HEADER_FIELD_SENDER,
  G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE,
  G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS
} GDBusMessageHeaderField;
typedef enum
{
  G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
  G_DBUS_PROPERTY_INFO_FLAGS_READABLE = (1<<0),
  G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = (1<<1)
} GDBusPropertyInfoFlags;
typedef enum
{
  G_DBUS_SUBTREE_FLAGS_NONE = 0,
  G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = (1<<0)
} GDBusSubtreeFlags;
typedef enum
{
  G_DBUS_SERVER_FLAGS_NONE = 0,
  G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = (1<<0),
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<1),
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = (1<<2)
} GDBusServerFlags;
typedef enum
{
  G_DBUS_SIGNAL_FLAGS_NONE = 0,
  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = (1<<0),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = (1<<1),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = (1<<2)
} GDBusSignalFlags;
typedef enum
{
  G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = (1<<0)
} GDBusSendMessageFlags;
typedef enum
{
  G_CREDENTIALS_TYPE_INVALID,
  G_CREDENTIALS_TYPE_LINUX_UCRED,
  G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED,
  G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED,
  G_CREDENTIALS_TYPE_SOLARIS_UCRED,
  G_CREDENTIALS_TYPE_NETBSD_UNPCBID,
  G_CREDENTIALS_TYPE_APPLE_XUCRED,
  G_CREDENTIALS_TYPE_WIN32_PID,
} GCredentialsType;
typedef enum
{
  G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 'B',
  G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 'l'
} GDBusMessageByteOrder;
typedef enum
{
  G_APPLICATION_FLAGS_NONE __attribute__((__deprecated__("Use '" "G_APPLICATION_DEFAULT_FLAGS" "' instead"))),
  G_APPLICATION_DEFAULT_FLAGS = 0,
  G_APPLICATION_IS_SERVICE = (1 << 0),
  G_APPLICATION_IS_LAUNCHER = (1 << 1),
  G_APPLICATION_HANDLES_OPEN = (1 << 2),
  G_APPLICATION_HANDLES_COMMAND_LINE = (1 << 3),
  G_APPLICATION_SEND_ENVIRONMENT = (1 << 4),
  G_APPLICATION_NON_UNIQUE = (1 << 5),
  G_APPLICATION_CAN_OVERRIDE_APP_ID = (1 << 6),
  G_APPLICATION_ALLOW_REPLACEMENT = (1 << 7),
  G_APPLICATION_REPLACE = (1 << 8)
} GApplicationFlags;
typedef enum {
  G_TLS_ERROR_UNAVAILABLE,
  G_TLS_ERROR_MISC,
  G_TLS_ERROR_BAD_CERTIFICATE,
  G_TLS_ERROR_NOT_TLS,
  G_TLS_ERROR_HANDSHAKE,
  G_TLS_ERROR_CERTIFICATE_REQUIRED,
  G_TLS_ERROR_EOF,
  G_TLS_ERROR_INAPPROPRIATE_FALLBACK,
  G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD
} GTlsError;
typedef enum {
  G_TLS_CERTIFICATE_NO_FLAGS = 0,
  G_TLS_CERTIFICATE_UNKNOWN_CA = (1 << 0),
  G_TLS_CERTIFICATE_BAD_IDENTITY = (1 << 1),
  G_TLS_CERTIFICATE_NOT_ACTIVATED = (1 << 2),
  G_TLS_CERTIFICATE_EXPIRED = (1 << 3),
  G_TLS_CERTIFICATE_REVOKED = (1 << 4),
  G_TLS_CERTIFICATE_INSECURE = (1 << 5),
  G_TLS_CERTIFICATE_GENERIC_ERROR = (1 << 6),
  G_TLS_CERTIFICATE_VALIDATE_ALL = 0x007f
} GTlsCertificateFlags;
typedef enum {
  G_TLS_AUTHENTICATION_NONE,
  G_TLS_AUTHENTICATION_REQUESTED,
  G_TLS_AUTHENTICATION_REQUIRED
} GTlsAuthenticationMode;

typedef enum {
  G_TLS_CHANNEL_BINDING_TLS_UNIQUE,
  G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT,
  G_TLS_CHANNEL_BINDING_TLS_EXPORTER ,
} GTlsChannelBindingType;

typedef enum {
  G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED,
  G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE,
  G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE,
  G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED,
  G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR
} GTlsChannelBindingError;
typedef enum {
  G_TLS_REHANDSHAKE_NEVER,
  G_TLS_REHANDSHAKE_SAFELY,
  G_TLS_REHANDSHAKE_UNSAFELY
} GTlsRehandshakeMode __attribute__((__deprecated__));
typedef enum _GTlsPasswordFlags
{
  G_TLS_PASSWORD_NONE = 0,
  G_TLS_PASSWORD_RETRY = 1 << 1,
  G_TLS_PASSWORD_MANY_TRIES = 1 << 2,
  G_TLS_PASSWORD_FINAL_TRY = 1 << 3,
  G_TLS_PASSWORD_PKCS11_USER = 1 << 4,
  G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER = 1 << 5,
  G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC = 1 << 6
} GTlsPasswordFlags;
typedef enum {
  G_TLS_INTERACTION_UNHANDLED,
  G_TLS_INTERACTION_HANDLED,
  G_TLS_INTERACTION_FAILED
} GTlsInteractionResult;
typedef enum
{
  G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
  G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = (1<<0)
} GDBusInterfaceSkeletonFlags;
typedef enum
{
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = (1<<0)
} GDBusObjectManagerClientFlags;
typedef enum {
  G_TLS_DATABASE_VERIFY_NONE = 0
} GTlsDatabaseVerifyFlags;
typedef enum {
  G_TLS_DATABASE_LOOKUP_NONE = 0,
  G_TLS_DATABASE_LOOKUP_KEYPAIR = 1
} GTlsDatabaseLookupFlags;
typedef enum {
  G_TLS_CERTIFICATE_REQUEST_NONE = 0
} GTlsCertificateRequestFlags;
typedef enum {
  G_TLS_PROTOCOL_VERSION_UNKNOWN = 0,
  G_TLS_PROTOCOL_VERSION_SSL_3_0 = 1,
  G_TLS_PROTOCOL_VERSION_TLS_1_0 = 2,
  G_TLS_PROTOCOL_VERSION_TLS_1_1 = 3,
  G_TLS_PROTOCOL_VERSION_TLS_1_2 = 4,
  G_TLS_PROTOCOL_VERSION_TLS_1_3 = 5,
  G_TLS_PROTOCOL_VERSION_DTLS_1_0 = 201,
  G_TLS_PROTOCOL_VERSION_DTLS_1_2 = 202,
} GTlsProtocolVersion;
typedef enum {
  G_IO_MODULE_SCOPE_NONE,
  G_IO_MODULE_SCOPE_BLOCK_DUPLICATES
} GIOModuleScopeFlags;
typedef enum {
  G_SOCKET_CLIENT_RESOLVING,
  G_SOCKET_CLIENT_RESOLVED,
  G_SOCKET_CLIENT_CONNECTING,
  G_SOCKET_CLIENT_CONNECTED,
  G_SOCKET_CLIENT_PROXY_NEGOTIATING,
  G_SOCKET_CLIENT_PROXY_NEGOTIATED,
  G_SOCKET_CLIENT_TLS_HANDSHAKING,
  G_SOCKET_CLIENT_TLS_HANDSHAKED,
  G_SOCKET_CLIENT_COMPLETE
} GSocketClientEvent;
typedef enum {
  G_SOCKET_LISTENER_BINDING,
  G_SOCKET_LISTENER_BOUND,
  G_SOCKET_LISTENER_LISTENING,
  G_SOCKET_LISTENER_LISTENED
} GSocketListenerEvent;
typedef enum {
  G_TEST_DBUS_NONE = 0
} GTestDBusFlags;
typedef enum {
  G_SUBPROCESS_FLAGS_NONE = 0,
  G_SUBPROCESS_FLAGS_STDIN_PIPE = (1u << 0),
  G_SUBPROCESS_FLAGS_STDIN_INHERIT = (1u << 1),
  G_SUBPROCESS_FLAGS_STDOUT_PIPE = (1u << 2),
  G_SUBPROCESS_FLAGS_STDOUT_SILENCE = (1u << 3),
  G_SUBPROCESS_FLAGS_STDERR_PIPE = (1u << 4),
  G_SUBPROCESS_FLAGS_STDERR_SILENCE = (1u << 5),
  G_SUBPROCESS_FLAGS_STDERR_MERGE = (1u << 6),
  G_SUBPROCESS_FLAGS_INHERIT_FDS = (1u << 7),
  G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP = (1u << 8)
} GSubprocessFlags;
typedef enum {
  G_NOTIFICATION_PRIORITY_NORMAL,
  G_NOTIFICATION_PRIORITY_LOW,
  G_NOTIFICATION_PRIORITY_HIGH,
  G_NOTIFICATION_PRIORITY_URGENT
} GNotificationPriority;
typedef enum {
  G_NETWORK_CONNECTIVITY_LOCAL = 1,
  G_NETWORK_CONNECTIVITY_LIMITED = 2,
  G_NETWORK_CONNECTIVITY_PORTAL = 3,
  G_NETWORK_CONNECTIVITY_FULL = 4
} GNetworkConnectivity;
typedef enum {
  G_POLLABLE_RETURN_FAILED = 0,
  G_POLLABLE_RETURN_OK = 1,
  G_POLLABLE_RETURN_WOULD_BLOCK = -G_IO_ERROR_WOULD_BLOCK
} GPollableReturn;
typedef enum {
  G_MEMORY_MONITOR_WARNING_LEVEL_LOW = 50,
  G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM = 100,
  G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = 255
} GMemoryMonitorWarningLevel;



typedef struct _GAppLaunchContext GAppLaunchContext;
typedef struct _GAppInfo GAppInfo;
typedef struct _GAsyncResult GAsyncResult;
typedef struct _GAsyncInitable GAsyncInitable;
typedef struct _GBufferedInputStream GBufferedInputStream;
typedef struct _GBufferedOutputStream GBufferedOutputStream;
typedef struct _GCancellable GCancellable;
typedef struct _GCharsetConverter GCharsetConverter;
typedef struct _GConverter GConverter;
typedef struct _GConverterInputStream GConverterInputStream;
typedef struct _GConverterOutputStream GConverterOutputStream;
typedef struct _GDatagramBased GDatagramBased;
typedef struct _GDataInputStream GDataInputStream;
typedef struct _GSimplePermission GSimplePermission;
typedef struct _GZlibCompressor GZlibCompressor;
typedef struct _GZlibDecompressor GZlibDecompressor;
typedef struct _GSimpleActionGroup GSimpleActionGroup;
typedef struct _GRemoteActionGroup GRemoteActionGroup;
typedef struct _GDBusActionGroup GDBusActionGroup;
typedef struct _GActionMap GActionMap;
typedef struct _GActionGroup GActionGroup;
typedef struct _GPropertyAction GPropertyAction;
typedef struct _GSimpleAction GSimpleAction;
typedef struct _GAction GAction;
typedef struct _GApplication GApplication;
typedef struct _GApplicationCommandLine GApplicationCommandLine;
typedef struct _GSettingsBackend GSettingsBackend;
typedef struct _GSettings GSettings;
typedef struct _GPermission GPermission;
typedef struct _GMenuModel GMenuModel;
typedef struct _GNotification GNotification;
typedef struct _GDrive GDrive;
typedef struct _GFileEnumerator GFileEnumerator;
typedef struct _GFileMonitor GFileMonitor;
typedef struct _GFilterInputStream GFilterInputStream;
typedef struct _GFilterOutputStream GFilterOutputStream;
typedef struct _GFile GFile;
typedef struct _GFileInfo GFileInfo;
typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
typedef struct _GFileAttributeInfo GFileAttributeInfo;
typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
typedef struct _GFileDescriptorBased GFileDescriptorBased;
typedef struct _GFileInputStream GFileInputStream;
typedef struct _GFileOutputStream GFileOutputStream;
typedef struct _GFileIOStream GFileIOStream;
typedef struct _GFileIcon GFileIcon;
typedef struct _GFilenameCompleter GFilenameCompleter;
typedef struct _GIcon GIcon;
typedef struct _GInetAddress GInetAddress;
typedef struct _GInetAddressMask GInetAddressMask;
typedef struct _GInetSocketAddress GInetSocketAddress;
typedef struct _GNativeSocketAddress GNativeSocketAddress;
typedef struct _GInputStream GInputStream;
typedef struct _GInitable GInitable;
typedef struct _GIOModule GIOModule;
typedef struct _GIOExtensionPoint GIOExtensionPoint;
typedef struct _GIOExtension GIOExtension;
typedef struct _GIOSchedulerJob GIOSchedulerJob;
typedef struct _GIOStreamAdapter GIOStreamAdapter;
typedef struct _GLoadableIcon GLoadableIcon;
typedef struct _GBytesIcon GBytesIcon;
typedef struct _GMemoryInputStream GMemoryInputStream;
typedef struct _GMemoryOutputStream GMemoryOutputStream;
typedef struct _GMount GMount;
typedef struct _GMountOperation GMountOperation;
typedef struct _GNetworkAddress GNetworkAddress;
typedef struct _GNetworkMonitor GNetworkMonitor;
typedef struct _GNetworkService GNetworkService;
typedef struct _GOutputStream GOutputStream;
typedef struct _GIOStream GIOStream;
typedef struct _GSimpleIOStream GSimpleIOStream;
typedef struct _GPollableInputStream GPollableInputStream;
typedef struct _GPollableOutputStream GPollableOutputStream;
typedef struct _GResolver GResolver;
typedef struct _GResource GResource;
typedef struct _GSeekable GSeekable;
typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
typedef struct _GSocket GSocket;
typedef struct _GSocketControlMessage GSocketControlMessage;
typedef struct _GSocketClient GSocketClient;
typedef struct _GSocketConnection GSocketConnection;
typedef struct _GSocketListener GSocketListener;
typedef struct _GSocketService GSocketService;
typedef struct _GSocketAddress GSocketAddress;
typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
typedef struct _GSocketConnectable GSocketConnectable;
typedef struct _GSrvTarget GSrvTarget;
typedef struct _GTask GTask;
typedef struct _GTcpConnection GTcpConnection;
typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
typedef struct _GThreadedSocketService GThreadedSocketService;
typedef struct _GDtlsConnection GDtlsConnection;
typedef struct _GDtlsClientConnection GDtlsClientConnection;
typedef struct _GDtlsServerConnection GDtlsServerConnection;
typedef struct _GThemedIcon GThemedIcon;
typedef struct _GTlsCertificate GTlsCertificate;
typedef struct _GTlsClientConnection GTlsClientConnection;
typedef struct _GTlsConnection GTlsConnection;
typedef struct _GTlsDatabase GTlsDatabase;
typedef struct _GTlsFileDatabase GTlsFileDatabase;
typedef struct _GTlsInteraction GTlsInteraction;
typedef struct _GTlsPassword GTlsPassword;
typedef struct _GTlsServerConnection GTlsServerConnection;
typedef struct _GVfs GVfs;
typedef struct _GProxyResolver GProxyResolver;
typedef struct _GProxy GProxy;
typedef struct _GProxyAddress GProxyAddress;
typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;
typedef struct _GVolume GVolume;
typedef struct _GVolumeMonitor GVolumeMonitor;
typedef void (*GAsyncReadyCallback) (GObject *source_object,
         GAsyncResult *res,
         gpointer user_data);
typedef void (*GFileProgressCallback) (goffset current_num_bytes,
                                       goffset total_num_bytes,
                                       gpointer user_data);
typedef gboolean (* GFileReadMoreCallback) (const char *file_contents,
                                            goffset file_size,
                                            gpointer user_data);
typedef void (* GFileMeasureProgressCallback) (gboolean reporting,
                                               guint64 current_size,
                                               guint64 num_dirs,
                                               guint64 num_files,
                                               gpointer user_data);
typedef gboolean (*GIOSchedulerJobFunc) (GIOSchedulerJob *job,
      GCancellable *cancellable,
      gpointer user_data);
typedef void (*GSimpleAsyncThreadFunc) (GSimpleAsyncResult *res,
                                        GObject *object,
                                        GCancellable *cancellable);
typedef gboolean (*GSocketSourceFunc) (GSocket *socket,
           GIOCondition condition,
           gpointer user_data);
typedef gboolean (*GDatagramBasedSourceFunc) (GDatagramBased *datagram_based,
                                              GIOCondition condition,
                                              gpointer user_data);
typedef struct _GInputVector GInputVector;
struct _GInputVector {
  gpointer buffer;
  gsize size;
};
typedef struct _GInputMessage GInputMessage;
struct _GInputMessage {
  GSocketAddress **address;
  GInputVector *vectors;
  guint num_vectors;
  gsize bytes_received;
  gint flags;
  GSocketControlMessage ***control_messages;
  guint *num_control_messages;
};
typedef struct _GOutputVector GOutputVector;
struct _GOutputVector {
  gconstpointer buffer;
  gsize size;
};
typedef struct _GOutputMessage GOutputMessage;
struct _GOutputMessage {
  GSocketAddress *address;
  GOutputVector *vectors;
  guint num_vectors;
  guint bytes_sent;
  GSocketControlMessage **control_messages;
  guint num_control_messages;
};
typedef struct _GCredentials GCredentials;
typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
typedef struct _GUnixFDList GUnixFDList;
typedef struct _GDBusMessage GDBusMessage;
typedef struct _GDBusConnection GDBusConnection;
typedef struct _GDBusProxy GDBusProxy;
typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
typedef struct _GDBusServer GDBusServer;
typedef struct _GDBusAuthObserver GDBusAuthObserver;
typedef struct _GDBusErrorEntry GDBusErrorEntry;
typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
typedef struct _GDBusSubtreeVTable GDBusSubtreeVTable;
typedef struct _GDBusAnnotationInfo GDBusAnnotationInfo;
typedef struct _GDBusArgInfo GDBusArgInfo;
typedef struct _GDBusMethodInfo GDBusMethodInfo;
typedef struct _GDBusSignalInfo GDBusSignalInfo;
typedef struct _GDBusPropertyInfo GDBusPropertyInfo;
typedef struct _GDBusInterfaceInfo GDBusInterfaceInfo;
typedef struct _GDBusNodeInfo GDBusNodeInfo;
typedef gboolean (*GCancellableSourceFunc) (GCancellable *cancellable,
         gpointer user_data);
typedef gboolean (*GPollableSourceFunc) (GObject *pollable_stream,
      gpointer user_data);
typedef struct _GDBusInterface GDBusInterface;
typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
typedef struct _GDBusObject GDBusObject;
typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
typedef struct _GDBusObjectProxy GDBusObjectProxy;
typedef struct _GDBusObjectManager GDBusObjectManager;
typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
typedef GType (*GDBusProxyTypeFunc) (GDBusObjectManagerClient *manager,
                                     const gchar *object_path,
                                     const gchar *interface_name,
                                     gpointer user_data);
typedef struct _GTestDBus GTestDBus;
typedef struct _GSubprocess GSubprocess;
typedef struct _GSubprocessLauncher GSubprocessLauncher;
# 18022 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GActionInterface GActionInterface;
struct _GActionInterface
{
  GTypeInterface g_iface;

  const gchar * (* get_name) (GAction *action);
  const GVariantType * (* get_parameter_type) (GAction *action);
  const GVariantType * (* get_state_type) (GAction *action);
  GVariant * (* get_state_hint) (GAction *action);
  gboolean (* get_enabled) (GAction *action);
  GVariant * (* get_state) (GAction *action);
  void (* change_state) (GAction *action,
                                                 GVariant *value);
  void (* activate) (GAction *action,
                                                 GVariant *parameter);
};
 extern
GType g_action_get_type (void) __attribute__ ((__const__));
 extern
const gchar * g_action_get_name (GAction *action);
 extern
const GVariantType * g_action_get_parameter_type (GAction *action);
 extern
const GVariantType * g_action_get_state_type (GAction *action);
 extern
GVariant * g_action_get_state_hint (GAction *action);
 extern
gboolean g_action_get_enabled (GAction *action);
 extern
GVariant * g_action_get_state (GAction *action);
 extern
void g_action_change_state (GAction *action,
                                                                         GVariant *value);
 extern
void g_action_activate (GAction *action,
                                                                         GVariant *parameter);
 extern
gboolean g_action_name_is_valid (const gchar *action_name);
 extern
gboolean g_action_parse_detailed_name (const gchar *detailed_name,
                                                                         gchar **action_name,
                                                                         GVariant **target_value,
                                                                         GError **error);
 extern
gchar * g_action_print_detailed_name (const gchar *action_name,
                                                                         GVariant *target_value);
# 18083 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GActionGroupInterface GActionGroupInterface;
struct _GActionGroupInterface
{
  GTypeInterface g_iface;

  gboolean (* has_action) (GActionGroup *action_group,
                                                        const gchar *action_name);
  gchar ** (* list_actions) (GActionGroup *action_group);
  gboolean (* get_action_enabled) (GActionGroup *action_group,
                                                        const gchar *action_name);
  const GVariantType * (* get_action_parameter_type) (GActionGroup *action_group,
                                                        const gchar *action_name);
  const GVariantType * (* get_action_state_type) (GActionGroup *action_group,
                                                        const gchar *action_name);
  GVariant * (* get_action_state_hint) (GActionGroup *action_group,
                                                        const gchar *action_name);
  GVariant * (* get_action_state) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* change_action_state) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *value);
  void (* activate_action) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *parameter);

  void (* action_added) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* action_removed) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* action_enabled_changed) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        gboolean enabled);
  void (* action_state_changed) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *state);

  gboolean (* query_action) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        gboolean *enabled,
                                                        const GVariantType **parameter_type,
                                                        const GVariantType **state_type,
                                                        GVariant **state_hint,
                                                        GVariant **state);
};
 extern
GType g_action_group_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_action_group_has_action (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
gchar ** g_action_group_list_actions (GActionGroup *action_group);
 extern
const GVariantType * g_action_group_get_action_parameter_type (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
const GVariantType * g_action_group_get_action_state_type (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
GVariant * g_action_group_get_action_state_hint (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
gboolean g_action_group_get_action_enabled (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
GVariant * g_action_group_get_action_state (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
void g_action_group_change_action_state (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *value);
 extern
void g_action_group_activate_action (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *parameter);
 extern
void g_action_group_action_added (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
void g_action_group_action_removed (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
void g_action_group_action_enabled_changed (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         gboolean enabled);
 extern
void g_action_group_action_state_changed (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *state);
 extern
gboolean g_action_group_query_action (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         gboolean *enabled,
                                                                         const GVariantType **parameter_type,
                                                                         const GVariantType **state_type,
                                                                         GVariant **state_hint,
                                                                         GVariant **state);
# 18187 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
guint g_dbus_connection_export_action_group (GDBusConnection *connection,
                                                                         const gchar *object_path,
                                                                         GActionGroup *action_group,
                                                                         GError **error);
 extern
void g_dbus_connection_unexport_action_group (GDBusConnection *connection,
                                                                         guint export_id);
# 18210 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GActionMapInterface GActionMapInterface;
typedef struct _GActionEntry GActionEntry;
struct _GActionMapInterface
{
  GTypeInterface g_iface;
  GAction * (* lookup_action) (GActionMap *action_map,
                               const gchar *action_name);
  void (* add_action) (GActionMap *action_map,
                               GAction *action);
  void (* remove_action) (GActionMap *action_map,
                               const gchar *action_name);
};
struct _GActionEntry
{
  const gchar *name;
  void (* activate) (GSimpleAction *action,
                     GVariant *parameter,
                     gpointer user_data);
  const gchar *parameter_type;
  const gchar *state;
  void (* change_state) (GSimpleAction *action,
                         GVariant *value,
                         gpointer user_data);

  gsize padding[3];
};
 extern
GType g_action_map_get_type (void) __attribute__ ((__const__));
 extern
GAction * g_action_map_lookup_action (GActionMap *action_map,
                                                                         const gchar *action_name);
 extern
void g_action_map_add_action (GActionMap *action_map,
                                                                         GAction *action);
 extern
void g_action_map_remove_action (GActionMap *action_map,
                                                                         const gchar *action_name);
 extern
void g_action_map_add_action_entries (GActionMap *action_map,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries,
                                                                         gpointer user_data);
# 18270 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GAppLaunchContextClass GAppLaunchContextClass;
typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;
typedef struct _GAppInfoIface GAppInfoIface;
struct _GAppInfoIface
{
  GTypeInterface g_iface;

  GAppInfo * (* dup) (GAppInfo *appinfo);
  gboolean (* equal) (GAppInfo *appinfo1,
                                                 GAppInfo *appinfo2);
  const char * (* get_id) (GAppInfo *appinfo);
  const char * (* get_name) (GAppInfo *appinfo);
  const char * (* get_description) (GAppInfo *appinfo);
  const char * (* get_executable) (GAppInfo *appinfo);
  GIcon * (* get_icon) (GAppInfo *appinfo);
  gboolean (* launch) (GAppInfo *appinfo,
                                                 GList *files,
                                                 GAppLaunchContext *context,
                                                 GError **error);
  gboolean (* supports_uris) (GAppInfo *appinfo);
  gboolean (* supports_files) (GAppInfo *appinfo);
  gboolean (* launch_uris) (GAppInfo *appinfo,
                                                 GList *uris,
                                                 GAppLaunchContext *context,
                                                 GError **error);
  gboolean (* should_show) (GAppInfo *appinfo);

  gboolean (* set_as_default_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* set_as_default_for_extension) (GAppInfo *appinfo,
                                                 const char *extension,
                                                 GError **error);
  gboolean (* add_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_remove_supports_type) (GAppInfo *appinfo);
  gboolean (* remove_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_delete) (GAppInfo *appinfo);
  gboolean (* do_delete) (GAppInfo *appinfo);
  const char * (* get_commandline) (GAppInfo *appinfo);
  const char * (* get_display_name) (GAppInfo *appinfo);
  gboolean (* set_as_last_used_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  const char ** (* get_supported_types) (GAppInfo *appinfo);
  void (* launch_uris_async) (GAppInfo *appinfo,
                                                 GList *uris,
                                                 GAppLaunchContext *context,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
  gboolean (* launch_uris_finish) (GAppInfo *appinfo,
                                                 GAsyncResult *result,
                                                 GError **error);
};
 extern
GType g_app_info_get_type (void) __attribute__ ((__const__));
 extern
GAppInfo * g_app_info_create_from_commandline (const char *commandline,
                                                     const char *application_name,
                                                     GAppInfoCreateFlags flags,
                                                     GError **error);
 extern
GAppInfo * g_app_info_dup (GAppInfo *appinfo);
 extern
gboolean g_app_info_equal (GAppInfo *appinfo1,
                                                     GAppInfo *appinfo2);
 extern
const char *g_app_info_get_id (GAppInfo *appinfo);
 extern
const char *g_app_info_get_name (GAppInfo *appinfo);
 extern
const char *g_app_info_get_display_name (GAppInfo *appinfo);
 extern
const char *g_app_info_get_description (GAppInfo *appinfo);
 extern
const char *g_app_info_get_executable (GAppInfo *appinfo);
 extern
const char *g_app_info_get_commandline (GAppInfo *appinfo);
 extern
GIcon * g_app_info_get_icon (GAppInfo *appinfo);
 extern
gboolean g_app_info_launch (GAppInfo *appinfo,
                                                     GList *files,
                                                     GAppLaunchContext *context,
                                                     GError **error);
 extern
gboolean g_app_info_supports_uris (GAppInfo *appinfo);
 extern
gboolean g_app_info_supports_files (GAppInfo *appinfo);
 extern
gboolean g_app_info_launch_uris (GAppInfo *appinfo,
                                                     GList *uris,
                                                     GAppLaunchContext *context,
                                                     GError **error);
 extern
void g_app_info_launch_uris_async (GAppInfo *appinfo,
                                                     GList *uris,
                                                     GAppLaunchContext *context,
                                                     GCancellable *cancellable,
                                                     GAsyncReadyCallback callback,
                                                     gpointer user_data);
 extern
gboolean g_app_info_launch_uris_finish (GAppInfo *appinfo,
                                                     GAsyncResult *result,
                                                     GError **error);
 extern
gboolean g_app_info_should_show (GAppInfo *appinfo);
 extern
gboolean g_app_info_set_as_default_for_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
 extern
gboolean g_app_info_set_as_default_for_extension (GAppInfo *appinfo,
                                                     const char *extension,
                                                     GError **error);
 extern
gboolean g_app_info_add_supports_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
 extern
gboolean g_app_info_can_remove_supports_type (GAppInfo *appinfo);
 extern
gboolean g_app_info_remove_supports_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
 extern
const char **g_app_info_get_supported_types (GAppInfo *appinfo);
 extern
gboolean g_app_info_can_delete (GAppInfo *appinfo);
 extern
gboolean g_app_info_delete (GAppInfo *appinfo);
 extern
gboolean g_app_info_set_as_last_used_for_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
 extern
GList * g_app_info_get_all (void);
 extern
GList * g_app_info_get_all_for_type (const char *content_type);
 extern
GList * g_app_info_get_recommended_for_type (const gchar *content_type);
 extern
GList * g_app_info_get_fallback_for_type (const gchar *content_type);
 extern
void g_app_info_reset_type_associations (const char *content_type);
 extern
GAppInfo *g_app_info_get_default_for_type (const char *content_type,
                                                  gboolean must_support_uris);
 extern
void g_app_info_get_default_for_type_async (const char *content_type,
                                                  gboolean must_support_uris,
                                                  GCancellable *cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer user_data);
 extern
GAppInfo *g_app_info_get_default_for_type_finish (GAsyncResult *result,
                                                  GError **error);
 extern
GAppInfo *g_app_info_get_default_for_uri_scheme (const char *uri_scheme);
 extern
void g_app_info_get_default_for_uri_scheme_async (const char *uri_scheme,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
 extern
GAppInfo *g_app_info_get_default_for_uri_scheme_finish (GAsyncResult *result,
                                                        GError **error);
 extern
gboolean g_app_info_launch_default_for_uri (const char *uri,
                                                  GAppLaunchContext *context,
                                                  GError **error);
 extern
void g_app_info_launch_default_for_uri_async (const char *uri,
                                                    GAppLaunchContext *context,
                                                    GCancellable *cancellable,
                                                    GAsyncReadyCallback callback,
                                                    gpointer user_data);
 extern
gboolean g_app_info_launch_default_for_uri_finish (GAsyncResult *result,
                                                    GError **error);
struct _GAppLaunchContext
{
  GObject parent_instance;

  GAppLaunchContextPrivate *priv;
};
struct _GAppLaunchContextClass
{
  GObjectClass parent_class;
  char * (* get_display) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  char * (* get_startup_notify_id) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  void (* launch_failed) (GAppLaunchContext *context,
                                    const char *startup_notify_id);
  void (* launched) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GVariant *platform_data);
  void (* launch_started) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GVariant *platform_data);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};
 extern
GType g_app_launch_context_get_type (void) __attribute__ ((__const__));
 extern
GAppLaunchContext *g_app_launch_context_new (void);
 extern
void g_app_launch_context_setenv (GAppLaunchContext *context,
                                                               const char *variable,
                                                               const char *value);
 extern
void g_app_launch_context_unsetenv (GAppLaunchContext *context,
                                                               const char *variable);
 extern
char ** g_app_launch_context_get_environment (GAppLaunchContext *context);
 extern
char * g_app_launch_context_get_display (GAppLaunchContext *context,
                                                               GAppInfo *info,
                                                               GList *files);
 extern
char * g_app_launch_context_get_startup_notify_id (GAppLaunchContext *context,
                                                               GAppInfo *info,
                                                               GList *files);
 extern
void g_app_launch_context_launch_failed (GAppLaunchContext *context,
                                                               const char * startup_notify_id);





typedef struct _GAppInfoMonitor GAppInfoMonitor;
 extern
GType g_app_info_monitor_get_type (void);
 extern
GAppInfoMonitor * g_app_info_monitor_get (void);
# 18533 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GApplicationPrivate GApplicationPrivate;
typedef struct _GApplicationClass GApplicationClass;
struct _GApplication
{

  GObject parent_instance;
  GApplicationPrivate *priv;
};
struct _GApplicationClass
{

  GObjectClass parent_class;


  void (* startup) (GApplication *application);
  void (* activate) (GApplication *application);
  void (* open) (GApplication *application,
                                                     GFile **files,
                                                     gint n_files,
                                                     const gchar *hint);
  int (* command_line) (GApplication *application,
                                                     GApplicationCommandLine *command_line);


  gboolean (* local_command_line) (GApplication *application,
                                                     gchar ***arguments,
                                                     int *exit_status);
  void (* before_emit) (GApplication *application,
                                                     GVariant *platform_data);
  void (* after_emit) (GApplication *application,
                                                     GVariant *platform_data);
  void (* add_platform_data) (GApplication *application,
                                                     GVariantBuilder *builder);
  void (* quit_mainloop) (GApplication *application);
  void (* run_mainloop) (GApplication *application);
  void (* shutdown) (GApplication *application);
  gboolean (* dbus_register) (GApplication *application,
                                                     GDBusConnection *connection,
                                                     const gchar *object_path,
                                                     GError **error);
  void (* dbus_unregister) (GApplication *application,
                                                     GDBusConnection *connection,
                                                     const gchar *object_path);
  gint (* handle_local_options)(GApplication *application,
                                                     GVariantDict *options);
  gboolean (* name_lost) (GApplication *application);

  gpointer padding[7];
};
 extern
GType g_application_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_application_id_is_valid (const gchar *application_id);
 extern
GApplication * g_application_new (const gchar *application_id,
                                                                         GApplicationFlags flags);
 extern
const gchar * g_application_get_application_id (GApplication *application);
 extern
void g_application_set_application_id (GApplication *application,
                                                                         const gchar *application_id);
 extern
GDBusConnection * g_application_get_dbus_connection (GApplication *application);
 extern
const gchar * g_application_get_dbus_object_path (GApplication *application);
 extern
guint g_application_get_inactivity_timeout (GApplication *application);
 extern
void g_application_set_inactivity_timeout (GApplication *application,
                                                                         guint inactivity_timeout);
 extern
GApplicationFlags g_application_get_flags (GApplication *application);
 extern
void g_application_set_flags (GApplication *application,
                                                                         GApplicationFlags flags);
 extern
const gchar * g_application_get_resource_base_path (GApplication *application);
 extern
void g_application_set_resource_base_path (GApplication *application,
                                                                         const gchar *resource_path);
__attribute__((__deprecated__)) extern
void g_application_set_action_group (GApplication *application,
                                                                         GActionGroup *action_group);
 extern
void g_application_add_main_option_entries (GApplication *application,
                                                                         const GOptionEntry *entries);
 extern
void g_application_add_main_option (GApplication *application,
                                                                         const char *long_name,
                                                                         char short_name,
                                                                         GOptionFlags flags,
                                                                         GOptionArg arg,
                                                                         const char *description,
                                                                         const char *arg_description);
 extern
void g_application_add_option_group (GApplication *application,
                                                                         GOptionGroup *group);
 extern
void g_application_set_option_context_parameter_string (GApplication *application,
                                                                           const gchar *parameter_string);
 extern
void g_application_set_option_context_summary (GApplication *application,
                                                                         const gchar *summary);
 extern
void g_application_set_option_context_description (GApplication *application,
                                                                         const gchar *description);
 extern
gboolean g_application_get_is_registered (GApplication *application);
 extern
gboolean g_application_get_is_remote (GApplication *application);
 extern
gboolean g_application_register (GApplication *application,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_application_hold (GApplication *application);
 extern
void g_application_release (GApplication *application);
 extern
void g_application_activate (GApplication *application);
 extern
void g_application_open (GApplication *application,
                                                                         GFile **files,
                                                                         gint n_files,
                                                                         const gchar *hint);
 extern
int g_application_run (GApplication *application,
                                                                         int argc,
                                                                         char **argv);
 extern
void g_application_quit (GApplication *application);
 extern
GApplication * g_application_get_default (void);
 extern
void g_application_set_default (GApplication *application);
 extern
void g_application_mark_busy (GApplication *application);
 extern
void g_application_unmark_busy (GApplication *application);
 extern
gboolean g_application_get_is_busy (GApplication *application);
 extern
void g_application_send_notification (GApplication *application,
                                                                         const gchar *id,
                                                                         GNotification *notification);
 extern
void g_application_withdraw_notification (GApplication *application,
                                                                         const gchar *id);
 extern
void g_application_bind_busy_property (GApplication *application,
                                                                         gpointer object,
                                                                         const gchar *property);
 extern
void g_application_unbind_busy_property (GApplication *application,
                                                                         gpointer object,
                                                                         const gchar *property);
# 18711 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GApplicationCommandLinePrivate GApplicationCommandLinePrivate;
typedef struct _GApplicationCommandLineClass GApplicationCommandLineClass;
struct _GApplicationCommandLine
{

  GObject parent_instance;
  GApplicationCommandLinePrivate *priv;
};
struct _GApplicationCommandLineClass
{

  GObjectClass parent_class;
  void (* print_literal) (GApplicationCommandLine *cmdline,
                                                 const gchar *message);
  void (* printerr_literal) (GApplicationCommandLine *cmdline,
                                                 const gchar *message);
  GInputStream * (* get_stdin) (GApplicationCommandLine *cmdline);
  gpointer padding[11];
};
 extern
GType g_application_command_line_get_type (void) __attribute__ ((__const__));
 extern
gchar ** g_application_command_line_get_arguments (GApplicationCommandLine *cmdline,
                                                                         int *argc);
 extern
GVariantDict * g_application_command_line_get_options_dict (GApplicationCommandLine *cmdline);
 extern
GInputStream * g_application_command_line_get_stdin (GApplicationCommandLine *cmdline);
 extern
const gchar * const * g_application_command_line_get_environ (GApplicationCommandLine *cmdline);
 extern
const gchar * g_application_command_line_getenv (GApplicationCommandLine *cmdline,
                                                                         const gchar *name);
 extern
const gchar * g_application_command_line_get_cwd (GApplicationCommandLine *cmdline);
 extern
gboolean g_application_command_line_get_is_remote (GApplicationCommandLine *cmdline);
 extern
void g_application_command_line_print (GApplicationCommandLine *cmdline,
                                                                         const gchar *format,
                                                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_application_command_line_printerr (GApplicationCommandLine *cmdline,
                                                                         const gchar *format,
                                                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
int g_application_command_line_get_exit_status (GApplicationCommandLine *cmdline);
 extern
void g_application_command_line_set_exit_status (GApplicationCommandLine *cmdline,
                                                                         int exit_status);
 extern
GVariant * g_application_command_line_get_platform_data (GApplicationCommandLine *cmdline);
 extern
GFile * g_application_command_line_create_file_for_arg (GApplicationCommandLine *cmdline,
                                                                         const gchar *arg);
# 18784 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GInitableIface GInitableIface;
struct _GInitableIface
{
  GTypeInterface g_iface;

  gboolean (* init) (GInitable *initable,
   GCancellable *cancellable,
   GError **error);
};
 extern
GType g_initable_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_initable_init (GInitable *initable,
    GCancellable *cancellable,
    GError **error);
 extern
gpointer g_initable_new (GType object_type,
    GCancellable *cancellable,
    GError **error,
    const gchar *first_property_name,
    ...);
#pragma clang diagnostic push
# 18805 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_object_new_with_properties and g_initable_init" "' instead"))) extern
gpointer g_initable_newv (GType object_type,
    guint n_parameters,
    GParameter *parameters,
    GCancellable *cancellable,
    GError **error);
#pragma clang diagnostic pop
 extern
GObject* g_initable_new_valist (GType object_type,
    const gchar *first_property_name,
    va_list var_args,
    GCancellable *cancellable,
    GError **error);
# 18827 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GAsyncInitableIface GAsyncInitableIface;
struct _GAsyncInitableIface
{
  GTypeInterface g_iface;

  void (* init_async) (GAsyncInitable *initable,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gboolean (* init_finish) (GAsyncInitable *initable,
       GAsyncResult *res,
       GError **error);
};
 extern
GType g_async_initable_get_type (void) __attribute__ ((__const__));
 extern
void g_async_initable_init_async (GAsyncInitable *initable,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
 extern
gboolean g_async_initable_init_finish (GAsyncInitable *initable,
         GAsyncResult *res,
         GError **error);
 extern
void g_async_initable_new_async (GType object_type,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data,
         const gchar *first_property_name,
         ...);
#pragma clang diagnostic push
# 18861 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_object_new_with_properties and g_async_initable_init_async" "' instead"))) extern
void g_async_initable_newv_async (GType object_type,
         guint n_parameters,
         GParameter *parameters,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
#pragma clang diagnostic pop
 extern
void g_async_initable_new_valist_async (GType object_type,
         const gchar *first_property_name,
         va_list var_args,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
 extern
GObject *g_async_initable_new_finish (GAsyncInitable *initable,
         GAsyncResult *res,
         GError **error);
# 18895 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GAsyncResultIface GAsyncResultIface;
struct _GAsyncResultIface
{
  GTypeInterface g_iface;

  gpointer (* get_user_data) (GAsyncResult *res);
  GObject * (* get_source_object) (GAsyncResult *res);
  gboolean (* is_tagged) (GAsyncResult *res,
       gpointer source_tag);
};
 extern
GType g_async_result_get_type (void) __attribute__ ((__const__));
 extern
gpointer g_async_result_get_user_data (GAsyncResult *res);
 extern
GObject *g_async_result_get_source_object (GAsyncResult *res);
 extern
gboolean g_async_result_legacy_propagate_error (GAsyncResult *res,
      GError **error);
 extern
gboolean g_async_result_is_tagged (GAsyncResult *res,
      gpointer source_tag);
# 18941 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GInputStreamClass GInputStreamClass;
typedef struct _GInputStreamPrivate GInputStreamPrivate;
struct _GInputStream
{
  GObject parent_instance;

  GInputStreamPrivate *priv;
};
struct _GInputStreamClass
{
  GObjectClass parent_class;

  gssize (* read_fn) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gssize (* skip) (GInputStream *stream,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gboolean (* close_fn) (GInputStream *stream,
                             GCancellable *cancellable,
                             GError **error);

  void (* read_async) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* read_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* skip_async) (GInputStream *stream,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* skip_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* close_async) (GInputStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_input_stream_get_type (void) __attribute__ ((__const__));
 extern
gssize g_input_stream_read (GInputStream *stream,
           void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);
 extern
gboolean g_input_stream_read_all (GInputStream *stream,
           void *buffer,
           gsize count,
           gsize *bytes_read,
           GCancellable *cancellable,
           GError **error);
 extern
GBytes *g_input_stream_read_bytes (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
 extern
gssize g_input_stream_skip (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
 extern
gboolean g_input_stream_close (GInputStream *stream,
           GCancellable *cancellable,
           GError **error);
 extern
void g_input_stream_read_async (GInputStream *stream,
           void *buffer,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gssize g_input_stream_read_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
 extern
void g_input_stream_read_all_async (GInputStream *stream,
                                           void *buffer,
                                           gsize count,
                                           int io_priority,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_input_stream_read_all_finish (GInputStream *stream,
                                           GAsyncResult *result,
                                           gsize *bytes_read,
                                           GError **error);
 extern
void g_input_stream_read_bytes_async (GInputStream *stream,
        gsize count,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
 extern
GBytes *g_input_stream_read_bytes_finish (GInputStream *stream,
        GAsyncResult *result,
        GError **error);
 extern
void g_input_stream_skip_async (GInputStream *stream,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gssize g_input_stream_skip_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
 extern
void g_input_stream_close_async (GInputStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_input_stream_close_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
 extern
gboolean g_input_stream_is_closed (GInputStream *stream);
 extern
gboolean g_input_stream_has_pending (GInputStream *stream);
 extern
gboolean g_input_stream_set_pending (GInputStream *stream,
           GError **error);
 extern
void g_input_stream_clear_pending (GInputStream *stream);
# 19105 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFilterInputStreamClass GFilterInputStreamClass;
struct _GFilterInputStream
{
  GInputStream parent_instance;

  GInputStream *base_stream;
};
struct _GFilterInputStreamClass
{
  GInputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};
 extern
GType g_filter_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream * g_filter_input_stream_get_base_stream (GFilterInputStream *stream);
 extern
gboolean g_filter_input_stream_get_close_base_stream (GFilterInputStream *stream);
 extern
void g_filter_input_stream_set_close_base_stream (GFilterInputStream *stream,
                                                            gboolean close_base);
# 19139 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GBufferedInputStreamClass GBufferedInputStreamClass;
typedef struct _GBufferedInputStreamPrivate GBufferedInputStreamPrivate;
struct _GBufferedInputStream
{
  GFilterInputStream parent_instance;

  GBufferedInputStreamPrivate *priv;
};
struct _GBufferedInputStreamClass
{
  GFilterInputStreamClass parent_class;
  gssize (* fill) (GBufferedInputStream *stream,
       gssize count,
       GCancellable *cancellable,
       GError **error);

  void (* fill_async) (GBufferedInputStream *stream,
       gssize count,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gssize (* fill_finish) (GBufferedInputStream *stream,
       GAsyncResult *result,
       GError **error);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_buffered_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream* g_buffered_input_stream_new (GInputStream *base_stream);
 extern
GInputStream* g_buffered_input_stream_new_sized (GInputStream *base_stream,
             gsize size);
 extern
gsize g_buffered_input_stream_get_buffer_size (GBufferedInputStream *stream);
 extern
void g_buffered_input_stream_set_buffer_size (GBufferedInputStream *stream,
             gsize size);
 extern
gsize g_buffered_input_stream_get_available (GBufferedInputStream *stream);
 extern
gsize g_buffered_input_stream_peek (GBufferedInputStream *stream,
             void *buffer,
             gsize offset,
             gsize count);
 extern
const void* g_buffered_input_stream_peek_buffer (GBufferedInputStream *stream,
             gsize *count);
 extern
gssize g_buffered_input_stream_fill (GBufferedInputStream *stream,
             gssize count,
             GCancellable *cancellable,
             GError **error);
 extern
void g_buffered_input_stream_fill_async (GBufferedInputStream *stream,
             gssize count,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
 extern
gssize g_buffered_input_stream_fill_finish (GBufferedInputStream *stream,
             GAsyncResult *result,
             GError **error);
 extern
int g_buffered_input_stream_read_byte (GBufferedInputStream *stream,
             GCancellable *cancellable,
             GError **error);
# 19238 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GOutputStreamClass GOutputStreamClass;
typedef struct _GOutputStreamPrivate GOutputStreamPrivate;
struct _GOutputStream
{
  GObject parent_instance;

  GOutputStreamPrivate *priv;
};
struct _GOutputStreamClass
{
  GObjectClass parent_class;

  gssize (* write_fn) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 GCancellable *cancellable,
                                 GError **error);
  gssize (* splice) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* flush) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* close_fn) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);

  void (* write_async) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* write_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* splice_async) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* splice_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* flush_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* flush_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* close_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* close_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  gboolean (* writev_fn) (GOutputStream *stream,
                                 const GOutputVector *vectors,
                                 gsize n_vectors,
                                 gsize *bytes_written,
                                 GCancellable *cancellable,
                                 GError **error);
  void (* writev_async) (GOutputStream *stream,
                                 const GOutputVector *vectors,
                                 gsize n_vectors,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* writev_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 gsize *bytes_written,
                                 GError **error);


  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
};
 extern
GType g_output_stream_get_type (void) __attribute__ ((__const__));
 extern
gssize g_output_stream_write (GOutputStream *stream,
     const void *buffer,
     gsize count,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_write_all (GOutputStream *stream,
     const void *buffer,
     gsize count,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_writev (GOutputStream *stream,
     const GOutputVector *vectors,
     gsize n_vectors,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_writev_all (GOutputStream *stream,
     GOutputVector *vectors,
     gsize n_vectors,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_printf (GOutputStream *stream,
                                        gsize *bytes_written,
                                        GCancellable *cancellable,
                                        GError **error,
                                        const gchar *format,
                                        ...) __attribute__((__format__ (__printf__, 5, 6)));
 extern
gboolean g_output_stream_vprintf (GOutputStream *stream,
                                        gsize *bytes_written,
                                        GCancellable *cancellable,
                                        GError **error,
                                        const gchar *format,
                                        va_list args) __attribute__((__format__ (__printf__, 5, 0)));
 extern
gssize g_output_stream_write_bytes (GOutputStream *stream,
     GBytes *bytes,
     GCancellable *cancellable,
     GError **error);
 extern
gssize g_output_stream_splice (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_flush (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_close (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
 extern
void g_output_stream_write_async (GOutputStream *stream,
     const void *buffer,
     gsize count,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gssize g_output_stream_write_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
 extern
void g_output_stream_write_all_async (GOutputStream *stream,
                                          const void *buffer,
                                          gsize count,
                                          int io_priority,
                                          GCancellable *cancellable,
                                          GAsyncReadyCallback callback,
                                          gpointer user_data);
 extern
gboolean g_output_stream_write_all_finish (GOutputStream *stream,
                                           GAsyncResult *result,
                                           gsize *bytes_written,
                                           GError **error);
 extern
void g_output_stream_writev_async (GOutputStream *stream,
     const GOutputVector *vectors,
     gsize n_vectors,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gboolean g_output_stream_writev_finish (GOutputStream *stream,
     GAsyncResult *result,
     gsize *bytes_written,
     GError **error);
 extern
void g_output_stream_writev_all_async (GOutputStream *stream,
                                           GOutputVector *vectors,
                                           gsize n_vectors,
                                           int io_priority,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_output_stream_writev_all_finish (GOutputStream *stream,
                                            GAsyncResult *result,
                                            gsize *bytes_written,
                                            GError **error);
 extern
void g_output_stream_write_bytes_async (GOutputStream *stream,
          GBytes *bytes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gssize g_output_stream_write_bytes_finish (GOutputStream *stream,
          GAsyncResult *result,
          GError **error);
 extern
void g_output_stream_splice_async (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gssize g_output_stream_splice_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
 extern
void g_output_stream_flush_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gboolean g_output_stream_flush_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
 extern
void g_output_stream_close_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gboolean g_output_stream_close_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
 extern
gboolean g_output_stream_is_closed (GOutputStream *stream);
 extern
gboolean g_output_stream_is_closing (GOutputStream *stream);
 extern
gboolean g_output_stream_has_pending (GOutputStream *stream);
 extern
gboolean g_output_stream_set_pending (GOutputStream *stream,
     GError **error);
 extern
void g_output_stream_clear_pending (GOutputStream *stream);
# 19504 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFilterOutputStreamClass GFilterOutputStreamClass;
struct _GFilterOutputStream
{
  GOutputStream parent_instance;

  GOutputStream *base_stream;
};
struct _GFilterOutputStreamClass
{
  GOutputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};
 extern
GType g_filter_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GOutputStream * g_filter_output_stream_get_base_stream (GFilterOutputStream *stream);
 extern
gboolean g_filter_output_stream_get_close_base_stream (GFilterOutputStream *stream);
 extern
void g_filter_output_stream_set_close_base_stream (GFilterOutputStream *stream,
                                                              gboolean close_base);
# 19538 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GBufferedOutputStreamClass GBufferedOutputStreamClass;
typedef struct _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate;
struct _GBufferedOutputStream
{
  GFilterOutputStream parent_instance;

  GBufferedOutputStreamPrivate *priv;
};
struct _GBufferedOutputStreamClass
{
  GFilterOutputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
};
 extern
GType g_buffered_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GOutputStream* g_buffered_output_stream_new (GOutputStream *base_stream);
 extern
GOutputStream* g_buffered_output_stream_new_sized (GOutputStream *base_stream,
        gsize size);
 extern
gsize g_buffered_output_stream_get_buffer_size (GBufferedOutputStream *stream);
 extern
void g_buffered_output_stream_set_buffer_size (GBufferedOutputStream *stream,
        gsize size);
 extern
gboolean g_buffered_output_stream_get_auto_grow (GBufferedOutputStream *stream);
 extern
void g_buffered_output_stream_set_auto_grow (GBufferedOutputStream *stream,
        gboolean auto_grow);
# 19582 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_bytes_icon_get_type (void) __attribute__ ((__const__));
 extern
GIcon * g_bytes_icon_new (GBytes *bytes);
 extern
GBytes * g_bytes_icon_get_bytes (GBytesIcon *icon);
# 19602 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GCancellableClass GCancellableClass;
typedef struct _GCancellablePrivate GCancellablePrivate;
struct _GCancellable
{
  GObject parent_instance;

  GCancellablePrivate *priv;
};
struct _GCancellableClass
{
  GObjectClass parent_class;
  void (* cancelled) (GCancellable *cancellable);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_cancellable_get_type (void) __attribute__ ((__const__));
 extern
GCancellable *g_cancellable_new (void);
 extern
gboolean g_cancellable_is_cancelled (GCancellable *cancellable);
 extern
gboolean g_cancellable_set_error_if_cancelled (GCancellable *cancellable,
          GError **error);
 extern
int g_cancellable_get_fd (GCancellable *cancellable);
 extern
gboolean g_cancellable_make_pollfd (GCancellable *cancellable,
          GPollFD *pollfd);
 extern
void g_cancellable_release_fd (GCancellable *cancellable);
 extern
GSource * g_cancellable_source_new (GCancellable *cancellable);
 extern
GCancellable *g_cancellable_get_current (void);
 extern
void g_cancellable_push_current (GCancellable *cancellable);
 extern
void g_cancellable_pop_current (GCancellable *cancellable);
 extern
void g_cancellable_reset (GCancellable *cancellable);
 extern
gulong g_cancellable_connect (GCancellable *cancellable,
          GCallback callback,
          gpointer data,
          GDestroyNotify data_destroy_func);
 extern
void g_cancellable_disconnect (GCancellable *cancellable,
          gulong handler_id);
 extern
void g_cancellable_cancel (GCancellable *cancellable);
# 19675 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GConverterIface GConverterIface;
struct _GConverterIface
{
  GTypeInterface g_iface;

  GConverterResult (* convert) (GConverter *converter,
    const void *inbuf,
    gsize inbuf_size,
    void *outbuf,
    gsize outbuf_size,
    GConverterFlags flags,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error);
  void (* reset) (GConverter *converter);
};
 extern
GType g_converter_get_type (void) __attribute__ ((__const__));
 extern
GConverterResult g_converter_convert (GConverter *converter,
          const void *inbuf,
          gsize inbuf_size,
          void *outbuf,
          gsize outbuf_size,
          GConverterFlags flags,
          gsize *bytes_read,
          gsize *bytes_written,
          GError **error);
 extern
void g_converter_reset (GConverter *converter);
# 19714 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GCharsetConverterClass GCharsetConverterClass;
struct _GCharsetConverterClass
{
  GObjectClass parent_class;
};
 extern
GType g_charset_converter_get_type (void) __attribute__ ((__const__));
 extern
GCharsetConverter *g_charset_converter_new (const gchar *to_charset,
             const gchar *from_charset,
             GError **error);
 extern
void g_charset_converter_set_use_fallback (GCharsetConverter *converter,
        gboolean use_fallback);
 extern
gboolean g_charset_converter_get_use_fallback (GCharsetConverter *converter);
 extern
guint g_charset_converter_get_num_fallbacks (GCharsetConverter *converter);
# 19740 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gboolean g_content_type_equals (const gchar *type1,
                                           const gchar *type2);
 extern
gboolean g_content_type_is_a (const gchar *type,
                                           const gchar *supertype);
 extern
gboolean g_content_type_is_mime_type (const gchar *type,
                                           const gchar *mime_type);
 extern
gboolean g_content_type_is_unknown (const gchar *type);
 extern
gchar * g_content_type_get_description (const gchar *type);
 extern
gchar * g_content_type_get_mime_type (const gchar *type);
 extern
GIcon * g_content_type_get_icon (const gchar *type);
 extern
GIcon * g_content_type_get_symbolic_icon (const gchar *type);
 extern
gchar * g_content_type_get_generic_icon_name (const gchar *type);
 extern
gboolean g_content_type_can_be_executable (const gchar *type);
 extern
gchar * g_content_type_from_mime_type (const gchar *mime_type);
 extern
gchar * g_content_type_guess (const gchar *filename,
                                           const guchar *data,
                                           gsize data_size,
                                           gboolean *result_uncertain);
 extern
gchar ** g_content_type_guess_for_tree (GFile *root);
 extern
GList * g_content_types_get_registered (void);

 extern
const gchar * const *g_content_type_get_mime_dirs (void);
 extern
void g_content_type_set_mime_dirs (const gchar * const *dirs);
# 19794 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GConverterInputStreamClass GConverterInputStreamClass;
typedef struct _GConverterInputStreamPrivate GConverterInputStreamPrivate;
struct _GConverterInputStream
{
  GFilterInputStream parent_instance;

  GConverterInputStreamPrivate *priv;
};
struct _GConverterInputStreamClass
{
  GFilterInputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_converter_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream *g_converter_input_stream_new (GInputStream *base_stream,
                                                               GConverter *converter);
 extern
GConverter *g_converter_input_stream_get_converter (GConverterInputStream *converter_stream);
# 19834 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GConverterOutputStreamClass GConverterOutputStreamClass;
typedef struct _GConverterOutputStreamPrivate GConverterOutputStreamPrivate;
struct _GConverterOutputStream
{
  GFilterOutputStream parent_instance;

  GConverterOutputStreamPrivate *priv;
};
struct _GConverterOutputStreamClass
{
  GFilterOutputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_converter_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GOutputStream *g_converter_output_stream_new (GOutputStream *base_stream,
                                                                 GConverter *converter);
 extern
GConverter *g_converter_output_stream_get_converter (GConverterOutputStream *converter_stream);
# 19868 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 1 3 4
# 72 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 1 3 4
# 84 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_posix_vdisable.h" 1 3 4
# 85 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 2 3 4
# 122 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_seek_set.h" 1 3 4
# 123 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 2 3 4
# 132 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 3 4
struct accessx_descriptor {
 unsigned int ad_name_offset;
 int ad_flags;
 int ad_pad[2];
};
# 180 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 181 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 2 3 4







int getattrlistbulk(int, void *, void *, size_t, uint64_t) __attribute__((availability(macosx,introduced=10.10)));
int getattrlistat(int, const char *, void *, void *, size_t, unsigned long) __attribute__((availability(macosx,introduced=10.10)));
int setattrlistat(int, const char *, void *, void *, size_t, uint32_t) __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
ssize_t freadlink(int, char * restrict, size_t) __attribute__((availability(macos,introduced=13.0))) __attribute__((availability(ios,introduced=16.0))) __attribute__((availability(tvos,introduced=16.0))) __attribute__((availability(watchos,introduced=9.0)));
# 200 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 201 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h" 2 3 4








int faccessat(int, const char *, int, int) __attribute__((availability(macosx,introduced=10.10)));
int fchownat(int, const char *, uid_t, gid_t, int) __attribute__((availability(macosx,introduced=10.10)));
int linkat(int, const char *, int, const char *, int) __attribute__((availability(macosx,introduced=10.10)));
ssize_t readlinkat(int, const char *, char *, size_t) __attribute__((availability(macosx,introduced=10.10)));
int symlinkat(const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));
int unlinkat(int, const char *, int) __attribute__((availability(macosx,introduced=10.10)));
# 73 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 2 3 4







# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 81 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 2 3 4



# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 85 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 2 3 4
# 430 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 3 4
void _exit(int) __attribute__((__noreturn__));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);

int close(int) __asm("_" "close" );

int dup(int);
int dup2(int, int);
int execl(const char * __path, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execle(const char * __path, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execlp(const char * __file, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execv(const char * __path, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execve(const char * __file, char * const * __argv, char * const * __envp) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execvp(const char * __file, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
pid_t fork(void) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
long fpathconf(int, int);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);



int getgroups(int, gid_t []);

char *getlogin(void);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
uid_t getuid(void);
int isatty(int);
int link(const char *, const char *);
off_t lseek(int, off_t, int);
long pathconf(const char *, int);

int pause(void) __asm("_" "pause" );

int pipe(int [2]);

ssize_t read(int, void *, size_t) __asm("_" "read" );

int rmdir(const char *);
int setgid(gid_t);
int setpgid(pid_t, pid_t);
pid_t setsid(void);
int setuid(uid_t);

unsigned int
  sleep(unsigned int) __asm("_" "sleep" );

long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
char *ttyname(int);


int ttyname_r(int, char *, size_t) __asm("_" "ttyname_r" );




int unlink(const char *);

ssize_t write(int __fd, const void * __buf, size_t __nbyte) __asm("_" "write" );
# 507 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 3 4
size_t confstr(int, char *, size_t) __asm("_" "confstr" );

int getopt(int, char * const [], const char *) __asm("_" "getopt" );

extern char *optarg;
extern int optind, opterr, optopt;
# 525 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_ctermid.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_ctermid.h" 3 4
char *ctermid(char *);
# 526 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 2 3 4
# 538 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 3 4
__attribute__((__deprecated__)) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))

void *brk(const void *);
int chroot(const char *) ;


char *crypt(const char *, const char *);

void encrypt(char *, int) __asm("_" "encrypt" );



int fchdir(int);
long gethostid(void);
pid_t getpgid(pid_t);
pid_t getsid(pid_t);



int getdtablesize(void) ;
int getpagesize(void) __attribute__((__const__)) ;
char *getpass(const char *) ;




char *getwd(char *) ;


int lchown(const char *, uid_t, gid_t) __asm("_" "lchown" );

int lockf(int, int, off_t) __asm("_" "lockf" );

int nice(int) __asm("_" "nice" );

ssize_t pread(int __fd, void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pread" );

ssize_t pwrite(int __fd, const void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pwrite" );






__attribute__((__deprecated__)) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))

void *sbrk(int);



pid_t setpgrp(void) __asm("_" "setpgrp" );




int setregid(gid_t, gid_t) __asm("_" "setregid" );

int setreuid(uid_t, uid_t) __asm("_" "setreuid" );

void swab(const void * restrict, void * restrict, ssize_t);
void sync(void);
int truncate(const char *, off_t);
useconds_t ualarm(useconds_t, useconds_t);
int usleep(useconds_t) __asm("_" "usleep" );


__attribute__((__deprecated__("Use posix_spawn or fork")))

pid_t vfork(void) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));


int fsync(int) __asm("_" "fsync" );

int ftruncate(int, off_t);
int getlogin_r(char *, size_t);
# 625 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 3 4
int fchown(int, uid_t, gid_t);
int gethostname(char *, size_t);
ssize_t readlink(const char * restrict, char * restrict, size_t);
int setegid(gid_t);
int seteuid(uid_t);
int symlink(const char *, const char *);
# 639 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 3 4
# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/select.h" 1 3 4
# 114 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/select.h" 3 4
int pselect(int, fd_set * restrict, fd_set * restrict,
    fd_set * restrict, const struct timespec * restrict,
    const sigset_t * restrict)




__asm("_" "pselect" )




;




# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_select.h" 1 3 4
# 43 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_select.h" 3 4
int select(int, fd_set * restrict, fd_set * restrict,
    fd_set * restrict, struct timeval * restrict)





__asm("_" "select" )




;
# 132 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/select.h" 2 3 4
# 640 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 2 3 4



# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_uuid_t.h" 1 3 4
# 31 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/_types/_uuid_t.h" 3 4
typedef __darwin_uuid_t uuid_t;
# 644 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 2 3 4


void _Exit(int) __attribute__((__noreturn__));
int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int acct(const char *);
int add_profil(char *, size_t, unsigned long, unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
void endusershell(void);
int execvP(const char * __file, const char * __searchpath, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
char *fflagstostr(unsigned long);
int getdomainname(char *, int);
int getgrouplist(const char *, int, int *, int *);

# 1 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/gethostuuid.h" 1 3 4
# 41 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/gethostuuid.h" 3 4
int gethostuuid(uuid_t, const struct timespec *) __attribute__((availability(macos,introduced=10.5))) __attribute__((availability(ios,unavailable))) __attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable)));
# 657 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 2 3 4

mode_t getmode(const void *, mode_t);
int getpeereid(int, uid_t *, gid_t *);
int getsgroups_np(int *, uuid_t);
char *getusershell(void);
int getwgroups_np(int *, uuid_t);
int initgroups(const char *, int);
int issetugid(void);
char *mkdtemp(char *);
int mknod(const char *, mode_t, dev_t);
int mkpath_np(const char *path, mode_t omode) __attribute__((availability(macosx,introduced=10.8)));
int mkpathat_np(int dfd, const char *path, mode_t omode)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int mkstemp(char *);
int mkstemps(char *, int);
char *mktemp(char *);
int mkostemp(char *path, int oflags)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int mkostemps(char *path, int slen, int oflags)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));

int mkstemp_dprotected_np(char *path, int dpclass, int dpflags)
  __attribute__((availability(macosx,unavailable))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
char *mkdtempat_np(int dfd, char *path)
  __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0)))
  __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
int mkstempsat_np(int dfd, char *path, int slen)
  __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0)))
  __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
int mkostempsat_np(int dfd, char *path, int slen, int oflags)
  __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0)))
  __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
int nfssvc(int, void *);
int profil(char *, size_t, unsigned long, unsigned int);

__attribute__((__deprecated__("Use of per-thread security contexts is error-prone and discouraged.")))
int pthread_setugid_np(uid_t, gid_t);
int pthread_getugid_np( uid_t *, gid_t *);

int reboot(int);
int revoke(const char *);

__attribute__((__deprecated__)) int rcmd(char **, int, const char *, const char *, const char *, int *);
__attribute__((__deprecated__)) int rcmd_af(char **, int, const char *, const char *, const char *, int *,
  int);
__attribute__((__deprecated__)) int rresvport(int *);
__attribute__((__deprecated__)) int rresvport_af(int *, int);
__attribute__((__deprecated__)) int iruserok(unsigned long, int, const char *, const char *);
__attribute__((__deprecated__)) int iruserok_sa(const void *, int, int, const char *, const char *);
__attribute__((__deprecated__)) int ruserok(const char *, int, const char *, const char *);

int setdomainname(const char *, int);
int setgroups(int, const gid_t *);
void sethostid(long);
int sethostname(const char *, int);

void setkey(const char *) __asm("_" "setkey" );



int setlogin(const char *);
void *setmode(const char *) __asm("_" "setmode" );
int setrgid(gid_t);
int setruid(uid_t);
int setsgroups_np(int, const uuid_t);
void setusershell(void);
int setwgroups_np(int, const uuid_t);
int strtofflags(char **, unsigned long *, unsigned long *);
int swapon(const char *);
int ttyslot(void);
int undelete(const char *);
int unwhiteout(const char *);
void *valloc(size_t);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
__attribute__((availability(ios,deprecated=10.0,message="syscall(2) is unsupported; " "please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")))

__attribute__((availability(macosx,deprecated=10.12,message="syscall(2) is unsupported; " "please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")))

int syscall(int, ...);

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);



int fgetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
int fsetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
int getattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "getattrlist" );
int setattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "setattrlist" );
int exchangedata(const char*,const char*,unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int getdirentriesattr(int,void*,void*,size_t,unsigned int*,unsigned int*,unsigned int*,unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
# 767 "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/unistd.h" 3 4
struct fssearchblock;
struct searchstate;

int searchfs(const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int fsctl(const char *,unsigned long,void*,unsigned int);
int ffsctl(int,unsigned long,void*,unsigned int) __attribute__((availability(macosx,introduced=10.6)));




int fsync_volume_np(int, int) __attribute__((availability(macosx,introduced=10.8)));
int sync_volume_np(const char *, int) __attribute__((availability(macosx,introduced=10.8)));

extern int optreset;
# 19869 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h" 2
# 19878 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GCredentialsClass GCredentialsClass;
 extern
GType g_credentials_get_type (void) __attribute__ ((__const__));
 extern
GCredentials *g_credentials_new (void);
 extern
gchar *g_credentials_to_string (GCredentials *credentials);
 extern
gpointer g_credentials_get_native (GCredentials *credentials,
                                                   GCredentialsType native_type);
 extern
void g_credentials_set_native (GCredentials *credentials,
                                                   GCredentialsType native_type,
                                                   gpointer native);
 extern
gboolean g_credentials_is_same_user (GCredentials *credentials,
                                                   GCredentials *other_credentials,
                                                   GError **error);

 extern
pid_t g_credentials_get_unix_pid (GCredentials *credentials,
                                                   GError **error);
 extern
uid_t g_credentials_get_unix_user (GCredentials *credentials,
                                                   GError **error);
 extern
gboolean g_credentials_set_unix_user (GCredentials *credentials,
                                                   uid_t uid,
                                                   GError **error);
# 19926 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDatagramBasedInterface GDatagramBasedInterface;
struct _GDatagramBasedInterface
{
  GTypeInterface g_iface;

  gint (*receive_messages) (GDatagramBased *datagram_based,
                                         GInputMessage *messages,
                                         guint num_messages,
                                         gint flags,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
  gint (*send_messages) (GDatagramBased *datagram_based,
                                         GOutputMessage *messages,
                                         guint num_messages,
                                         gint flags,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
  GSource *(*create_source) (GDatagramBased *datagram_based,
                                         GIOCondition condition,
                                         GCancellable *cancellable);
  GIOCondition (*condition_check) (GDatagramBased *datagram_based,
                                         GIOCondition condition);
  gboolean (*condition_wait) (GDatagramBased *datagram_based,
                                         GIOCondition condition,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
};
 extern
GType
g_datagram_based_get_type (void);
 extern
gint
g_datagram_based_receive_messages (GDatagramBased *datagram_based,
                                       GInputMessage *messages,
                                       guint num_messages,
                                       gint flags,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);
 extern
gint
g_datagram_based_send_messages (GDatagramBased *datagram_based,
                                       GOutputMessage *messages,
                                       guint num_messages,
                                       gint flags,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);
 extern
GSource *
g_datagram_based_create_source (GDatagramBased *datagram_based,
                                       GIOCondition condition,
                                       GCancellable *cancellable);
 extern
GIOCondition
g_datagram_based_condition_check (GDatagramBased *datagram_based,
                                       GIOCondition condition);
 extern
gboolean
g_datagram_based_condition_wait (GDatagramBased *datagram_based,
                                       GIOCondition condition,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);
# 20007 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDataInputStreamClass GDataInputStreamClass;
typedef struct _GDataInputStreamPrivate GDataInputStreamPrivate;
struct _GDataInputStream
{
  GBufferedInputStream parent_instance;

  GDataInputStreamPrivate *priv;
};
struct _GDataInputStreamClass
{
  GBufferedInputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_data_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GDataInputStream * g_data_input_stream_new (GInputStream *base_stream);
 extern
void g_data_input_stream_set_byte_order (GDataInputStream *stream,
                                                                 GDataStreamByteOrder order);
 extern
GDataStreamByteOrder g_data_input_stream_get_byte_order (GDataInputStream *stream);
 extern
void g_data_input_stream_set_newline_type (GDataInputStream *stream,
                                                                 GDataStreamNewlineType type);
 extern
GDataStreamNewlineType g_data_input_stream_get_newline_type (GDataInputStream *stream);
 extern
guchar g_data_input_stream_read_byte (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
gint16 g_data_input_stream_read_int16 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
guint16 g_data_input_stream_read_uint16 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
gint32 g_data_input_stream_read_int32 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
guint32 g_data_input_stream_read_uint32 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
gint64 g_data_input_stream_read_int64 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
guint64 g_data_input_stream_read_uint64 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
char * g_data_input_stream_read_line (GDataInputStream *stream,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
char * g_data_input_stream_read_line_utf8 (GDataInputStream *stream,
         gsize *length,
         GCancellable *cancellable,
         GError **error);
 extern
void g_data_input_stream_read_line_async (GDataInputStream *stream,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
 extern
char * g_data_input_stream_read_line_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
 extern
char * g_data_input_stream_read_line_finish_utf8(GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto" "' instead"))) extern
char * g_data_input_stream_read_until (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto_async" "' instead"))) extern
void g_data_input_stream_read_until_async (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto_finish" "' instead"))) extern
char * g_data_input_stream_read_until_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
 extern
char * g_data_input_stream_read_upto (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gssize stop_chars_len,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
void g_data_input_stream_read_upto_async (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gssize stop_chars_len,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
 extern
char * g_data_input_stream_read_upto_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
# 20146 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDataOutputStream GDataOutputStream;
typedef struct _GDataOutputStreamClass GDataOutputStreamClass;
typedef struct _GDataOutputStreamPrivate GDataOutputStreamPrivate;
struct _GDataOutputStream
{
  GFilterOutputStream parent_instance;

  GDataOutputStreamPrivate *priv;
};
struct _GDataOutputStreamClass
{
  GFilterOutputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_data_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GDataOutputStream * g_data_output_stream_new (GOutputStream *base_stream);
 extern
void g_data_output_stream_set_byte_order (GDataOutputStream *stream,
         GDataStreamByteOrder order);
 extern
GDataStreamByteOrder g_data_output_stream_get_byte_order (GDataOutputStream *stream);
 extern
gboolean g_data_output_stream_put_byte (GDataOutputStream *stream,
         guchar data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_int16 (GDataOutputStream *stream,
         gint16 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_uint16 (GDataOutputStream *stream,
         guint16 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_int32 (GDataOutputStream *stream,
         gint32 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_uint32 (GDataOutputStream *stream,
         guint32 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_int64 (GDataOutputStream *stream,
         gint64 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_uint64 (GDataOutputStream *stream,
         guint64 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_string (GDataOutputStream *stream,
         const char *str,
         GCancellable *cancellable,
         GError **error);
# 20234 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_dbus_action_group_get_type (void) __attribute__ ((__const__));
 extern
GDBusActionGroup * g_dbus_action_group_get (GDBusConnection *connection,
                                                                       const gchar *bus_name,
                                                                       const gchar *object_path);
# 20248 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gchar *g_dbus_address_escape_value (const gchar *string);
 extern
gboolean g_dbus_is_address (const gchar *string);
 extern
gboolean g_dbus_is_supported_address (const gchar *string,
                                      GError **error);
 extern
void g_dbus_address_get_stream (const gchar *address,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
 extern
GIOStream *g_dbus_address_get_stream_finish (GAsyncResult *res,
                                                       gchar **out_guid,
                                                       GError **error);
 extern
GIOStream *g_dbus_address_get_stream_sync (const gchar *address,
                                                       gchar **out_guid,
                                                       GCancellable *cancellable,
                                                       GError **error);
 extern
gchar *g_dbus_address_get_for_bus_sync (GBusType bus_type,
                                                       GCancellable *cancellable,
                                                       GError **error);
# 20284 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_dbus_auth_observer_get_type (void) __attribute__ ((__const__));
 extern
GDBusAuthObserver *g_dbus_auth_observer_new (void);
 extern
gboolean g_dbus_auth_observer_authorize_authenticated_peer (GDBusAuthObserver *observer,
                                                                      GIOStream *stream,
                                                                      GCredentials *credentials);
 extern
gboolean g_dbus_auth_observer_allow_mechanism (GDBusAuthObserver *observer,
                                                         const gchar *mechanism);
# 20306 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_dbus_connection_get_type (void) __attribute__ ((__const__));
 extern
void g_bus_get (GBusType bus_type,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
 extern
GDBusConnection *g_bus_get_finish (GAsyncResult *res,
                                                GError **error);
 extern
GDBusConnection *g_bus_get_sync (GBusType bus_type,
                                                GCancellable *cancellable,
                                                GError **error);
 extern
void g_dbus_connection_new (GIOStream *stream,
                                                               const gchar *guid,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
GDBusConnection *g_dbus_connection_new_finish (GAsyncResult *res,
                                                               GError **error);
 extern
GDBusConnection *g_dbus_connection_new_sync (GIOStream *stream,
                                                               const gchar *guid,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GError **error);
 extern
void g_dbus_connection_new_for_address (const gchar *address,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
GDBusConnection *g_dbus_connection_new_for_address_finish (GAsyncResult *res,
                                                               GError **error);
 extern
GDBusConnection *g_dbus_connection_new_for_address_sync (const gchar *address,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GError **error);
 extern
void g_dbus_connection_start_message_processing (GDBusConnection *connection);
 extern
gboolean g_dbus_connection_is_closed (GDBusConnection *connection);
 extern
GIOStream *g_dbus_connection_get_stream (GDBusConnection *connection);
 extern
const gchar *g_dbus_connection_get_guid (GDBusConnection *connection);
 extern
const gchar *g_dbus_connection_get_unique_name (GDBusConnection *connection);
 extern
GCredentials *g_dbus_connection_get_peer_credentials (GDBusConnection *connection);
 extern
guint32 g_dbus_connection_get_last_serial (GDBusConnection *connection);
 extern
gboolean g_dbus_connection_get_exit_on_close (GDBusConnection *connection);
 extern
void g_dbus_connection_set_exit_on_close (GDBusConnection *connection,
                                                               gboolean exit_on_close);
 extern
GDBusCapabilityFlags g_dbus_connection_get_capabilities (GDBusConnection *connection);
 extern
GDBusConnectionFlags g_dbus_connection_get_flags (GDBusConnection *connection);
 extern
void g_dbus_connection_close (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
 extern
gboolean g_dbus_connection_close_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
 extern
gboolean g_dbus_connection_close_sync (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GError **error);
 extern
void g_dbus_connection_flush (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
 extern
gboolean g_dbus_connection_flush_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
 extern
gboolean g_dbus_connection_flush_sync (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GError **error);
 extern
gboolean g_dbus_connection_send_message (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   volatile guint32 *out_serial,
                                                                   GError **error);
 extern
void g_dbus_connection_send_message_with_reply (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint timeout_msec,
                                                                   volatile guint32 *out_serial,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
 extern
GDBusMessage *g_dbus_connection_send_message_with_reply_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
 extern
GDBusMessage *g_dbus_connection_send_message_with_reply_sync (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint timeout_msec,
                                                                   volatile guint32 *out_serial,
                                                                   GCancellable *cancellable,
                                                                   GError **error);
 extern
gboolean g_dbus_connection_emit_signal (GDBusConnection *connection,
                                                               const gchar *destination_bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *signal_name,
                                                               GVariant *parameters,
                                                               GError **error);
 extern
void g_dbus_connection_call (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
GVariant *g_dbus_connection_call_finish (GDBusConnection *connection,
                                                               GAsyncResult *res,
                                                               GError **error);
 extern
GVariant *g_dbus_connection_call_sync (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GCancellable *cancellable,
                                                               GError **error);

 extern
void g_dbus_connection_call_with_unix_fd_list (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GUnixFDList *fd_list,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
GVariant *g_dbus_connection_call_with_unix_fd_list_finish (GDBusConnection *connection,
                                                               GUnixFDList **out_fd_list,
                                                               GAsyncResult *res,
                                                               GError **error);
 extern
GVariant *g_dbus_connection_call_with_unix_fd_list_sync (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GUnixFDList *fd_list,
                                                               GUnixFDList **out_fd_list,
                                                               GCancellable *cancellable,
                                                               GError **error);

typedef void (*GDBusInterfaceMethodCallFunc) (GDBusConnection *connection,
                                              const gchar *sender,
                                              const gchar *object_path,
                                              const gchar *interface_name,
                                              const gchar *method_name,
                                              GVariant *parameters,
                                              GDBusMethodInvocation *invocation,
                                              gpointer user_data);
typedef GVariant *(*GDBusInterfaceGetPropertyFunc) (GDBusConnection *connection,
                                                    const gchar *sender,
                                                    const gchar *object_path,
                                                    const gchar *interface_name,
                                                    const gchar *property_name,
                                                    GError **error,
                                                    gpointer user_data);
typedef gboolean (*GDBusInterfaceSetPropertyFunc) (GDBusConnection *connection,
                                                    const gchar *sender,
                                                    const gchar *object_path,
                                                    const gchar *interface_name,
                                                    const gchar *property_name,
                                                    GVariant *value,
                                                    GError **error,
                                                    gpointer user_data);
struct _GDBusInterfaceVTable
{
  GDBusInterfaceMethodCallFunc method_call;
  GDBusInterfaceGetPropertyFunc get_property;
  GDBusInterfaceSetPropertyFunc set_property;


  gpointer padding[8];
};
 extern
guint g_dbus_connection_register_object (GDBusConnection *connection,
                                                               const gchar *object_path,
                                                               GDBusInterfaceInfo *interface_info,
                                                               const GDBusInterfaceVTable *vtable,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func,
                                                               GError **error);
 extern
guint g_dbus_connection_register_object_with_closures (GDBusConnection *connection,
                                                                  const gchar *object_path,
                                                                  GDBusInterfaceInfo *interface_info,
                                                                  GClosure *method_call_closure,
                                                                  GClosure *get_property_closure,
                                                                  GClosure *set_property_closure,
                                                                  GError **error);
 extern
gboolean g_dbus_connection_unregister_object (GDBusConnection *connection,
                                                               guint registration_id);
typedef gchar** (*GDBusSubtreeEnumerateFunc) (GDBusConnection *connection,
                                              const gchar *sender,
                                              const gchar *object_path,
                                              gpointer user_data);
typedef GDBusInterfaceInfo ** (*GDBusSubtreeIntrospectFunc) (GDBusConnection *connection,
                                                             const gchar *sender,
                                                             const gchar *object_path,
                                                             const gchar *node,
                                                             gpointer user_data);
typedef const GDBusInterfaceVTable * (*GDBusSubtreeDispatchFunc) (GDBusConnection *connection,
                                                                  const gchar *sender,
                                                                  const gchar *object_path,
                                                                  const gchar *interface_name,
                                                                  const gchar *node,
                                                                  gpointer *out_user_data,
                                                                  gpointer user_data);
struct _GDBusSubtreeVTable
{
  GDBusSubtreeEnumerateFunc enumerate;
  GDBusSubtreeIntrospectFunc introspect;
  GDBusSubtreeDispatchFunc dispatch;


  gpointer padding[8];
};
 extern
guint g_dbus_connection_register_subtree (GDBusConnection *connection,
                                                               const gchar *object_path,
                                                               const GDBusSubtreeVTable *vtable,
                                                               GDBusSubtreeFlags flags,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func,
                                                               GError **error);
 extern
gboolean g_dbus_connection_unregister_subtree (GDBusConnection *connection,
                                                               guint registration_id);
typedef void (*GDBusSignalCallback) (GDBusConnection *connection,
                                     const gchar *sender_name,
                                     const gchar *object_path,
                                     const gchar *interface_name,
                                     const gchar *signal_name,
                                     GVariant *parameters,
                                     gpointer user_data);
 extern
guint g_dbus_connection_signal_subscribe (GDBusConnection *connection,
                                                               const gchar *sender,
                                                               const gchar *interface_name,
                                                               const gchar *member,
                                                               const gchar *object_path,
                                                               const gchar *arg0,
                                                               GDBusSignalFlags flags,
                                                               GDBusSignalCallback callback,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func);
 extern
void g_dbus_connection_signal_unsubscribe (GDBusConnection *connection,
                                                               guint subscription_id);
typedef GDBusMessage *(*GDBusMessageFilterFunction) (GDBusConnection *connection,
                                                     GDBusMessage *message,
                                                     gboolean incoming,
                                                     gpointer user_data);
 extern
guint g_dbus_connection_add_filter (GDBusConnection *connection,
                                    GDBusMessageFilterFunction filter_function,
                                    gpointer user_data,
                                    GDestroyNotify user_data_free_func);
 extern
void g_dbus_connection_remove_filter (GDBusConnection *connection,
                                       guint filter_id);
# 20631 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GQuark g_dbus_error_quark (void);
 extern
gboolean g_dbus_error_is_remote_error (const GError *error);
 extern
gchar *g_dbus_error_get_remote_error (const GError *error);
 extern
gboolean g_dbus_error_strip_remote_error (GError *error);
struct _GDBusErrorEntry
{
  gint error_code;
  const gchar *dbus_error_name;
};
 extern
gboolean g_dbus_error_register_error (GQuark error_domain,
                                             gint error_code,
                                             const gchar *dbus_error_name);
 extern
gboolean g_dbus_error_unregister_error (GQuark error_domain,
                                             gint error_code,
                                             const gchar *dbus_error_name);
 extern
void g_dbus_error_register_error_domain (const gchar *error_domain_quark_name,
                                             volatile gsize *quark_volatile,
                                             const GDBusErrorEntry *entries,
                                             guint num_entries);
 extern
GError *g_dbus_error_new_for_dbus_error (const gchar *dbus_error_name,
                                             const gchar *dbus_error_message);
 extern
void g_dbus_error_set_dbus_error (GError **error,
                                             const gchar *dbus_error_name,
                                             const gchar *dbus_error_message,
                                             const gchar *format,
                                             ...) __attribute__((__format__ (__printf__, 4, 5)));
 extern
void g_dbus_error_set_dbus_error_valist (GError **error,
                                             const gchar *dbus_error_name,
                                             const gchar *dbus_error_message,
                                             const gchar *format,
                                             va_list var_args) __attribute__((__format__ (__printf__, 4, 0)));
 extern
gchar *g_dbus_error_encode_gerror (const GError *error);
# 20683 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusInterfaceIface GDBusInterfaceIface;
struct _GDBusInterfaceIface
{
  GTypeInterface parent_iface;

  GDBusInterfaceInfo *(*get_info) (GDBusInterface *interface_);
  GDBusObject *(*get_object) (GDBusInterface *interface_);
  void (*set_object) (GDBusInterface *interface_,
                                       GDBusObject *object);
  GDBusObject *(*dup_object) (GDBusInterface *interface_);
};
 extern
GType g_dbus_interface_get_type (void) __attribute__ ((__const__));
 extern
GDBusInterfaceInfo *g_dbus_interface_get_info (GDBusInterface *interface_);
 extern
GDBusObject *g_dbus_interface_get_object (GDBusInterface *interface_);
 extern
void g_dbus_interface_set_object (GDBusInterface *interface_,
                                                         GDBusObject *object);
 extern
GDBusObject *g_dbus_interface_dup_object (GDBusInterface *interface_);
# 20716 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass;
typedef struct _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate;
struct _GDBusInterfaceSkeleton
{

  GObject parent_instance;
  GDBusInterfaceSkeletonPrivate *priv;
};
struct _GDBusInterfaceSkeletonClass
{
  GObjectClass parent_class;

  GDBusInterfaceInfo *(*get_info) (GDBusInterfaceSkeleton *interface_);
  GDBusInterfaceVTable *(*get_vtable) (GDBusInterfaceSkeleton *interface_);
  GVariant *(*get_properties) (GDBusInterfaceSkeleton *interface_);
  void (*flush) (GDBusInterfaceSkeleton *interface_);

  gpointer vfunc_padding[8];


  gboolean (*g_authorize_method) (GDBusInterfaceSkeleton *interface_,
                                  GDBusMethodInvocation *invocation);

  gpointer signal_padding[8];
};
 extern
GType g_dbus_interface_skeleton_get_type (void) __attribute__ ((__const__));
 extern
GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags (GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_interface_skeleton_set_flags (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusInterfaceSkeletonFlags flags);
 extern
GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info (GDBusInterfaceSkeleton *interface_);
 extern
GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable (GDBusInterfaceSkeleton *interface_);
 extern
GVariant *g_dbus_interface_skeleton_get_properties (GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_interface_skeleton_flush (GDBusInterfaceSkeleton *interface_);
 extern
gboolean g_dbus_interface_skeleton_export (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection,
                                                                        const gchar *object_path,
                                                                        GError **error);
 extern
void g_dbus_interface_skeleton_unexport (GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_interface_skeleton_unexport_from_connection (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection);
 extern
GDBusConnection *g_dbus_interface_skeleton_get_connection (GDBusInterfaceSkeleton *interface_);
 extern
GList *g_dbus_interface_skeleton_get_connections (GDBusInterfaceSkeleton *interface_);
 extern
gboolean g_dbus_interface_skeleton_has_connection (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection);
 extern
const gchar *g_dbus_interface_skeleton_get_object_path (GDBusInterfaceSkeleton *interface_);
# 20783 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
struct _GDBusAnnotationInfo
{

  gint ref_count;
  gchar *key;
  gchar *value;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusArgInfo
{

  gint ref_count;
  gchar *name;
  gchar *signature;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusMethodInfo
{

  gint ref_count;
  gchar *name;
  GDBusArgInfo **in_args;
  GDBusArgInfo **out_args;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusSignalInfo
{

  gint ref_count;
  gchar *name;
  GDBusArgInfo **args;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusPropertyInfo
{

  gint ref_count;
  gchar *name;
  gchar *signature;
  GDBusPropertyInfoFlags flags;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusInterfaceInfo
{

  gint ref_count;
  gchar *name;
  GDBusMethodInfo **methods;
  GDBusSignalInfo **signals;
  GDBusPropertyInfo **properties;
  GDBusAnnotationInfo **annotations;
};
struct _GDBusNodeInfo
{

  gint ref_count;
  gchar *path;
  GDBusInterfaceInfo **interfaces;
  GDBusNodeInfo **nodes;
  GDBusAnnotationInfo **annotations;
};
 extern
const gchar *g_dbus_annotation_info_lookup (GDBusAnnotationInfo **annotations,
                                                            const gchar *name);
 extern
GDBusMethodInfo *g_dbus_interface_info_lookup_method (GDBusInterfaceInfo *info,
                                                            const gchar *name);
 extern
GDBusSignalInfo *g_dbus_interface_info_lookup_signal (GDBusInterfaceInfo *info,
                                                            const gchar *name);
 extern
GDBusPropertyInfo *g_dbus_interface_info_lookup_property (GDBusInterfaceInfo *info,
                                                            const gchar *name);
 extern
void g_dbus_interface_info_cache_build (GDBusInterfaceInfo *info);
 extern
void g_dbus_interface_info_cache_release (GDBusInterfaceInfo *info);
 extern
void g_dbus_interface_info_generate_xml (GDBusInterfaceInfo *info,
                                                            guint indent,
                                                            GString *string_builder);
 extern
GDBusNodeInfo *g_dbus_node_info_new_for_xml (const gchar *xml_data,
                                                            GError **error);
 extern
GDBusInterfaceInfo *g_dbus_node_info_lookup_interface (GDBusNodeInfo *info,
                                                            const gchar *name);
 extern
void g_dbus_node_info_generate_xml (GDBusNodeInfo *info,
                                                            guint indent,
                                                            GString *string_builder);
 extern
GDBusNodeInfo *g_dbus_node_info_ref (GDBusNodeInfo *info);
 extern
GDBusInterfaceInfo *g_dbus_interface_info_ref (GDBusInterfaceInfo *info);
 extern
GDBusMethodInfo *g_dbus_method_info_ref (GDBusMethodInfo *info);
 extern
GDBusSignalInfo *g_dbus_signal_info_ref (GDBusSignalInfo *info);
 extern
GDBusPropertyInfo *g_dbus_property_info_ref (GDBusPropertyInfo *info);
 extern
GDBusArgInfo *g_dbus_arg_info_ref (GDBusArgInfo *info);
 extern
GDBusAnnotationInfo *g_dbus_annotation_info_ref (GDBusAnnotationInfo *info);
 extern
void g_dbus_node_info_unref (GDBusNodeInfo *info);
 extern
void g_dbus_interface_info_unref (GDBusInterfaceInfo *info);
 extern
void g_dbus_method_info_unref (GDBusMethodInfo *info);
 extern
void g_dbus_signal_info_unref (GDBusSignalInfo *info);
 extern
void g_dbus_property_info_unref (GDBusPropertyInfo *info);
 extern
void g_dbus_arg_info_unref (GDBusArgInfo *info);
 extern
void g_dbus_annotation_info_unref (GDBusAnnotationInfo *info);







 extern
GType g_dbus_node_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_interface_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_method_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_signal_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_property_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_arg_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_annotation_info_get_type (void) __attribute__ ((__const__));
# 20933 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusMenuModel GDBusMenuModel;
 extern
GType g_dbus_menu_model_get_type (void) __attribute__ ((__const__));
 extern
GDBusMenuModel * g_dbus_menu_model_get (GDBusConnection *connection,
                                                        const gchar *bus_name,
                                                        const gchar *object_path);
# 20951 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_dbus_message_get_type (void) __attribute__ ((__const__));
 extern
GDBusMessage *g_dbus_message_new (void);
 extern
GDBusMessage *g_dbus_message_new_signal (const gchar *path,
                                                             const gchar *interface_,
                                                             const gchar *signal);
 extern
GDBusMessage *g_dbus_message_new_method_call (const gchar *name,
                                                             const gchar *path,
                                                             const gchar *interface_,
                                                             const gchar *method);
 extern
GDBusMessage *g_dbus_message_new_method_reply (GDBusMessage *method_call_message);
 extern
GDBusMessage *g_dbus_message_new_method_error (GDBusMessage *method_call_message,
                                                             const gchar *error_name,
                                                             const gchar *error_message_format,
                                                             ...) __attribute__((__format__ (__printf__, 3, 4)));
 extern
GDBusMessage *g_dbus_message_new_method_error_valist (GDBusMessage *method_call_message,
                                                                  const gchar *error_name,
                                                                  const gchar *error_message_format,
                                                                  va_list var_args);
 extern
GDBusMessage *g_dbus_message_new_method_error_literal (GDBusMessage *method_call_message,
                                                                   const gchar *error_name,
                                                                   const gchar *error_message);
 extern
gchar *g_dbus_message_print (GDBusMessage *message,
                                                             guint indent);
 extern
gboolean g_dbus_message_get_locked (GDBusMessage *message);
 extern
void g_dbus_message_lock (GDBusMessage *message);
 extern
GDBusMessage *g_dbus_message_copy (GDBusMessage *message,
                                                             GError **error);
 extern
GDBusMessageByteOrder g_dbus_message_get_byte_order (GDBusMessage *message);
 extern
void g_dbus_message_set_byte_order (GDBusMessage *message,
                                                             GDBusMessageByteOrder byte_order);
 extern
GDBusMessageType g_dbus_message_get_message_type (GDBusMessage *message);
 extern
void g_dbus_message_set_message_type (GDBusMessage *message,
                                                             GDBusMessageType type);
 extern
GDBusMessageFlags g_dbus_message_get_flags (GDBusMessage *message);
 extern
void g_dbus_message_set_flags (GDBusMessage *message,
                                                             GDBusMessageFlags flags);
 extern
guint32 g_dbus_message_get_serial (GDBusMessage *message);
 extern
void g_dbus_message_set_serial (GDBusMessage *message,
                                                             guint32 serial);
 extern
GVariant *g_dbus_message_get_header (GDBusMessage *message,
                                                             GDBusMessageHeaderField header_field);
 extern
void g_dbus_message_set_header (GDBusMessage *message,
                                                             GDBusMessageHeaderField header_field,
                                                             GVariant *value);
 extern
guchar *g_dbus_message_get_header_fields (GDBusMessage *message);
 extern
GVariant *g_dbus_message_get_body (GDBusMessage *message);
 extern
void g_dbus_message_set_body (GDBusMessage *message,
                                                             GVariant *body);

 extern
GUnixFDList *g_dbus_message_get_unix_fd_list (GDBusMessage *message);
 extern
void g_dbus_message_set_unix_fd_list (GDBusMessage *message,
                                                             GUnixFDList *fd_list);

 extern
guint32 g_dbus_message_get_reply_serial (GDBusMessage *message);
 extern
void g_dbus_message_set_reply_serial (GDBusMessage *message,
                                                             guint32 value);
 extern
const gchar *g_dbus_message_get_interface (GDBusMessage *message);
 extern
void g_dbus_message_set_interface (GDBusMessage *message,
                                                             const gchar *value);
 extern
const gchar *g_dbus_message_get_member (GDBusMessage *message);
 extern
void g_dbus_message_set_member (GDBusMessage *message,
                                                             const gchar *value);
 extern
const gchar *g_dbus_message_get_path (GDBusMessage *message);
 extern
void g_dbus_message_set_path (GDBusMessage *message,
                                                             const gchar *value);
 extern
const gchar *g_dbus_message_get_sender (GDBusMessage *message);
 extern
void g_dbus_message_set_sender (GDBusMessage *message,
                                                             const gchar *value);
 extern
const gchar *g_dbus_message_get_destination (GDBusMessage *message);
 extern
void g_dbus_message_set_destination (GDBusMessage *message,
                                                             const gchar *value);
 extern
const gchar *g_dbus_message_get_error_name (GDBusMessage *message);
 extern
void g_dbus_message_set_error_name (GDBusMessage *message,
                                                             const gchar *value);
 extern
const gchar *g_dbus_message_get_signature (GDBusMessage *message);
 extern
void g_dbus_message_set_signature (GDBusMessage *message,
                                                             const gchar *value);
 extern
guint32 g_dbus_message_get_num_unix_fds (GDBusMessage *message);
 extern
void g_dbus_message_set_num_unix_fds (GDBusMessage *message,
                                                             guint32 value);
 extern
const gchar *g_dbus_message_get_arg0 (GDBusMessage *message);
 extern
GDBusMessage *g_dbus_message_new_from_blob (guchar *blob,
                                                             gsize blob_len,
                                                             GDBusCapabilityFlags capabilities,
                                                             GError **error);
 extern
gssize g_dbus_message_bytes_needed (guchar *blob,
                                                             gsize blob_len,
                                                             GError **error);
 extern
guchar *g_dbus_message_to_blob (GDBusMessage *message,
                                                             gsize *out_size,
                                                             GDBusCapabilityFlags capabilities,
                                                             GError **error);
 extern
gboolean g_dbus_message_to_gerror (GDBusMessage *message,
                                                             GError **error);
# 21108 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_dbus_method_invocation_get_type (void) __attribute__ ((__const__));
 extern
const gchar *g_dbus_method_invocation_get_sender (GDBusMethodInvocation *invocation);
 extern
const gchar *g_dbus_method_invocation_get_object_path (GDBusMethodInvocation *invocation);
 extern
const gchar *g_dbus_method_invocation_get_interface_name (GDBusMethodInvocation *invocation);
 extern
const gchar *g_dbus_method_invocation_get_method_name (GDBusMethodInvocation *invocation);
 extern
const GDBusMethodInfo *g_dbus_method_invocation_get_method_info (GDBusMethodInvocation *invocation);
 extern
const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info (GDBusMethodInvocation *invocation);
 extern
GDBusConnection *g_dbus_method_invocation_get_connection (GDBusMethodInvocation *invocation);
 extern
GDBusMessage *g_dbus_method_invocation_get_message (GDBusMethodInvocation *invocation);
 extern
GVariant *g_dbus_method_invocation_get_parameters (GDBusMethodInvocation *invocation);
 extern
gpointer g_dbus_method_invocation_get_user_data (GDBusMethodInvocation *invocation);
 extern
void g_dbus_method_invocation_return_value (GDBusMethodInvocation *invocation,
                                                                      GVariant *parameters);

 extern
void g_dbus_method_invocation_return_value_with_unix_fd_list (GDBusMethodInvocation *invocation,
                                                                                GVariant *parameters,
                                                                                GUnixFDList *fd_list);

 extern
void g_dbus_method_invocation_return_error (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *format,
                                                                      ...) __attribute__((__format__ (__printf__, 4, 5)));
 extern
void g_dbus_method_invocation_return_error_valist (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *format,
                                                                      va_list var_args)
                                                                      __attribute__((__format__ (__printf__, 4, 0)));
 extern
void g_dbus_method_invocation_return_error_literal (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *message);
 extern
void g_dbus_method_invocation_return_gerror (GDBusMethodInvocation *invocation,
                                                                      const GError *error);
 extern
void g_dbus_method_invocation_take_error (GDBusMethodInvocation *invocation,
                                                                      GError *error);
 extern
void g_dbus_method_invocation_return_dbus_error (GDBusMethodInvocation *invocation,
                                                                      const gchar *error_name,
                                                                      const gchar *error_message);
# 21175 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef void (*GBusAcquiredCallback) (GDBusConnection *connection,
                                      const gchar *name,
                                      gpointer user_data);
typedef void (*GBusNameAcquiredCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          gpointer user_data);
typedef void (*GBusNameLostCallback) (GDBusConnection *connection,
                                      const gchar *name,
                                      gpointer user_data);
 extern
guint g_bus_own_name (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GBusAcquiredCallback bus_acquired_handler,
                                      GBusNameAcquiredCallback name_acquired_handler,
                                      GBusNameLostCallback name_lost_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
 extern
guint g_bus_own_name_on_connection (GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GBusNameAcquiredCallback name_acquired_handler,
                                      GBusNameLostCallback name_lost_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
 extern
guint g_bus_own_name_with_closures (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GClosure *bus_acquired_closure,
                                      GClosure *name_acquired_closure,
                                      GClosure *name_lost_closure);
 extern
guint g_bus_own_name_on_connection_with_closures (
                                      GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GClosure *name_acquired_closure,
                                      GClosure *name_lost_closure);
 extern
void g_bus_unown_name (guint owner_id);
# 21225 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef void (*GBusNameAppearedCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          const gchar *name_owner,
                                          gpointer user_data);
typedef void (*GBusNameVanishedCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          gpointer user_data);
 extern
guint g_bus_watch_name (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GBusNameAppearedCallback name_appeared_handler,
                                      GBusNameVanishedCallback name_vanished_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
 extern
guint g_bus_watch_name_on_connection (GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GBusNameAppearedCallback name_appeared_handler,
                                      GBusNameVanishedCallback name_vanished_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
 extern
guint g_bus_watch_name_with_closures (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GClosure *name_appeared_closure,
                                      GClosure *name_vanished_closure);
 extern
guint g_bus_watch_name_on_connection_with_closures (
                                      GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GClosure *name_appeared_closure,
                                      GClosure *name_vanished_closure);
 extern
void g_bus_unwatch_name (guint watcher_id);
# 21272 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusObjectIface GDBusObjectIface;
struct _GDBusObjectIface
{
  GTypeInterface parent_iface;

  const gchar *(*get_object_path) (GDBusObject *object);
  GList *(*get_interfaces) (GDBusObject *object);
  GDBusInterface *(*get_interface) (GDBusObject *object,
                                       const gchar *interface_name);

  void (*interface_added) (GDBusObject *object,
                             GDBusInterface *interface_);
  void (*interface_removed) (GDBusObject *object,
                             GDBusInterface *interface_);
};
 extern
GType g_dbus_object_get_type (void) __attribute__ ((__const__));
 extern
const gchar *g_dbus_object_get_object_path (GDBusObject *object);
 extern
GList *g_dbus_object_get_interfaces (GDBusObject *object);
 extern
GDBusInterface *g_dbus_object_get_interface (GDBusObject *object,
                                                const gchar *interface_name);
# 21305 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusObjectManagerIface GDBusObjectManagerIface;
struct _GDBusObjectManagerIface
{
  GTypeInterface parent_iface;

  const gchar *(*get_object_path) (GDBusObjectManager *manager);
  GList *(*get_objects) (GDBusObjectManager *manager);
  GDBusObject *(*get_object) (GDBusObjectManager *manager,
                                       const gchar *object_path);
  GDBusInterface *(*get_interface) (GDBusObjectManager *manager,
                                       const gchar *object_path,
                                       const gchar *interface_name);

  void (*object_added) (GDBusObjectManager *manager,
                                           GDBusObject *object);
  void (*object_removed) (GDBusObjectManager *manager,
                                           GDBusObject *object);
  void (*interface_added) (GDBusObjectManager *manager,
                                           GDBusObject *object,
                                           GDBusInterface *interface_);
  void (*interface_removed) (GDBusObjectManager *manager,
                                           GDBusObject *object,
                                           GDBusInterface *interface_);
};
 extern
GType g_dbus_object_manager_get_type (void) __attribute__ ((__const__));
 extern
const gchar *g_dbus_object_manager_get_object_path (GDBusObjectManager *manager);
 extern
GList *g_dbus_object_manager_get_objects (GDBusObjectManager *manager);
 extern
GDBusObject *g_dbus_object_manager_get_object (GDBusObjectManager *manager,
                                                        const gchar *object_path);
 extern
GDBusInterface *g_dbus_object_manager_get_interface (GDBusObjectManager *manager,
                                                        const gchar *object_path,
                                                        const gchar *interface_name);
# 21353 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusObjectManagerClientClass GDBusObjectManagerClientClass;
typedef struct _GDBusObjectManagerClientPrivate GDBusObjectManagerClientPrivate;
struct _GDBusObjectManagerClient
{

  GObject parent_instance;
  GDBusObjectManagerClientPrivate *priv;
};
struct _GDBusObjectManagerClientClass
{
  GObjectClass parent_class;

  void (*interface_proxy_signal) (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy *object_proxy,
                                                 GDBusProxy *interface_proxy,
                                                 const gchar *sender_name,
                                                 const gchar *signal_name,
                                                 GVariant *parameters);
  void (*interface_proxy_properties_changed) (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy *object_proxy,
                                                 GDBusProxy *interface_proxy,
                                                 GVariant *changed_properties,
                                                 const gchar* const *invalidated_properties);

  gpointer padding[8];
};
 extern
GType g_dbus_object_manager_client_get_type (void) __attribute__ ((__const__));
 extern
void g_dbus_object_manager_client_new (GDBusConnection *connection,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GAsyncReadyCallback callback,
                                                                               gpointer user_data);
 extern
GDBusObjectManager *g_dbus_object_manager_client_new_finish (GAsyncResult *res,
                                                                               GError **error);
 extern
GDBusObjectManager *g_dbus_object_manager_client_new_sync (GDBusConnection *connection,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GError **error);
 extern
void g_dbus_object_manager_client_new_for_bus (GBusType bus_type,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GAsyncReadyCallback callback,
                                                                               gpointer user_data);
 extern
GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish (GAsyncResult *res,
                                                                               GError **error);
 extern
GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync (GBusType bus_type,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GError **error);
 extern
GDBusConnection *g_dbus_object_manager_client_get_connection (GDBusObjectManagerClient *manager);
 extern
GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags (GDBusObjectManagerClient *manager);
 extern
const gchar *g_dbus_object_manager_client_get_name (GDBusObjectManagerClient *manager);
 extern
gchar *g_dbus_object_manager_client_get_name_owner (GDBusObjectManagerClient *manager);
# 21448 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusObjectManagerServerClass GDBusObjectManagerServerClass;
typedef struct _GDBusObjectManagerServerPrivate GDBusObjectManagerServerPrivate;
struct _GDBusObjectManagerServer
{

  GObject parent_instance;
  GDBusObjectManagerServerPrivate *priv;
};
struct _GDBusObjectManagerServerClass
{
  GObjectClass parent_class;

  gpointer padding[8];
};
 extern
GType g_dbus_object_manager_server_get_type (void) __attribute__ ((__const__));
 extern
GDBusObjectManagerServer *g_dbus_object_manager_server_new (const gchar *object_path);
 extern
GDBusConnection *g_dbus_object_manager_server_get_connection (GDBusObjectManagerServer *manager);
 extern
void g_dbus_object_manager_server_set_connection (GDBusObjectManagerServer *manager,
                                                                            GDBusConnection *connection);
 extern
void g_dbus_object_manager_server_export (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
 extern
void g_dbus_object_manager_server_export_uniquely (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
 extern
gboolean g_dbus_object_manager_server_is_exported (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
 extern
gboolean g_dbus_object_manager_server_unexport (GDBusObjectManagerServer *manager,
                                                                            const gchar *object_path);
# 21494 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusObjectProxyClass GDBusObjectProxyClass;
typedef struct _GDBusObjectProxyPrivate GDBusObjectProxyPrivate;
struct _GDBusObjectProxy
{

  GObject parent_instance;
  GDBusObjectProxyPrivate *priv;
};
struct _GDBusObjectProxyClass
{
  GObjectClass parent_class;

  gpointer padding[8];
};
 extern
GType g_dbus_object_proxy_get_type (void) __attribute__ ((__const__));
 extern
GDBusObjectProxy *g_dbus_object_proxy_new (GDBusConnection *connection,
                                                      const gchar *object_path);
 extern
GDBusConnection *g_dbus_object_proxy_get_connection (GDBusObjectProxy *proxy);
# 21526 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusObjectSkeletonClass GDBusObjectSkeletonClass;
typedef struct _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate;
struct _GDBusObjectSkeleton
{

  GObject parent_instance;
  GDBusObjectSkeletonPrivate *priv;
};
struct _GDBusObjectSkeletonClass
{
  GObjectClass parent_class;

  gboolean (*authorize_method) (GDBusObjectSkeleton *object,
                                GDBusInterfaceSkeleton *interface_,
                                GDBusMethodInvocation *invocation);

  gpointer padding[8];
};
 extern
GType g_dbus_object_skeleton_get_type (void) __attribute__ ((__const__));
 extern
GDBusObjectSkeleton *g_dbus_object_skeleton_new (const gchar *object_path);
 extern
void g_dbus_object_skeleton_flush (GDBusObjectSkeleton *object);
 extern
void g_dbus_object_skeleton_add_interface (GDBusObjectSkeleton *object,
                                                                       GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_object_skeleton_remove_interface (GDBusObjectSkeleton *object,
                                                                       GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_object_skeleton_remove_interface_by_name (GDBusObjectSkeleton *object,
                                                                       const gchar *interface_name);
 extern
void g_dbus_object_skeleton_set_object_path (GDBusObjectSkeleton *object,
                                                                       const gchar *object_path);
# 21576 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDBusProxyClass GDBusProxyClass;
typedef struct _GDBusProxyPrivate GDBusProxyPrivate;
struct _GDBusProxy
{

  GObject parent_instance;
  GDBusProxyPrivate *priv;
};
struct _GDBusProxyClass
{

  GObjectClass parent_class;


  void (*g_properties_changed) (GDBusProxy *proxy,
                                GVariant *changed_properties,
                                const gchar* const *invalidated_properties);
  void (*g_signal) (GDBusProxy *proxy,
                                const gchar *sender_name,
                                const gchar *signal_name,
                                GVariant *parameters);


  gpointer padding[32];
};
 extern
GType g_dbus_proxy_get_type (void) __attribute__ ((__const__));
 extern
void g_dbus_proxy_new (GDBusConnection *connection,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
GDBusProxy *g_dbus_proxy_new_finish (GAsyncResult *res,
                                                         GError **error);
 extern
GDBusProxy *g_dbus_proxy_new_sync (GDBusConnection *connection,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
void g_dbus_proxy_new_for_bus (GBusType bus_type,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
GDBusProxy *g_dbus_proxy_new_for_bus_finish (GAsyncResult *res,
                                                         GError **error);
 extern
GDBusProxy *g_dbus_proxy_new_for_bus_sync (GBusType bus_type,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
GDBusConnection *g_dbus_proxy_get_connection (GDBusProxy *proxy);
 extern
GDBusProxyFlags g_dbus_proxy_get_flags (GDBusProxy *proxy);
 extern
const gchar *g_dbus_proxy_get_name (GDBusProxy *proxy);
 extern
gchar *g_dbus_proxy_get_name_owner (GDBusProxy *proxy);
 extern
const gchar *g_dbus_proxy_get_object_path (GDBusProxy *proxy);
 extern
const gchar *g_dbus_proxy_get_interface_name (GDBusProxy *proxy);
 extern
gint g_dbus_proxy_get_default_timeout (GDBusProxy *proxy);
 extern
void g_dbus_proxy_set_default_timeout (GDBusProxy *proxy,
                                                         gint timeout_msec);
 extern
GDBusInterfaceInfo *g_dbus_proxy_get_interface_info (GDBusProxy *proxy);
 extern
void g_dbus_proxy_set_interface_info (GDBusProxy *proxy,
                                                         GDBusInterfaceInfo *info);
 extern
GVariant *g_dbus_proxy_get_cached_property (GDBusProxy *proxy,
                                                         const gchar *property_name);
 extern
void g_dbus_proxy_set_cached_property (GDBusProxy *proxy,
                                                         const gchar *property_name,
                                                         GVariant *value);
 extern
gchar **g_dbus_proxy_get_cached_property_names (GDBusProxy *proxy);
 extern
void g_dbus_proxy_call (GDBusProxy *proxy,
                                                         const gchar *method_name,
                                                         GVariant *parameters,
                                                         GDBusCallFlags flags,
                                                         gint timeout_msec,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
GVariant *g_dbus_proxy_call_finish (GDBusProxy *proxy,
                                                         GAsyncResult *res,
                                                         GError **error);
 extern
GVariant *g_dbus_proxy_call_sync (GDBusProxy *proxy,
                                                         const gchar *method_name,
                                                         GVariant *parameters,
                                                         GDBusCallFlags flags,
                                                         gint timeout_msec,
                                                         GCancellable *cancellable,
                                                         GError **error);

 extern
void g_dbus_proxy_call_with_unix_fd_list (GDBusProxy *proxy,
                                                             const gchar *method_name,
                                                             GVariant *parameters,
                                                             GDBusCallFlags flags,
                                                             gint timeout_msec,
                                                             GUnixFDList *fd_list,
                                                             GCancellable *cancellable,
                                                             GAsyncReadyCallback callback,
                                                             gpointer user_data);
 extern
GVariant *g_dbus_proxy_call_with_unix_fd_list_finish (GDBusProxy *proxy,
                                                             GUnixFDList **out_fd_list,
                                                             GAsyncResult *res,
                                                             GError **error);
 extern
GVariant *g_dbus_proxy_call_with_unix_fd_list_sync (GDBusProxy *proxy,
                                                             const gchar *method_name,
                                                             GVariant *parameters,
                                                             GDBusCallFlags flags,
                                                             gint timeout_msec,
                                                             GUnixFDList *fd_list,
                                                             GUnixFDList **out_fd_list,
                                                             GCancellable *cancellable,
                                                             GError **error);
# 21737 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_dbus_server_get_type (void) __attribute__ ((__const__));
 extern
GDBusServer *g_dbus_server_new_sync (const gchar *address,
                                                    GDBusServerFlags flags,
                                                    const gchar *guid,
                                                    GDBusAuthObserver *observer,
                                                    GCancellable *cancellable,
                                                    GError **error);
 extern
const gchar *g_dbus_server_get_client_address (GDBusServer *server);
 extern
const gchar *g_dbus_server_get_guid (GDBusServer *server);
 extern
GDBusServerFlags g_dbus_server_get_flags (GDBusServer *server);
 extern
void g_dbus_server_start (GDBusServer *server);
 extern
void g_dbus_server_stop (GDBusServer *server);
 extern
gboolean g_dbus_server_is_active (GDBusServer *server);
# 21766 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gboolean g_dbus_is_guid (const gchar *string);
 extern
gchar *g_dbus_generate_guid (void);
 extern
gboolean g_dbus_is_name (const gchar *string);
 extern
gboolean g_dbus_is_unique_name (const gchar *string);
 extern
gboolean g_dbus_is_member_name (const gchar *string);
 extern
gboolean g_dbus_is_interface_name (const gchar *string);
 extern
gboolean g_dbus_is_error_name (const gchar *string);
 extern
void g_dbus_gvariant_to_gvalue (GVariant *value,
                                GValue *out_gvalue);
 extern
GVariant *g_dbus_gvalue_to_gvariant (const GValue *gvalue,
                                     const GVariantType *type);
 extern
gchar *g_dbus_escape_object_path_bytestring (const guint8 *bytes);
 extern
gchar *g_dbus_escape_object_path (const gchar *s);
 extern
guint8 *g_dbus_unescape_object_path (const gchar *s);
# 21802 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_debug_controller_get_type (void);
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 typedef struct _GDebugController GDebugController; typedef struct _GDebugControllerInterface GDebugControllerInterface; typedef GDebugController *GDebugController_autoptr; typedef GList *GDebugController_listautoptr; typedef GSList *GDebugController_slistautoptr; typedef GQueue *GDebugController_queueautoptr;
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugController (GDebugController *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugController (GDebugController **_ptr) { glib_autoptr_clear_GDebugController (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugController (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugController (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugController (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 __attribute__ ((__unused__)) static inline GDebugController * g_debug_controller (gpointer ptr) { return (((GDebugController*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_debug_controller_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean g_IS_debug_controller (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_debug_controller_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GDebugControllerInterface * g_debug_controller_GET_IFACE (gpointer ptr) { return (((GDebugControllerInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_debug_controller_get_type ())))); }
# 21803 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop



struct _GDebugControllerInterface {

  GTypeInterface g_iface;
};
 extern
gboolean g_debug_controller_get_debug_enabled (GDebugController *self);
 extern
void g_debug_controller_set_debug_enabled (GDebugController *self,
                                                                 gboolean debug_enabled);






 extern
GType g_debug_controller_dbus_get_type (void);
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 typedef struct _GDebugControllerDBus GDebugControllerDBus; typedef struct _GDebugControllerDBusClass GDebugControllerDBusClass; struct _GDebugControllerDBus { GObject parent_instance; }; typedef GDebugControllerDBus *GDebugControllerDBus_autoptr; typedef GList *GDebugControllerDBus_listautoptr; typedef GSList *GDebugControllerDBus_slistautoptr; typedef GQueue *GDebugControllerDBus_queueautoptr;
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugControllerDBus (GDebugControllerDBus *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugControllerDBus (GDebugControllerDBus **_ptr) { glib_autoptr_clear_GDebugControllerDBus (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugControllerDBus (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugControllerDBus (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugControllerDBus (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 typedef GDebugControllerDBusClass *GDebugControllerDBusClass_autoptr; typedef GList *GDebugControllerDBusClass_listautoptr; typedef GSList *GDebugControllerDBusClass_slistautoptr; typedef GQueue *GDebugControllerDBusClass_queueautoptr;
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugControllerDBusClass (GDebugControllerDBusClass *_ptr) { if (_ptr) (g_type_class_unref) ((GDebugControllerDBusClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugControllerDBusClass (GDebugControllerDBusClass **_ptr) { glib_autoptr_clear_GDebugControllerDBusClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugControllerDBusClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugControllerDBusClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugControllerDBusClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 __attribute__ ((__unused__)) static inline GDebugControllerDBus * G_DEBUG_CONTROLLER_DBUS (gpointer ptr) { return (((GDebugControllerDBus*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_debug_controller_dbus_get_type ())))); } __attribute__ ((__unused__)) static inline GDebugControllerDBusClass * G_DEBUG_CONTROLLER_DBUS_CLASS (gpointer ptr) { return (((GDebugControllerDBusClass*) (void *) g_type_check_class_cast ((GTypeClass*) (ptr), (g_debug_controller_dbus_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean G_IS_DEBUG_CONTROLLER_DBUS (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_debug_controller_dbus_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline gboolean G_IS_DEBUG_CONTROLLER_DBUS_CLASS (gpointer ptr) { return ((__extension__ ({ GTypeClass *__class = (GTypeClass*) (ptr); GType __t = (g_debug_controller_dbus_get_type ()); gboolean __r; if (!__class) __r = (0); else if (__class->g_type == __t) __r = (!(0)); else __r = g_type_check_class_is_a (__class, __t); __r; }))); } __attribute__ ((__unused__)) static inline GDebugControllerDBusClass * G_DEBUG_CONTROLLER_DBUS_GET_CLASS (gpointer ptr) { return (((GDebugControllerDBusClass*) (((GTypeInstance*) (ptr))->g_class))); }
# 21823 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
struct _GDebugControllerDBusClass
{
  GObjectClass parent_class;
  gboolean (*authorize) (GDebugControllerDBus *controller,
                          GDBusMethodInvocation *invocation);
  gpointer padding[12];
};
 extern
GDebugControllerDBus *g_debug_controller_dbus_new (GDBusConnection *connection,
                                                   GCancellable *cancellable,
                                                   GError **error);
 extern
void g_debug_controller_dbus_stop (GDebugControllerDBus *self);
# 21850 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDriveIface GDriveIface;
struct _GDriveIface
{
  GTypeInterface g_iface;

  void (* changed) (GDrive *drive);
  void (* disconnected) (GDrive *drive);
  void (* eject_button) (GDrive *drive);

  char * (* get_name) (GDrive *drive);
  GIcon * (* get_icon) (GDrive *drive);
  gboolean (* has_volumes) (GDrive *drive);
  GList * (* get_volumes) (GDrive *drive);
  gboolean (* is_media_removable) (GDrive *drive);
  gboolean (* has_media) (GDrive *drive);
  gboolean (* is_media_check_automatic) (GDrive *drive);
  gboolean (* can_eject) (GDrive *drive);
  gboolean (* can_poll_for_media) (GDrive *drive);
  void (* eject) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  void (* poll_for_media) (GDrive *drive,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* poll_for_media_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  char * (* get_identifier) (GDrive *drive,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GDrive *drive);
  GDriveStartStopType (* get_start_stop_type) (GDrive *drive);
  gboolean (* can_start) (GDrive *drive);
  gboolean (* can_start_degraded) (GDrive *drive);
  void (* start) (GDrive *drive,
                                         GDriveStartFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* start_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  gboolean (* can_stop) (GDrive *drive);
  void (* stop) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* stop_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);

  void (* stop_button) (GDrive *drive);
  void (* eject_with_operation) (GDrive *drive,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GDrive *drive,
                                             GAsyncResult *result,
                                             GError **error);
  const gchar * (* get_sort_key) (GDrive *drive);
  GIcon * (* get_symbolic_icon) (GDrive *drive);
  gboolean (* is_removable) (GDrive *drive);
};
 extern
GType g_drive_get_type (void) __attribute__ ((__const__));
 extern
char * g_drive_get_name (GDrive *drive);
 extern
GIcon * g_drive_get_icon (GDrive *drive);
 extern
GIcon * g_drive_get_symbolic_icon (GDrive *drive);
 extern
gboolean g_drive_has_volumes (GDrive *drive);
 extern
GList * g_drive_get_volumes (GDrive *drive);
 extern
gboolean g_drive_is_removable (GDrive *drive);
 extern
gboolean g_drive_is_media_removable (GDrive *drive);
 extern
gboolean g_drive_has_media (GDrive *drive);
 extern
gboolean g_drive_is_media_check_automatic (GDrive *drive);
 extern
gboolean g_drive_can_poll_for_media (GDrive *drive);
 extern
gboolean g_drive_can_eject (GDrive *drive);
__attribute__((__deprecated__("Use '" "g_drive_eject_with_operation" "' instead"))) extern
void g_drive_eject (GDrive *drive,
                                           GMountUnmountFlags flags,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
__attribute__((__deprecated__("Use '" "g_drive_eject_with_operation_finish" "' instead"))) extern
gboolean g_drive_eject_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
 extern
void g_drive_poll_for_media (GDrive *drive,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_drive_poll_for_media_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
 extern
char * g_drive_get_identifier (GDrive *drive,
                                           const char *kind);
 extern
char ** g_drive_enumerate_identifiers (GDrive *drive);
 extern
GDriveStartStopType g_drive_get_start_stop_type (GDrive *drive);
 extern
gboolean g_drive_can_start (GDrive *drive);
 extern
gboolean g_drive_can_start_degraded (GDrive *drive);
 extern
void g_drive_start (GDrive *drive,
                                           GDriveStartFlags flags,
                                           GMountOperation *mount_operation,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_drive_start_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
 extern
gboolean g_drive_can_stop (GDrive *drive);
 extern
void g_drive_stop (GDrive *drive,
                                           GMountUnmountFlags flags,
                                           GMountOperation *mount_operation,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_drive_stop_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
 extern
void g_drive_eject_with_operation (GDrive *drive,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_drive_eject_with_operation_finish (GDrive *drive,
                                               GAsyncResult *result,
                                               GError **error);
 extern
const gchar *g_drive_get_sort_key (GDrive *drive);
# 22031 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDtlsConnectionInterface GDtlsConnectionInterface;
struct _GDtlsConnectionInterface
{
  GTypeInterface g_iface;

  gboolean (*accept_certificate) (GDtlsConnection *connection,
                                  GTlsCertificate *peer_cert,
                                  GTlsCertificateFlags errors);

  gboolean (*handshake) (GDtlsConnection *conn,
                                  GCancellable *cancellable,
                                  GError **error);
  void (*handshake_async) (GDtlsConnection *conn,
                                  int io_priority,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  gboolean (*handshake_finish) (GDtlsConnection *conn,
                                  GAsyncResult *result,
                                  GError **error);
  gboolean (*shutdown) (GDtlsConnection *conn,
                                  gboolean shutdown_read,
                                  gboolean shutdown_write,
                                  GCancellable *cancellable,
                                  GError **error);
  void (*shutdown_async) (GDtlsConnection *conn,
                                  gboolean shutdown_read,
                                  gboolean shutdown_write,
                                  int io_priority,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  gboolean (*shutdown_finish) (GDtlsConnection *conn,
                                  GAsyncResult *result,
                                  GError **error);
  void (*set_advertised_protocols) (GDtlsConnection *conn,
                                           const gchar * const *protocols);
  const gchar *(*get_negotiated_protocol) (GDtlsConnection *conn);
#pragma clang diagnostic push
# 22069 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
  gboolean (*get_binding_data) (GDtlsConnection *conn,
                                  GTlsChannelBindingType type,
                                  GByteArray *data,
                                  GError **error);
#pragma clang diagnostic pop
};
 extern
GType g_dtls_connection_get_type (void) __attribute__ ((__const__));
 extern
void g_dtls_connection_set_database (GDtlsConnection *conn,
                                                                     GTlsDatabase *database);
 extern
GTlsDatabase *g_dtls_connection_get_database (GDtlsConnection *conn);
 extern
void g_dtls_connection_set_certificate (GDtlsConnection *conn,
                                                                     GTlsCertificate *certificate);
 extern
GTlsCertificate *g_dtls_connection_get_certificate (GDtlsConnection *conn);
 extern
void g_dtls_connection_set_interaction (GDtlsConnection *conn,
                                                                     GTlsInteraction *interaction);
 extern
GTlsInteraction *g_dtls_connection_get_interaction (GDtlsConnection *conn);
 extern
GTlsCertificate *g_dtls_connection_get_peer_certificate (GDtlsConnection *conn);
 extern
GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors (GDtlsConnection *conn);
 extern
void g_dtls_connection_set_require_close_notify (GDtlsConnection *conn,
                                                                     gboolean require_close_notify);
 extern
gboolean g_dtls_connection_get_require_close_notify (GDtlsConnection *conn);
#pragma clang diagnostic push
# 22102 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_dtls_connection_set_rehandshake_mode (GDtlsConnection *conn,
                                                                     GTlsRehandshakeMode mode);
__attribute__((__deprecated__)) extern
GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode (GDtlsConnection *conn);
#pragma clang diagnostic pop
 extern
gboolean g_dtls_connection_handshake (GDtlsConnection *conn,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
 extern
void g_dtls_connection_handshake_async (GDtlsConnection *conn,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
 extern
gboolean g_dtls_connection_handshake_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);
 extern
gboolean g_dtls_connection_shutdown (GDtlsConnection *conn,
                                                                     gboolean shutdown_read,
                                                                     gboolean shutdown_write,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
 extern
void g_dtls_connection_shutdown_async (GDtlsConnection *conn,
                                                                     gboolean shutdown_read,
                                                                     gboolean shutdown_write,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
 extern
gboolean g_dtls_connection_shutdown_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);
 extern
gboolean g_dtls_connection_close (GDtlsConnection *conn,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
 extern
void g_dtls_connection_close_async (GDtlsConnection *conn,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
 extern
gboolean g_dtls_connection_close_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);
 extern
gboolean g_dtls_connection_emit_accept_certificate (GDtlsConnection *conn,
                                                                     GTlsCertificate *peer_cert,
                                                                     GTlsCertificateFlags errors);
 extern
void g_dtls_connection_set_advertised_protocols (GDtlsConnection *conn,
                                                                     const gchar * const *protocols);
 extern
const gchar * g_dtls_connection_get_negotiated_protocol (GDtlsConnection *conn);
#pragma clang diagnostic push
# 22164 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
gboolean g_dtls_connection_get_channel_binding_data (GDtlsConnection *conn,
                                                                     GTlsChannelBindingType type,
                                                                     GByteArray *data,
                                                                     GError **error);
#pragma clang diagnostic pop
 extern
GTlsProtocolVersion g_dtls_connection_get_protocol_version (GDtlsConnection *conn);
 extern
gchar * g_dtls_connection_get_ciphersuite_name (GDtlsConnection *conn);







typedef struct _GDtlsClientConnectionInterface GDtlsClientConnectionInterface;
struct _GDtlsClientConnectionInterface
{
  GTypeInterface g_iface;
};
 extern
GType g_dtls_client_connection_get_type (void) __attribute__ ((__const__));
 extern
GDatagramBased *g_dtls_client_connection_new (GDatagramBased *base_socket,
                                                                    GSocketConnectable *server_identity,
                                                                    GError **error);
 extern
GTlsCertificateFlags g_dtls_client_connection_get_validation_flags (GDtlsClientConnection *conn);
 extern
void g_dtls_client_connection_set_validation_flags (GDtlsClientConnection *conn,
                                                                    GTlsCertificateFlags flags);
 extern
GSocketConnectable *g_dtls_client_connection_get_server_identity (GDtlsClientConnection *conn);
 extern
void g_dtls_client_connection_set_server_identity (GDtlsClientConnection *conn,
                                                                    GSocketConnectable *identity);
 extern
GList * g_dtls_client_connection_get_accepted_cas (GDtlsClientConnection *conn);
# 22217 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GDtlsServerConnectionInterface GDtlsServerConnectionInterface;
struct _GDtlsServerConnectionInterface
{
  GTypeInterface g_iface;
};
 extern
GType g_dtls_server_connection_get_type (void) __attribute__ ((__const__));
 extern
GDatagramBased *g_dtls_server_connection_new (GDatagramBased *base_socket,
                                                   GTlsCertificate *certificate,
                                                   GError **error);
# 22245 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GIconIface GIconIface;
struct _GIconIface
{
  GTypeInterface g_iface;

  guint (* hash) (GIcon *icon);
  gboolean (* equal) (GIcon *icon1,
                               GIcon *icon2);

  gboolean (* to_tokens) (GIcon *icon,
                               GPtrArray *tokens,
                               gint *out_version);

  GIcon * (* from_tokens) (gchar **tokens,
                               gint num_tokens,
                               gint version,
                               GError **error);
  GVariant * (* serialize) (GIcon *icon);
};
 extern
GType g_icon_get_type (void) __attribute__ ((__const__));
 extern
guint g_icon_hash (gconstpointer icon);
 extern
gboolean g_icon_equal (GIcon *icon1,
                                 GIcon *icon2);
 extern
gchar *g_icon_to_string (GIcon *icon);
 extern
GIcon *g_icon_new_for_string (const gchar *str,
                                 GError **error);
 extern
GVariant * g_icon_serialize (GIcon *icon);
 extern
GIcon * g_icon_deserialize (GVariant *value);
# 22294 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GEmblem GEmblem;
typedef struct _GEmblemClass GEmblemClass;
 extern
GType g_emblem_get_type (void) __attribute__ ((__const__));
 extern
GEmblem *g_emblem_new (GIcon *icon);
 extern
GEmblem *g_emblem_new_with_origin (GIcon *icon,
                                         GEmblemOrigin origin);
 extern
GIcon *g_emblem_get_icon (GEmblem *emblem);
 extern
GEmblemOrigin g_emblem_get_origin (GEmblem *emblem);
# 22316 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GEmblemedIcon GEmblemedIcon;
typedef struct _GEmblemedIconClass GEmblemedIconClass;
typedef struct _GEmblemedIconPrivate GEmblemedIconPrivate;
struct _GEmblemedIcon
{
  GObject parent_instance;

  GEmblemedIconPrivate *priv;
};
struct _GEmblemedIconClass
{
  GObjectClass parent_class;
};
 extern
GType g_emblemed_icon_get_type (void) __attribute__ ((__const__));
 extern
GIcon *g_emblemed_icon_new (GIcon *icon,
                                    GEmblem *emblem);
 extern
GIcon *g_emblemed_icon_get_icon (GEmblemedIcon *emblemed);
 extern
GList *g_emblemed_icon_get_emblems (GEmblemedIcon *emblemed);
 extern
void g_emblemed_icon_add_emblem (GEmblemedIcon *emblemed,
                                    GEmblem *emblem);
 extern
void g_emblemed_icon_clear_emblems (GEmblemedIcon *emblemed);
# 22358 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFileIface GFileIface;
struct _GFileIface
{
  GTypeInterface g_iface;

  GFile * (* dup) (GFile *file);
  guint (* hash) (GFile *file);
  gboolean (* equal) (GFile *file1,
                                                       GFile *file2);
  gboolean (* is_native) (GFile *file);
  gboolean (* has_uri_scheme) (GFile *file,
                                                       const char *uri_scheme);
  char * (* get_uri_scheme) (GFile *file);
  char * (* get_basename) (GFile *file);
  char * (* get_path) (GFile *file);
  char * (* get_uri) (GFile *file);
  char * (* get_parse_name) (GFile *file);
  GFile * (* get_parent) (GFile *file);
  gboolean (* prefix_matches) (GFile *prefix,
                                                       GFile *file);
  char * (* get_relative_path) (GFile *parent,
                                                       GFile *descendant);
  GFile * (* resolve_relative_path) (GFile *file,
                                                       const char *relative_path);
  GFile * (* get_child_for_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GError **error);
  GFileEnumerator * (* enumerate_children) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* enumerate_children_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileEnumerator * (* enumerate_children_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileInfo * (* query_info) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_info_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_info_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileInfo * (* query_filesystem_info) (GFile *file,
                                                       const char *attributes,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_filesystem_info_async) (GFile *file,
                                                       const char *attributes,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_filesystem_info_finish)(GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GMount * (* find_enclosing_mount) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* find_enclosing_mount_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GMount * (* find_enclosing_mount_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFile * (* set_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_display_name_async) (GFile *file,
                                                       const char *display_name,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* set_display_name_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileAttributeInfoList * (* query_settable_attributes) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_settable_attributes_async) (void);
  void (* _query_settable_attributes_finish) (void);
  GFileAttributeInfoList * (* query_writable_namespaces) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_writable_namespaces_async) (void);
  void (* _query_writable_namespaces_finish) (void);
  gboolean (* set_attribute) (GFile *file,
                                                       const char *attribute,
                                                       GFileAttributeType type,
                                                       gpointer value_p,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  gboolean (* set_attributes_from_info) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_attributes_async) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* set_attributes_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GFileInfo **info,
                                                       GError **error);
  GFileInputStream * (* read_fn) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* read_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInputStream * (* read_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileOutputStream * (* append_to) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* append_to_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* append_to_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileOutputStream * (* create) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* create_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileOutputStream * (* replace) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* replace_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  gboolean (* delete_file) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* delete_file_async) (GFile *file,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
  gboolean (* delete_file_finish) (GFile *file,
             GAsyncResult *result,
             GError **error);
  gboolean (* trash) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* trash_async) (GFile *file,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
  gboolean (* trash_finish) (GFile *file,
             GAsyncResult *result,
             GError **error);
  gboolean (* make_directory) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* make_directory_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* make_directory_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  gboolean (* make_symbolic_link) (GFile *file,
                                                       const char *symlink_value,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* make_symbolic_link_async) (GFile *file,
                                                       const char *symlink_value,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* make_symbolic_link_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  gboolean (* copy) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* copy_async) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* copy_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  gboolean (* move) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* move_async) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* move_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* mount_mountable) (GFile *file,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* mount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* unmount_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* eject_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* mount_enclosing_volume) (GFile *location,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* mount_enclosing_volume_finish) (GFile *location,
                                                       GAsyncResult *result,
                                                       GError **error);
  GFileMonitor * (* monitor_dir) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  GFileMonitor * (* monitor_file) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  GFileIOStream * (* open_readwrite) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* open_readwrite_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* open_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileIOStream * (* create_readwrite) (GFile *file,
             GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_readwrite_async) (GFile *file,
             GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* create_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileIOStream * (* replace_readwrite) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_readwrite_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* replace_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  void (* start_mountable) (GFile *file,
                                                       GDriveStartFlags flags,
                                                       GMountOperation *start_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* start_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* stop_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* stop_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  gboolean supports_thread_contexts;
  void (* unmount_mountable_with_operation) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_with_operation_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* eject_mountable_with_operation) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_with_operation_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  void (* poll_mountable) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* poll_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);
  gboolean (* measure_disk_usage) (GFile *file,
                                                       GFileMeasureFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileMeasureProgressCallback progress_callback,
                                                       gpointer progress_data,
                                                       guint64 *disk_usage,
                                                       guint64 *num_dirs,
                                                       guint64 *num_files,
                                                       GError **error);
  void (* measure_disk_usage_async) (GFile *file,
                                                       GFileMeasureFlags flags,
                                                       gint io_priority,
                                                       GCancellable *cancellable,
                                                       GFileMeasureProgressCallback progress_callback,
                                                       gpointer progress_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* measure_disk_usage_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       guint64 *disk_usage,
                                                       guint64 *num_dirs,
                                                       guint64 *num_files,
                                                       GError **error);
};
 extern
GType g_file_get_type (void) __attribute__ ((__const__));
 extern
GFile * g_file_new_for_path (const char *path);
 extern
GFile * g_file_new_for_uri (const char *uri);
 extern
GFile * g_file_new_for_commandline_arg (const char *arg);
 extern
GFile * g_file_new_for_commandline_arg_and_cwd (const gchar *arg,
                                                                const gchar *cwd);
 extern
GFile * g_file_new_tmp (const char *tmpl,
                                                           GFileIOStream **iostream,
                                                           GError **error);
 extern
void g_file_new_tmp_async (const char *tmpl,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
GFile * g_file_new_tmp_finish (GAsyncResult *result,
                                                           GFileIOStream **iostream,
                                                           GError **error);
 extern
void g_file_new_tmp_dir_async (const char *tmpl,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
GFile * g_file_new_tmp_dir_finish (GAsyncResult *result,
                                                           GError **error);
 extern
GFile * g_file_parse_name (const char *parse_name);
 extern
GFile * g_file_new_build_filename (const gchar *first_element,
                                                           ...) __attribute__((__sentinel__));
 extern
GFile * g_file_dup (GFile *file);
 extern
guint g_file_hash (gconstpointer file);
 extern
gboolean g_file_equal (GFile *file1,
          GFile *file2);
 extern
char * g_file_get_basename (GFile *file);
 extern
char * g_file_get_path (GFile *file);
 extern
const char * g_file_peek_path (GFile *file);
 extern
char * g_file_get_uri (GFile *file);
 extern
char * g_file_get_parse_name (GFile *file);
 extern
GFile * g_file_get_parent (GFile *file);
 extern
gboolean g_file_has_parent (GFile *file,
                                                           GFile *parent);
 extern
GFile * g_file_get_child (GFile *file,
          const char *name);
 extern
GFile * g_file_get_child_for_display_name (GFile *file,
          const char *display_name,
          GError **error);
 extern
gboolean g_file_has_prefix (GFile *file,
          GFile *prefix);
 extern
char * g_file_get_relative_path (GFile *parent,
          GFile *descendant);
 extern
GFile * g_file_resolve_relative_path (GFile *file,
          const char *relative_path);
 extern
gboolean g_file_is_native (GFile *file);
 extern
gboolean g_file_has_uri_scheme (GFile *file,
          const char *uri_scheme);
 extern
char * g_file_get_uri_scheme (GFile *file);
 extern
GFileInputStream * g_file_read (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_read_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileInputStream * g_file_read_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileOutputStream * g_file_append_to (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileOutputStream * g_file_create (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileOutputStream * g_file_replace (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_append_to_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileOutputStream * g_file_append_to_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
void g_file_create_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileOutputStream * g_file_create_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
void g_file_replace_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileOutputStream * g_file_replace_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileIOStream * g_file_open_readwrite (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_open_readwrite_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileIOStream * g_file_open_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileIOStream * g_file_create_readwrite (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_create_readwrite_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileIOStream * g_file_create_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileIOStream * g_file_replace_readwrite (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_replace_readwrite_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileIOStream * g_file_replace_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
gboolean g_file_query_exists (GFile *file,
          GCancellable *cancellable);
 extern
GFileType g_file_query_file_type (GFile *file,
                                                           GFileQueryInfoFlags flags,
                                                           GCancellable *cancellable);
 extern
GFileInfo * g_file_query_info (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_query_info_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileInfo * g_file_query_info_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileInfo * g_file_query_filesystem_info (GFile *file,
          const char *attributes,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_query_filesystem_info_async (GFile *file,
          const char *attributes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileInfo * g_file_query_filesystem_info_finish (GFile *file,
                                                           GAsyncResult *res,
          GError **error);
 extern
GMount * g_file_find_enclosing_mount (GFile *file,
                                                           GCancellable *cancellable,
                                                           GError **error);
 extern
void g_file_find_enclosing_mount_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GMount * g_file_find_enclosing_mount_finish (GFile *file,
           GAsyncResult *res,
           GError **error);
 extern
GFileEnumerator * g_file_enumerate_children (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_enumerate_children_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileEnumerator * g_file_enumerate_children_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFile * g_file_set_display_name (GFile *file,
          const char *display_name,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_set_display_name_async (GFile *file,
          const char *display_name,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFile * g_file_set_display_name_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
gboolean g_file_delete (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_delete_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_delete_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
 extern
gboolean g_file_trash (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_trash_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_trash_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
 extern
gboolean g_file_copy (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
 extern
void g_file_copy_async (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_copy_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
gboolean g_file_move (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
 extern
void g_file_move_async (GFile *source,
                                                    GFile *destination,
                                                    GFileCopyFlags flags,
                                                    int io_priority,
                                                    GCancellable *cancellable,
                                                    GFileProgressCallback progress_callback,
                                                    gpointer progress_callback_data,
                                                    GAsyncReadyCallback callback,
                                                    gpointer user_data);
 extern
gboolean g_file_move_finish (GFile *file,
                                                    GAsyncResult *result,
                                                    GError **error);
 extern
gboolean g_file_make_directory (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_make_directory_async (GFile *file,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
gboolean g_file_make_directory_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
 extern
gboolean g_file_make_directory_with_parents (GFile *file,
                                             GCancellable *cancellable,
                                             GError **error);
 extern
gboolean g_file_make_symbolic_link (GFile *file,
          const char *symlink_value,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_make_symbolic_link_async (GFile *file,
                                                           const char *symlink_value,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
gboolean g_file_make_symbolic_link_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
 extern
GFileAttributeInfoList *g_file_query_settable_attributes (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
GFileAttributeInfoList *g_file_query_writable_namespaces (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute (GFile *file,
          const char *attribute,
          GFileAttributeType type,
          gpointer value_p,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attributes_from_info (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_set_attributes_async (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_set_attributes_finish (GFile *file,
          GAsyncResult *result,
          GFileInfo **info,
          GError **error);
 extern
gboolean g_file_set_attribute_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_byte_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_uint32 (GFile *file,
          const char *attribute,
          guint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_int32 (GFile *file,
          const char *attribute,
          gint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_uint64 (GFile *file,
          const char *attribute,
          guint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_int64 (GFile *file,
          const char *attribute,
          gint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_mount_enclosing_volume (GFile *location,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_mount_enclosing_volume_finish (GFile *location,
          GAsyncResult *result,
          GError **error);
 extern
void g_file_mount_mountable (GFile *file,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFile * g_file_mount_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
__attribute__((__deprecated__("Use '" "g_file_unmount_mountable_with_operation" "' instead"))) extern
void g_file_unmount_mountable (GFile *file,
                                                           GMountUnmountFlags flags,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
__attribute__((__deprecated__("Use '" "g_file_unmount_mountable_with_operation_finish" "' instead"))) extern
gboolean g_file_unmount_mountable_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
 extern
void g_file_unmount_mountable_with_operation (GFile *file,
          GMountUnmountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_unmount_mountable_with_operation_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
__attribute__((__deprecated__("Use '" "g_file_eject_mountable_with_operation" "' instead"))) extern
void g_file_eject_mountable (GFile *file,
                                                           GMountUnmountFlags flags,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
__attribute__((__deprecated__("Use '" "g_file_eject_mountable_with_operation_finish" "' instead"))) extern
gboolean g_file_eject_mountable_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
 extern
void g_file_eject_mountable_with_operation (GFile *file,
          GMountUnmountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_eject_mountable_with_operation_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
 extern
char * g_file_build_attribute_list_for_copy (GFile *file,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_copy_attributes (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileMonitor* g_file_monitor_directory (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileMonitor* g_file_monitor_file (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileMonitor* g_file_monitor (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_measure_disk_usage (GFile *file,
                                                           GFileMeasureFlags flags,
                                                           GCancellable *cancellable,
                                                           GFileMeasureProgressCallback progress_callback,
                                                           gpointer progress_data,
                                                           guint64 *disk_usage,
                                                           guint64 *num_dirs,
                                                           guint64 *num_files,
                                                           GError **error);
 extern
void g_file_measure_disk_usage_async (GFile *file,
                                                           GFileMeasureFlags flags,
                                                           gint io_priority,
                                                           GCancellable *cancellable,
                                                           GFileMeasureProgressCallback progress_callback,
                                                           gpointer progress_data,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
gboolean g_file_measure_disk_usage_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           guint64 *disk_usage,
                                                           guint64 *num_dirs,
                                                           guint64 *num_files,
                                                           GError **error);
 extern
void g_file_start_mountable (GFile *file,
          GDriveStartFlags flags,
          GMountOperation *start_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_start_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
 extern
void g_file_stop_mountable (GFile *file,
          GMountUnmountFlags flags,
                                                           GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_stop_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
 extern
void g_file_poll_mountable (GFile *file,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_poll_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
 extern
GAppInfo *g_file_query_default_handler (GFile *file,
           GCancellable *cancellable,
           GError **error);
 extern
void g_file_query_default_handler_async (GFile *file,
                                              int io_priority,
                                              GCancellable *cancellable,
                                              GAsyncReadyCallback callback,
                                              gpointer user_data);
 extern
GAppInfo *g_file_query_default_handler_finish (GFile *file,
                                               GAsyncResult *result,
                                               GError **error);
 extern
gboolean g_file_load_contents (GFile *file,
           GCancellable *cancellable,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
 extern
void g_file_load_contents_async (GFile *file,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_file_load_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
 extern
void g_file_load_partial_contents_async (GFile *file,
           GCancellable *cancellable,
           GFileReadMoreCallback read_more_callback,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_file_load_partial_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
 extern
gboolean g_file_replace_contents (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           char **new_etag,
           GCancellable *cancellable,
           GError **error);
 extern
void g_file_replace_contents_async (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
void g_file_replace_contents_bytes_async (GFile *file,
           GBytes *contents,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_file_replace_contents_finish (GFile *file,
           GAsyncResult *res,
           char **new_etag,
           GError **error);
 extern
gboolean g_file_supports_thread_contexts (GFile *file);
 extern
GBytes *g_file_load_bytes (GFile *file,
                                              GCancellable *cancellable,
                                              gchar **etag_out,
                                              GError **error);
 extern
void g_file_load_bytes_async (GFile *file,
                                              GCancellable *cancellable,
                                              GAsyncReadyCallback callback,
                                              gpointer user_data);
 extern
GBytes *g_file_load_bytes_finish (GFile *file,
                                              GAsyncResult *result,
                                              gchar **etag_out,
                                              GError **error);
# 23498 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
struct _GFileAttributeInfo
{
  char *name;
  GFileAttributeType type;
  GFileAttributeInfoFlags flags;
};
struct _GFileAttributeInfoList
{
  GFileAttributeInfo *infos;
  int n_infos;
};

 extern
GType g_file_attribute_info_list_get_type (void);
 extern
GFileAttributeInfoList * g_file_attribute_info_list_new (void);
 extern
GFileAttributeInfoList * g_file_attribute_info_list_ref (GFileAttributeInfoList *list);
 extern
void g_file_attribute_info_list_unref (GFileAttributeInfoList *list);
 extern
GFileAttributeInfoList * g_file_attribute_info_list_dup (GFileAttributeInfoList *list);
 extern
const GFileAttributeInfo *g_file_attribute_info_list_lookup (GFileAttributeInfoList *list,
            const char *name);
 extern
void g_file_attribute_info_list_add (GFileAttributeInfoList *list,
            const char *name,
            GFileAttributeType type,
            GFileAttributeInfoFlags flags);
# 23542 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFileEnumeratorClass GFileEnumeratorClass;
typedef struct _GFileEnumeratorPrivate GFileEnumeratorPrivate;
struct _GFileEnumerator
{
  GObject parent_instance;

  GFileEnumeratorPrivate *priv;
};
struct _GFileEnumeratorClass
{
  GObjectClass parent_class;

  GFileInfo * (* next_file) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* close_fn) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* next_files_async) (GFileEnumerator *enumerator,
                                     int num_files,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GList * (* next_files_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *result,
                                     GError **error);
  void (* close_async) (GFileEnumerator *enumerator,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  gboolean (* close_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *result,
                                     GError **error);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};
 extern
GType g_file_enumerator_get_type (void) __attribute__ ((__const__));
 extern
GFileInfo *g_file_enumerator_next_file (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
 extern
gboolean g_file_enumerator_close (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
 extern
void g_file_enumerator_next_files_async (GFileEnumerator *enumerator,
      int num_files,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
 extern
GList * g_file_enumerator_next_files_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
 extern
void g_file_enumerator_close_async (GFileEnumerator *enumerator,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
 extern
gboolean g_file_enumerator_close_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
 extern
gboolean g_file_enumerator_is_closed (GFileEnumerator *enumerator);
 extern
gboolean g_file_enumerator_has_pending (GFileEnumerator *enumerator);
 extern
void g_file_enumerator_set_pending (GFileEnumerator *enumerator,
      gboolean pending);
 extern
GFile * g_file_enumerator_get_container (GFileEnumerator *enumerator);
 extern
GFile * g_file_enumerator_get_child (GFileEnumerator *enumerator,
                                                GFileInfo *info);
 extern
gboolean g_file_enumerator_iterate (GFileEnumerator *direnum,
                                                GFileInfo **out_info,
                                                GFile **out_child,
                                                GCancellable *cancellable,
                                                GError **error);
# 23650 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFileIconClass GFileIconClass;
 extern
GType g_file_icon_get_type (void) __attribute__ ((__const__));
 extern
GIcon * g_file_icon_new (GFile *file);
 extern
GFile * g_file_icon_get_file (GFileIcon *icon);
# 23671 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFileInfoClass GFileInfoClass;
# 23759 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_file_info_get_type (void) __attribute__ ((__const__));
 extern
GFileInfo * g_file_info_new (void);
 extern
GFileInfo * g_file_info_dup (GFileInfo *other);
 extern
void g_file_info_copy_into (GFileInfo *src_info,
         GFileInfo *dest_info);
 extern
gboolean g_file_info_has_attribute (GFileInfo *info,
         const char *attribute);
 extern
gboolean g_file_info_has_namespace (GFileInfo *info,
         const char *name_space);
 extern
char ** g_file_info_list_attributes (GFileInfo *info,
         const char *name_space);
 extern
gboolean g_file_info_get_attribute_data (GFileInfo *info,
         const char *attribute,
         GFileAttributeType *type,
         gpointer *value_pp,
         GFileAttributeStatus *status);
 extern
GFileAttributeType g_file_info_get_attribute_type (GFileInfo *info,
         const char *attribute);
 extern
void g_file_info_remove_attribute (GFileInfo *info,
         const char *attribute);
 extern
GFileAttributeStatus g_file_info_get_attribute_status (GFileInfo *info,
         const char *attribute);
 extern
gboolean g_file_info_set_attribute_status (GFileInfo *info,
         const char *attribute,
         GFileAttributeStatus status);
 extern
char * g_file_info_get_attribute_as_string (GFileInfo *info,
         const char *attribute);
 extern
const char * g_file_info_get_attribute_string (GFileInfo *info,
         const char *attribute);
 extern
const char * g_file_info_get_attribute_byte_string (GFileInfo *info,
         const char *attribute);
 extern
gboolean g_file_info_get_attribute_boolean (GFileInfo *info,
         const char *attribute);
 extern
guint32 g_file_info_get_attribute_uint32 (GFileInfo *info,
         const char *attribute);
 extern
gint32 g_file_info_get_attribute_int32 (GFileInfo *info,
         const char *attribute);
 extern
guint64 g_file_info_get_attribute_uint64 (GFileInfo *info,
         const char *attribute);
 extern
gint64 g_file_info_get_attribute_int64 (GFileInfo *info,
         const char *attribute);
 extern
GObject * g_file_info_get_attribute_object (GFileInfo *info,
         const char *attribute);
 extern
char ** g_file_info_get_attribute_stringv (GFileInfo *info,
         const char *attribute);
 extern
void g_file_info_set_attribute (GFileInfo *info,
         const char *attribute,
         GFileAttributeType type,
         gpointer value_p);
 extern
void g_file_info_set_attribute_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
 extern
void g_file_info_set_attribute_byte_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
 extern
void g_file_info_set_attribute_boolean (GFileInfo *info,
         const char *attribute,
         gboolean attr_value);
 extern
void g_file_info_set_attribute_uint32 (GFileInfo *info,
         const char *attribute,
         guint32 attr_value);
 extern
void g_file_info_set_attribute_int32 (GFileInfo *info,
         const char *attribute,
         gint32 attr_value);
 extern
void g_file_info_set_attribute_uint64 (GFileInfo *info,
         const char *attribute,
         guint64 attr_value);
 extern
void g_file_info_set_attribute_int64 (GFileInfo *info,
         const char *attribute,
         gint64 attr_value);
 extern
void g_file_info_set_attribute_object (GFileInfo *info,
         const char *attribute,
         GObject *attr_value);
 extern
void g_file_info_set_attribute_stringv (GFileInfo *info,
         const char *attribute,
         char **attr_value);
 extern
void g_file_info_clear_status (GFileInfo *info);
 extern
GDateTime * g_file_info_get_deletion_date (GFileInfo *info);
 extern
GFileType g_file_info_get_file_type (GFileInfo *info);
 extern
gboolean g_file_info_get_is_hidden (GFileInfo *info);
 extern
gboolean g_file_info_get_is_backup (GFileInfo *info);
 extern
gboolean g_file_info_get_is_symlink (GFileInfo *info);
 extern
const char * g_file_info_get_name (GFileInfo *info);
 extern
const char * g_file_info_get_display_name (GFileInfo *info);
 extern
const char * g_file_info_get_edit_name (GFileInfo *info);
 extern
GIcon * g_file_info_get_icon (GFileInfo *info);
 extern
GIcon * g_file_info_get_symbolic_icon (GFileInfo *info);
 extern
const char * g_file_info_get_content_type (GFileInfo *info);
 extern
goffset g_file_info_get_size (GFileInfo *info);
#pragma clang diagnostic push
# 23893 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_file_info_get_modification_date_time" "' instead"))) extern
void g_file_info_get_modification_time (GFileInfo *info,
                                                      GTimeVal *result);
#pragma clang diagnostic pop
 extern
GDateTime * g_file_info_get_modification_date_time (GFileInfo *info);
 extern
GDateTime * g_file_info_get_access_date_time (GFileInfo *info);
 extern
GDateTime * g_file_info_get_creation_date_time (GFileInfo *info);
 extern
const char * g_file_info_get_symlink_target (GFileInfo *info);
 extern
const char * g_file_info_get_etag (GFileInfo *info);
 extern
gint32 g_file_info_get_sort_order (GFileInfo *info);
 extern
void g_file_info_set_attribute_mask (GFileInfo *info,
            GFileAttributeMatcher *mask);
 extern
void g_file_info_unset_attribute_mask (GFileInfo *info);
 extern
void g_file_info_set_file_type (GFileInfo *info,
            GFileType type);
 extern
void g_file_info_set_is_hidden (GFileInfo *info,
            gboolean is_hidden);
 extern
void g_file_info_set_is_symlink (GFileInfo *info,
            gboolean is_symlink);
 extern
void g_file_info_set_name (GFileInfo *info,
            const char *name);
 extern
void g_file_info_set_display_name (GFileInfo *info,
            const char *display_name);
 extern
void g_file_info_set_edit_name (GFileInfo *info,
            const char *edit_name);
 extern
void g_file_info_set_icon (GFileInfo *info,
            GIcon *icon);
 extern
void g_file_info_set_symbolic_icon (GFileInfo *info,
            GIcon *icon);
 extern
void g_file_info_set_content_type (GFileInfo *info,
            const char *content_type);
 extern
void g_file_info_set_size (GFileInfo *info,
            goffset size);
#pragma clang diagnostic push
# 23945 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_file_info_set_modification_date_time" "' instead"))) extern
void g_file_info_set_modification_time (GFileInfo *info,
                                                      GTimeVal *mtime);
#pragma clang diagnostic pop
 extern
void g_file_info_set_modification_date_time (GFileInfo *info,
                                                          GDateTime *mtime);
 extern
void g_file_info_set_access_date_time (GFileInfo *info,
                                                    GDateTime *atime);
 extern
void g_file_info_set_creation_date_time (GFileInfo *info,
                                                      GDateTime *creation_time);
 extern
void g_file_info_set_symlink_target (GFileInfo *info,
            const char *symlink_target);
 extern
void g_file_info_set_sort_order (GFileInfo *info,
            gint32 sort_order);

 extern
GType g_file_attribute_matcher_get_type (void) __attribute__ ((__const__));
 extern
GFileAttributeMatcher *g_file_attribute_matcher_new (const char *attributes);
 extern
GFileAttributeMatcher *g_file_attribute_matcher_ref (GFileAttributeMatcher *matcher);
 extern
void g_file_attribute_matcher_unref (GFileAttributeMatcher *matcher);
 extern
GFileAttributeMatcher *g_file_attribute_matcher_subtract (GFileAttributeMatcher *matcher,
                                                                GFileAttributeMatcher *subtract);
 extern
gboolean g_file_attribute_matcher_matches (GFileAttributeMatcher *matcher,
        const char *attribute);
 extern
gboolean g_file_attribute_matcher_matches_only (GFileAttributeMatcher *matcher,
        const char *attribute);
 extern
gboolean g_file_attribute_matcher_enumerate_namespace (GFileAttributeMatcher *matcher,
             const char *ns);
 extern
const char * g_file_attribute_matcher_enumerate_next (GFileAttributeMatcher *matcher);
 extern
char * g_file_attribute_matcher_to_string (GFileAttributeMatcher *matcher);
# 24004 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFileInputStreamClass GFileInputStreamClass;
typedef struct _GFileInputStreamPrivate GFileInputStreamPrivate;
struct _GFileInputStream
{
  GInputStream parent_instance;

  GFileInputStreamPrivate *priv;
};
struct _GFileInputStreamClass
{
  GInputStreamClass parent_class;
  goffset (* tell) (GFileInputStream *stream);
  gboolean (* can_seek) (GFileInputStream *stream);
  gboolean (* seek) (GFileInputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileInputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileInputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileInputStream *stream,
                                     GAsyncResult *result,
                                     GError **error);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_file_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GFileInfo *g_file_input_stream_query_info (GFileInputStream *stream,
        const char *attributes,
        GCancellable *cancellable,
        GError **error);
 extern
void g_file_input_stream_query_info_async (GFileInputStream *stream,
        const char *attributes,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
 extern
GFileInfo *g_file_input_stream_query_info_finish (GFileInputStream *stream,
        GAsyncResult *result,
        GError **error);
# 24080 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GQuark g_io_error_quark (void);
 extern
GIOErrorEnum g_io_error_from_errno (gint err_no);
 extern
GIOErrorEnum g_io_error_from_file_error (GFileError file_error);
# 24099 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GIOStreamPrivate GIOStreamPrivate;
typedef struct _GIOStreamClass GIOStreamClass;
struct _GIOStream
{
  GObject parent_instance;

  GIOStreamPrivate *priv;
};
struct _GIOStreamClass
{
  GObjectClass parent_class;
  GInputStream * (*get_input_stream) (GIOStream *stream);
  GOutputStream * (*get_output_stream) (GIOStream *stream);
  gboolean (* close_fn) (GIOStream *stream,
                             GCancellable *cancellable,
                             GError **error);
  void (* close_async) (GIOStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GIOStream *stream,
                             GAsyncResult *result,
                             GError **error);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};
 extern
GType g_io_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream * g_io_stream_get_input_stream (GIOStream *stream);
 extern
GOutputStream *g_io_stream_get_output_stream (GIOStream *stream);
 extern
void g_io_stream_splice_async (GIOStream *stream1,
           GIOStream *stream2,
           GIOStreamSpliceFlags flags,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_io_stream_splice_finish (GAsyncResult *result,
                                              GError **error);
 extern
gboolean g_io_stream_close (GIOStream *stream,
           GCancellable *cancellable,
           GError **error);
 extern
void g_io_stream_close_async (GIOStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_io_stream_close_finish (GIOStream *stream,
           GAsyncResult *result,
           GError **error);
 extern
gboolean g_io_stream_is_closed (GIOStream *stream);
 extern
gboolean g_io_stream_has_pending (GIOStream *stream);
 extern
gboolean g_io_stream_set_pending (GIOStream *stream,
           GError **error);
 extern
void g_io_stream_clear_pending (GIOStream *stream);
# 24185 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFileIOStreamClass GFileIOStreamClass;
typedef struct _GFileIOStreamPrivate GFileIOStreamPrivate;
struct _GFileIOStream
{
  GIOStream parent_instance;

  GFileIOStreamPrivate *priv;
};
struct _GFileIOStreamClass
{
  GIOStreamClass parent_class;
  goffset (* tell) (GFileIOStream *stream);
  gboolean (* can_seek) (GFileIOStream *stream);
  gboolean (* seek) (GFileIOStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileIOStream *stream);
  gboolean (* truncate_fn) (GFileIOStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileIOStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileIOStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileIOStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  char * (* get_etag) (GFileIOStream *stream);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_file_io_stream_get_type (void) __attribute__ ((__const__));
 extern
GFileInfo *g_file_io_stream_query_info (GFileIOStream *stream,
            const char *attributes,
            GCancellable *cancellable,
            GError **error);
 extern
void g_file_io_stream_query_info_async (GFileIOStream *stream,
            const char *attributes,
            int io_priority,
            GCancellable *cancellable,
            GAsyncReadyCallback callback,
            gpointer user_data);
 extern
GFileInfo *g_file_io_stream_query_info_finish (GFileIOStream *stream,
            GAsyncResult *result,
            GError **error);
 extern
char * g_file_io_stream_get_etag (GFileIOStream *stream);
# 24263 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFileMonitorClass GFileMonitorClass;
typedef struct _GFileMonitorPrivate GFileMonitorPrivate;
struct _GFileMonitor
{
  GObject parent_instance;

  GFileMonitorPrivate *priv;
};
struct _GFileMonitorClass
{
  GObjectClass parent_class;

  void (* changed) (GFileMonitor *monitor,
                        GFile *file,
                        GFile *other_file,
                        GFileMonitorEvent event_type);

  gboolean (* cancel) (GFileMonitor *monitor);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_file_monitor_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_file_monitor_cancel (GFileMonitor *monitor);
 extern
gboolean g_file_monitor_is_cancelled (GFileMonitor *monitor);
 extern
void g_file_monitor_set_rate_limit (GFileMonitor *monitor,
                                        gint limit_msecs);
 extern
void g_file_monitor_emit_event (GFileMonitor *monitor,
                                        GFile *child,
                                        GFile *other_file,
                                        GFileMonitorEvent event_type);
# 24317 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFilenameCompleterClass GFilenameCompleterClass;
struct _GFilenameCompleterClass
{
  GObjectClass parent_class;


  void (* got_completion_data) (GFilenameCompleter *filename_completer);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};
 extern
GType g_filename_completer_get_type (void) __attribute__ ((__const__));
 extern
GFilenameCompleter *g_filename_completer_new (void);
 extern
char * g_filename_completer_get_completion_suffix (GFilenameCompleter *completer,
                                                                const char *initial_text);
 extern
char ** g_filename_completer_get_completions (GFilenameCompleter *completer,
                                                                const char *initial_text);
 extern
void g_filename_completer_set_dirs_only (GFilenameCompleter *completer,
                                                                gboolean dirs_only);
# 24357 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GFileOutputStreamClass GFileOutputStreamClass;
typedef struct _GFileOutputStreamPrivate GFileOutputStreamPrivate;
struct _GFileOutputStream
{
  GOutputStream parent_instance;

  GFileOutputStreamPrivate *priv;
};
struct _GFileOutputStreamClass
{
  GOutputStreamClass parent_class;
  goffset (* tell) (GFileOutputStream *stream);
  gboolean (* can_seek) (GFileOutputStream *stream);
  gboolean (* seek) (GFileOutputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileOutputStream *stream);
  gboolean (* truncate_fn) (GFileOutputStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileOutputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileOutputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileOutputStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  char * (* get_etag) (GFileOutputStream *stream);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_file_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GFileInfo *g_file_output_stream_query_info (GFileOutputStream *stream,
                                                   const char *attributes,
                                                   GCancellable *cancellable,
                                                   GError **error);
 extern
void g_file_output_stream_query_info_async (GFileOutputStream *stream,
         const char *attributes,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
 extern
GFileInfo *g_file_output_stream_query_info_finish (GFileOutputStream *stream,
         GAsyncResult *result,
         GError **error);
 extern
char * g_file_output_stream_get_etag (GFileOutputStream *stream);
# 24435 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GInetAddressClass GInetAddressClass;
typedef struct _GInetAddressPrivate GInetAddressPrivate;
struct _GInetAddress
{
  GObject parent_instance;

  GInetAddressPrivate *priv;
};
struct _GInetAddressClass
{
  GObjectClass parent_class;
  gchar * (*to_string) (GInetAddress *address);
  const guint8 * (*to_bytes) (GInetAddress *address);
};
 extern
GType g_inet_address_get_type (void) __attribute__ ((__const__));
 extern
GInetAddress * g_inet_address_new_from_string (const gchar *string);
 extern
GInetAddress * g_inet_address_new_from_bytes (const guint8 *bytes,
          GSocketFamily family);
 extern
GInetAddress * g_inet_address_new_loopback (GSocketFamily family);
 extern
GInetAddress * g_inet_address_new_any (GSocketFamily family);
 extern
gboolean g_inet_address_equal (GInetAddress *address,
                                                           GInetAddress *other_address);
 extern
gchar * g_inet_address_to_string (GInetAddress *address);
 extern
const guint8 * g_inet_address_to_bytes (GInetAddress *address);
 extern
gsize g_inet_address_get_native_size (GInetAddress *address);
 extern
GSocketFamily g_inet_address_get_family (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_any (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_loopback (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_link_local (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_site_local (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_multicast (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_mc_global (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_mc_link_local (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_mc_node_local (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_mc_org_local (GInetAddress *address);
 extern
gboolean g_inet_address_get_is_mc_site_local (GInetAddress *address);
# 24505 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GInetAddressMaskClass GInetAddressMaskClass;
typedef struct _GInetAddressMaskPrivate GInetAddressMaskPrivate;
struct _GInetAddressMask
{
  GObject parent_instance;

  GInetAddressMaskPrivate *priv;
};
struct _GInetAddressMaskClass
{
  GObjectClass parent_class;
};
 extern
GType g_inet_address_mask_get_type (void) __attribute__ ((__const__));
 extern
GInetAddressMask *g_inet_address_mask_new (GInetAddress *addr,
             guint length,
             GError **error);
 extern
GInetAddressMask *g_inet_address_mask_new_from_string (const gchar *mask_string,
             GError **error);
 extern
gchar *g_inet_address_mask_to_string (GInetAddressMask *mask);
 extern
GSocketFamily g_inet_address_mask_get_family (GInetAddressMask *mask);
 extern
GInetAddress *g_inet_address_mask_get_address (GInetAddressMask *mask);
 extern
guint g_inet_address_mask_get_length (GInetAddressMask *mask);
 extern
gboolean g_inet_address_mask_matches (GInetAddressMask *mask,
             GInetAddress *address);
 extern
gboolean g_inet_address_mask_equal (GInetAddressMask *mask,
             GInetAddressMask *mask2);
# 24559 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketAddressClass GSocketAddressClass;
struct _GSocketAddress
{
  GObject parent_instance;
};
struct _GSocketAddressClass
{
  GObjectClass parent_class;
  GSocketFamily (*get_family) (GSocketAddress *address);
  gssize (*get_native_size) (GSocketAddress *address);
  gboolean (*to_native) (GSocketAddress *address,
                                     gpointer dest,
                                     gsize destlen,
         GError **error);
};
 extern
GType g_socket_address_get_type (void) __attribute__ ((__const__));
 extern
GSocketFamily g_socket_address_get_family (GSocketAddress *address);
 extern
GSocketAddress * g_socket_address_new_from_native (gpointer native,
                                                        gsize len);
 extern
gboolean g_socket_address_to_native (GSocketAddress *address,
                                                        gpointer dest,
                                                        gsize destlen,
       GError **error);
 extern
gssize g_socket_address_get_native_size (GSocketAddress *address);
# 24597 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GInetSocketAddressClass GInetSocketAddressClass;
typedef struct _GInetSocketAddressPrivate GInetSocketAddressPrivate;
struct _GInetSocketAddress
{
  GSocketAddress parent_instance;

  GInetSocketAddressPrivate *priv;
};
struct _GInetSocketAddressClass
{
  GSocketAddressClass parent_class;
};
 extern
GType g_inet_socket_address_get_type (void) __attribute__ ((__const__));
 extern
GSocketAddress *g_inet_socket_address_new (GInetAddress *address,
                                                       guint16 port);
 extern
GSocketAddress *g_inet_socket_address_new_from_string (const char *address,
                                                       guint port);
 extern
GInetAddress * g_inet_socket_address_get_address (GInetSocketAddress *address);
 extern
guint16 g_inet_socket_address_get_port (GInetSocketAddress *address);
 extern
guint32 g_inet_socket_address_get_flowinfo (GInetSocketAddress *address);
 extern
guint32 g_inet_socket_address_get_scope_id (GInetSocketAddress *address);





 extern GType g_app_info_create_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_converter_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_converter_result_get_type (void) __attribute__ ((__const__));

 extern GType g_data_stream_byte_order_get_type (void) __attribute__ ((__const__));

 extern GType g_data_stream_newline_type_get_type (void) __attribute__ ((__const__));

 extern GType g_file_attribute_type_get_type (void) __attribute__ ((__const__));

 extern GType g_file_attribute_info_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_attribute_status_get_type (void) __attribute__ ((__const__));

 extern GType g_file_query_info_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_create_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_measure_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_mount_mount_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_mount_unmount_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_drive_start_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_drive_start_stop_type_get_type (void) __attribute__ ((__const__));

 extern GType g_file_copy_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_monitor_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_type_get_type (void) __attribute__ ((__const__));

 extern GType g_filesystem_preview_type_get_type (void) __attribute__ ((__const__));

 extern GType g_file_monitor_event_get_type (void) __attribute__ ((__const__));

 extern GType g_io_error_enum_get_type (void) __attribute__ ((__const__));

 extern GType g_ask_password_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_password_save_get_type (void) __attribute__ ((__const__));

 extern GType g_mount_operation_result_get_type (void) __attribute__ ((__const__));

 extern GType g_output_stream_splice_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_io_stream_splice_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_emblem_origin_get_type (void) __attribute__ ((__const__));

 extern GType g_resolver_error_get_type (void) __attribute__ ((__const__));

 extern GType g_resolver_record_type_get_type (void) __attribute__ ((__const__));

 extern GType g_resource_error_get_type (void) __attribute__ ((__const__));

 extern GType g_resource_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_resource_lookup_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_family_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_type_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_msg_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_protocol_get_type (void) __attribute__ ((__const__));

 extern GType g_zlib_compressor_format_get_type (void) __attribute__ ((__const__));

 extern GType g_unix_socket_address_type_get_type (void) __attribute__ ((__const__));

 extern GType g_bus_type_get_type (void) __attribute__ ((__const__));

 extern GType g_bus_name_owner_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_bus_name_watcher_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_proxy_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_error_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_connection_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_capability_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_call_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_message_type_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_message_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_message_header_field_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_property_info_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_subtree_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_server_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_signal_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_send_message_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_credentials_type_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_message_byte_order_get_type (void) __attribute__ ((__const__));

 extern GType g_application_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_error_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_certificate_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_authentication_mode_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_channel_binding_type_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_channel_binding_error_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_rehandshake_mode_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_password_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_interaction_result_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_interface_skeleton_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_object_manager_client_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_database_verify_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_database_lookup_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_certificate_request_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_protocol_version_get_type (void) __attribute__ ((__const__));

 extern GType g_io_module_scope_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_client_event_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_listener_event_get_type (void) __attribute__ ((__const__));

 extern GType g_test_dbus_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_subprocess_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_notification_priority_get_type (void) __attribute__ ((__const__));

 extern GType g_network_connectivity_get_type (void) __attribute__ ((__const__));

 extern GType g_pollable_return_get_type (void) __attribute__ ((__const__));

 extern GType g_memory_monitor_warning_level_get_type (void) __attribute__ ((__const__));

 extern GType g_resolver_name_lookup_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_settings_bind_flags_get_type (void) __attribute__ ((__const__));
# 25676 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum
{
  G_MODULE_BIND_LAZY = 1 << 0,
  G_MODULE_BIND_LOCAL = 1 << 1,
  G_MODULE_BIND_MASK = 0x03
} GModuleFlags;
typedef struct _GModule GModule;
typedef const gchar* (*GModuleCheckInit) (GModule *module);
typedef void (*GModuleUnload) (GModule *module);

 extern
GQuark g_module_error_quark (void);
typedef enum
{
  G_MODULE_ERROR_FAILED,
  G_MODULE_ERROR_CHECK_FAILED,
} GModuleError
                                    ;
 extern
gboolean g_module_supported (void) __attribute__ ((__const__));
 extern
GModule* g_module_open (const gchar *file_name,
           GModuleFlags flags);
 extern
GModule *g_module_open_full (const gchar *file_name,
                                              GModuleFlags flags,
                                              GError **error);
 extern
gboolean g_module_close (GModule *module);
 extern
void g_module_make_resident (GModule *module);
 extern
const gchar * g_module_error (void);
 extern
gboolean g_module_symbol (GModule *module,
           const gchar *symbol_name,
           gpointer *symbol);
 extern
const gchar * g_module_name (GModule *module);
__attribute__((__deprecated__)) extern
gchar* g_module_build_path (const gchar *directory,
           const gchar *module_name);



typedef struct _GIOModuleScope GIOModuleScope;
 extern
GIOModuleScope * g_io_module_scope_new (GIOModuleScopeFlags flags);
 extern
void g_io_module_scope_free (GIOModuleScope *scope);
 extern
void g_io_module_scope_block (GIOModuleScope *scope,
                                              const gchar *basename);






typedef struct _GIOModuleClass GIOModuleClass;
 extern
GType g_io_module_get_type (void) __attribute__ ((__const__));
 extern
GIOModule *g_io_module_new (const gchar *filename);
 extern
void g_io_modules_scan_all_in_directory (const char *dirname);
 extern
GList *g_io_modules_load_all_in_directory (const gchar *dirname);
 extern
void g_io_modules_scan_all_in_directory_with_scope (const gchar *dirname,
                                                                    GIOModuleScope *scope);
 extern
GList *g_io_modules_load_all_in_directory_with_scope (const gchar *dirname,
                                                                    GIOModuleScope *scope);
 extern
GIOExtensionPoint *g_io_extension_point_register (const char *name);
 extern
GIOExtensionPoint *g_io_extension_point_lookup (const char *name);
 extern
void g_io_extension_point_set_required_type (GIOExtensionPoint *extension_point,
              GType type);
 extern
GType g_io_extension_point_get_required_type (GIOExtensionPoint *extension_point);
 extern
GList *g_io_extension_point_get_extensions (GIOExtensionPoint *extension_point);
 extern
GIOExtension * g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point,
              const char *name);
 extern
GIOExtension * g_io_extension_point_implement (const char *extension_point_name,
              GType type,
              const char *extension_name,
              gint priority);
 extern
GType g_io_extension_get_type (GIOExtension *extension);
 extern
const char * g_io_extension_get_name (GIOExtension *extension);
 extern
gint g_io_extension_get_priority (GIOExtension *extension);
 extern
GTypeClass* g_io_extension_ref_class (GIOExtension *extension);
__attribute__((visibility("default")))
void g_io_module_load (GIOModule *module);
__attribute__((visibility("default")))
void g_io_module_unload (GIOModule *module);
__attribute__((visibility("default")))
char **g_io_module_query (void);
# 25791 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
__attribute__((__deprecated__("Use '" "\"GThreadPool or g_task_run_in_thread\"" "' instead"))) extern
void g_io_scheduler_push_job (GIOSchedulerJobFunc job_func,
          gpointer user_data,
          GDestroyNotify notify,
          gint io_priority,
          GCancellable *cancellable);
__attribute__((__deprecated__)) extern
void g_io_scheduler_cancel_all_jobs (void);
__attribute__((__deprecated__("Use '" "g_main_context_invoke" "' instead"))) extern
gboolean g_io_scheduler_job_send_to_mainloop (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);
__attribute__((__deprecated__("Use '" "g_main_context_invoke" "' instead"))) extern
void g_io_scheduler_job_send_to_mainloop_async (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);
# 25818 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_list_model_get_type (void);
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 typedef struct _GListModel GListModel; typedef struct _GListModelInterface GListModelInterface; typedef GListModel *GListModel_autoptr; typedef GList *GListModel_listautoptr; typedef GSList *GListModel_slistautoptr; typedef GQueue *GListModel_queueautoptr;
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListModel (GListModel *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListModel (GListModel **_ptr) { glib_autoptr_clear_GListModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListModel (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListModel (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 __attribute__ ((__unused__)) static inline GListModel * G_LIST_MODEL (gpointer ptr) { return (((GListModel*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_list_model_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean G_IS_LIST_MODEL (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_list_model_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GListModelInterface * G_LIST_MODEL_GET_IFACE (gpointer ptr) { return (((GListModelInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_list_model_get_type ())))); }
# 25819 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
struct _GListModelInterface
{
  GTypeInterface g_iface;
  GType (* get_item_type) (GListModel *list);
  guint (* get_n_items) (GListModel *list);
  gpointer (* get_item) (GListModel *list,
                                 guint position);
};
 extern
GType g_list_model_get_item_type (GListModel *list);
 extern
guint g_list_model_get_n_items (GListModel *list);
 extern
gpointer g_list_model_get_item (GListModel *list,
                                                                         guint position);
 extern
GObject * g_list_model_get_object (GListModel *list,
                                                                         guint position);
 extern
void g_list_model_items_changed (GListModel *list,
                                                                         guint position,
                                                                         guint removed,
                                                                         guint added);
# 25852 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_list_store_get_type (void);
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 typedef struct _GListStore GListStore; typedef struct { GObjectClass parent_class; } GListStoreClass; typedef GListStore *GListStore_autoptr; typedef GList *GListStore_listautoptr; typedef GSList *GListStore_slistautoptr; typedef GQueue *GListStore_queueautoptr;
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListStore (GListStore *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListStore (GListStore **_ptr) { glib_autoptr_clear_GListStore (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListStore (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListStore (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListStore (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 typedef GListStoreClass *GListStoreClass_autoptr; typedef GList *GListStoreClass_listautoptr; typedef GSList *GListStoreClass_slistautoptr; typedef GQueue *GListStoreClass_queueautoptr;
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListStoreClass (GListStoreClass *_ptr) { if (_ptr) (g_type_class_unref) ((GListStoreClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListStoreClass (GListStoreClass **_ptr) { glib_autoptr_clear_GListStoreClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListStoreClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListStoreClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListStoreClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 __attribute__ ((__unused__)) static inline GListStore * G_LIST_STORE (gpointer ptr) { return (((GListStore*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_list_store_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean G_IS_LIST_STORE (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_list_store_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); }
# 25853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
 extern
GListStore * g_list_store_new (GType item_type);
 extern
void g_list_store_insert (GListStore *store,
                                                                         guint position,
                                                                         gpointer item);
 extern
guint g_list_store_insert_sorted (GListStore *store,
                                                                         gpointer item,
                                                                         GCompareDataFunc compare_func,
                                                                         gpointer user_data);
 extern
void g_list_store_sort (GListStore *store,
                                                                         GCompareDataFunc compare_func,
                                                                         gpointer user_data);
 extern
void g_list_store_append (GListStore *store,
                                                                         gpointer item);
 extern
void g_list_store_remove (GListStore *store,
                                                                         guint position);
 extern
void g_list_store_remove_all (GListStore *store);
 extern
void g_list_store_splice (GListStore *store,
                                                                         guint position,
                                                                         guint n_removals,
                                                                         gpointer *additions,
                                                                         guint n_additions);
 extern
gboolean g_list_store_find (GListStore *store,
                                                                         gpointer item,
                                                                         guint *position);
 extern
gboolean g_list_store_find_with_equal_func (GListStore *store,
                                                                         gpointer item,
                                                                         GEqualFunc equal_func,
                                                                         guint *position);
 extern
gboolean g_list_store_find_with_equal_func_full (GListStore *store,
                                                                         gpointer item,
                                                                         GEqualFuncFull equal_func,
                                                                         gpointer user_data,
                                                                         guint *position);
# 25910 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GLoadableIconIface GLoadableIconIface;
struct _GLoadableIconIface
{
  GTypeInterface g_iface;

  GInputStream * (* load) (GLoadableIcon *icon,
                                  int size,
                                  char **type,
                                  GCancellable *cancellable,
                                  GError **error);
  void (* load_async) (GLoadableIcon *icon,
                                  int size,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  GInputStream * (* load_finish) (GLoadableIcon *icon,
                                  GAsyncResult *res,
                                  char **type,
                                  GError **error);
};
 extern
GType g_loadable_icon_get_type (void) __attribute__ ((__const__));
 extern
GInputStream *g_loadable_icon_load (GLoadableIcon *icon,
        int size,
        char **type,
        GCancellable *cancellable,
        GError **error);
 extern
void g_loadable_icon_load_async (GLoadableIcon *icon,
        int size,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
 extern
GInputStream *g_loadable_icon_load_finish (GLoadableIcon *icon,
        GAsyncResult *res,
        char **type,
        GError **error);
# 25963 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GMemoryInputStreamClass GMemoryInputStreamClass;
typedef struct _GMemoryInputStreamPrivate GMemoryInputStreamPrivate;
struct _GMemoryInputStream
{
  GInputStream parent_instance;

  GMemoryInputStreamPrivate *priv;
};
struct _GMemoryInputStreamClass
{
  GInputStreamClass parent_class;

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_memory_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream * g_memory_input_stream_new (void);
 extern
GInputStream * g_memory_input_stream_new_from_data (const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
 extern
GInputStream * g_memory_input_stream_new_from_bytes (GBytes *bytes);
 extern
void g_memory_input_stream_add_data (GMemoryInputStream *stream,
                                                    const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
 extern
void g_memory_input_stream_add_bytes (GMemoryInputStream *stream,
          GBytes *bytes);
# 26009 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_memory_monitor_get_type (void);
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 typedef struct _GMemoryMonitor GMemoryMonitor; typedef struct _GMemoryMonitorInterface GMemoryMonitorInterface; typedef GMemoryMonitor *GMemoryMonitor_autoptr; typedef GList *GMemoryMonitor_listautoptr; typedef GSList *GMemoryMonitor_slistautoptr; typedef GQueue *GMemoryMonitor_queueautoptr;
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryMonitor (GMemoryMonitor *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryMonitor (GMemoryMonitor **_ptr) { glib_autoptr_clear_GMemoryMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 __attribute__ ((__unused__)) static inline GMemoryMonitor * g_memory_monitor (gpointer ptr) { return (((GMemoryMonitor*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_memory_monitor_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean g_IS_memory_monitor (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_memory_monitor_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GMemoryMonitorInterface * g_memory_monitor_GET_IFACE (gpointer ptr) { return (((GMemoryMonitorInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_memory_monitor_get_type ())))); }
# 26010 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop



struct _GMemoryMonitorInterface {

  GTypeInterface g_iface;

  void (*low_memory_warning) (GMemoryMonitor *monitor,
                                   GMemoryMonitorWarningLevel level);
};
 extern
GMemoryMonitor *g_memory_monitor_dup_default (void);
# 26037 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GMemoryOutputStreamClass GMemoryOutputStreamClass;
typedef struct _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate;
struct _GMemoryOutputStream
{
  GOutputStream parent_instance;

  GMemoryOutputStreamPrivate *priv;
};
struct _GMemoryOutputStreamClass
{
  GOutputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
typedef gpointer (* GReallocFunc) (gpointer data,
                                   gsize size);
 extern
GType g_memory_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GOutputStream *g_memory_output_stream_new (gpointer data,
                                                     gsize size,
                                                     GReallocFunc realloc_function,
                                                     GDestroyNotify destroy_function);
 extern
GOutputStream *g_memory_output_stream_new_resizable (void);
 extern
gpointer g_memory_output_stream_get_data (GMemoryOutputStream *ostream);
 extern
gsize g_memory_output_stream_get_size (GMemoryOutputStream *ostream);
 extern
gsize g_memory_output_stream_get_data_size (GMemoryOutputStream *ostream);
 extern
gpointer g_memory_output_stream_steal_data (GMemoryOutputStream *ostream);
 extern
GBytes * g_memory_output_stream_steal_as_bytes (GMemoryOutputStream *ostream);
# 26102 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GMenuModelPrivate GMenuModelPrivate;
typedef struct _GMenuModelClass GMenuModelClass;
typedef struct _GMenuAttributeIterPrivate GMenuAttributeIterPrivate;
typedef struct _GMenuAttributeIterClass GMenuAttributeIterClass;
typedef struct _GMenuAttributeIter GMenuAttributeIter;
typedef struct _GMenuLinkIterPrivate GMenuLinkIterPrivate;
typedef struct _GMenuLinkIterClass GMenuLinkIterClass;
typedef struct _GMenuLinkIter GMenuLinkIter;
struct _GMenuModel
{
  GObject parent_instance;
  GMenuModelPrivate *priv;
};
struct _GMenuModelClass
{
  GObjectClass parent_class;
  gboolean (*is_mutable) (GMenuModel *model);
  gint (*get_n_items) (GMenuModel *model);
  void (*get_item_attributes) (GMenuModel *model,
                                                             gint item_index,
                                                             GHashTable **attributes);
  GMenuAttributeIter * (*iterate_item_attributes) (GMenuModel *model,
                                                             gint item_index);
  GVariant * (*get_item_attribute_value) (GMenuModel *model,
                                                             gint item_index,
                                                             const gchar *attribute,
                                                             const GVariantType *expected_type);
  void (*get_item_links) (GMenuModel *model,
                                                             gint item_index,
                                                             GHashTable **links);
  GMenuLinkIter * (*iterate_item_links) (GMenuModel *model,
                                                             gint item_index);
  GMenuModel * (*get_item_link) (GMenuModel *model,
                                                             gint item_index,
                                                             const gchar *link);
};
 extern
GType g_menu_model_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_menu_model_is_mutable (GMenuModel *model);
 extern
gint g_menu_model_get_n_items (GMenuModel *model);
 extern
GMenuAttributeIter * g_menu_model_iterate_item_attributes (GMenuModel *model,
                                                                         gint item_index);
 extern
GVariant * g_menu_model_get_item_attribute_value (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *attribute,
                                                                         const GVariantType *expected_type);
 extern
gboolean g_menu_model_get_item_attribute (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *attribute,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GMenuLinkIter * g_menu_model_iterate_item_links (GMenuModel *model,
                                                                         gint item_index);
 extern
GMenuModel * g_menu_model_get_item_link (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *link);
 extern
void g_menu_model_items_changed (GMenuModel *model,
                                                                         gint position,
                                                                         gint removed,
                                                                         gint added);
# 26181 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
struct _GMenuAttributeIter
{
  GObject parent_instance;
  GMenuAttributeIterPrivate *priv;
};
struct _GMenuAttributeIterClass
{
  GObjectClass parent_class;
  gboolean (*get_next) (GMenuAttributeIter *iter,
                             const gchar **out_name,
                             GVariant **value);
};
 extern
GType g_menu_attribute_iter_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_menu_attribute_iter_get_next (GMenuAttributeIter *iter,
                                                                         const gchar **out_name,
                                                                         GVariant **value);
 extern
gboolean g_menu_attribute_iter_next (GMenuAttributeIter *iter);
 extern
const gchar * g_menu_attribute_iter_get_name (GMenuAttributeIter *iter);
 extern
GVariant * g_menu_attribute_iter_get_value (GMenuAttributeIter *iter);
# 26216 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
struct _GMenuLinkIter
{
  GObject parent_instance;
  GMenuLinkIterPrivate *priv;
};
struct _GMenuLinkIterClass
{
  GObjectClass parent_class;
  gboolean (*get_next) (GMenuLinkIter *iter,
                             const gchar **out_link,
                             GMenuModel **value);
};
 extern
GType g_menu_link_iter_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_menu_link_iter_get_next (GMenuLinkIter *iter,
                                                                         const gchar **out_link,
                                                                         GMenuModel **value);
 extern
gboolean g_menu_link_iter_next (GMenuLinkIter *iter);
 extern
const gchar * g_menu_link_iter_get_name (GMenuLinkIter *iter);
 extern
GMenuModel * g_menu_link_iter_get_value (GMenuLinkIter *iter);
# 26253 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GMenuItem GMenuItem;
typedef struct _GMenu GMenu;
 extern
GType g_menu_get_type (void) __attribute__ ((__const__));
 extern
GMenu * g_menu_new (void);
 extern
void g_menu_freeze (GMenu *menu);
 extern
void g_menu_insert_item (GMenu *menu,
                                                     gint position,
                                                     GMenuItem *item);
 extern
void g_menu_prepend_item (GMenu *menu,
                                                     GMenuItem *item);
 extern
void g_menu_append_item (GMenu *menu,
                                                     GMenuItem *item);
 extern
void g_menu_remove (GMenu *menu,
                                                     gint position);
 extern
void g_menu_remove_all (GMenu *menu);
 extern
void g_menu_insert (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
 extern
void g_menu_prepend (GMenu *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
 extern
void g_menu_append (GMenu *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
 extern
void g_menu_insert_section (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     GMenuModel *section);
 extern
void g_menu_prepend_section (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *section);
 extern
void g_menu_append_section (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *section);
 extern
void g_menu_insert_submenu (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
 extern
void g_menu_prepend_submenu (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
 extern
void g_menu_append_submenu (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
 extern
GType g_menu_item_get_type (void) __attribute__ ((__const__));
 extern
GMenuItem * g_menu_item_new (const gchar *label,
                                                     const gchar *detailed_action);
 extern
GMenuItem * g_menu_item_new_from_model (GMenuModel *model,
                                                     gint item_index);
 extern
GMenuItem * g_menu_item_new_submenu (const gchar *label,
                                                     GMenuModel *submenu);
 extern
GMenuItem * g_menu_item_new_section (const gchar *label,
                                                     GMenuModel *section);
 extern
GVariant * g_menu_item_get_attribute_value (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const GVariantType *expected_type);
 extern
gboolean g_menu_item_get_attribute (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
 extern
GMenuModel *g_menu_item_get_link (GMenuItem *menu_item,
                                                     const gchar *link);
 extern
void g_menu_item_set_attribute_value (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     GVariant *value);
 extern
void g_menu_item_set_attribute (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
 extern
void g_menu_item_set_link (GMenuItem *menu_item,
                                                     const gchar *link,
                                                     GMenuModel *model);
 extern
void g_menu_item_set_label (GMenuItem *menu_item,
                                                     const gchar *label);
 extern
void g_menu_item_set_submenu (GMenuItem *menu_item,
                                                     GMenuModel *submenu);
 extern
void g_menu_item_set_section (GMenuItem *menu_item,
                                                     GMenuModel *section);
 extern
void g_menu_item_set_action_and_target_value (GMenuItem *menu_item,
                                                     const gchar *action,
                                                     GVariant *target_value);
 extern
void g_menu_item_set_action_and_target (GMenuItem *menu_item,
                                                     const gchar *action,
                                                     const gchar *format_string,
                                                     ...);
 extern
void g_menu_item_set_detailed_action (GMenuItem *menu_item,
                                                     const gchar *detailed_action);
 extern
void g_menu_item_set_icon (GMenuItem *menu_item,
                                                     GIcon *icon);





 extern
guint g_dbus_connection_export_menu_model (GDBusConnection *connection,
                                                                         const gchar *object_path,
                                                                         GMenuModel *menu,
                                                                         GError **error);
 extern
void g_dbus_connection_unexport_menu_model (GDBusConnection *connection,
                                                                         guint export_id);
# 26403 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GMountIface GMountIface;
struct _GMountIface
{
  GTypeInterface g_iface;

  void (* changed) (GMount *mount);
  void (* unmounted) (GMount *mount);

  GFile * (* get_root) (GMount *mount);
  char * (* get_name) (GMount *mount);
  GIcon * (* get_icon) (GMount *mount);
  char * (* get_uuid) (GMount *mount);
  GVolume * (* get_volume) (GMount *mount);
  GDrive * (* get_drive) (GMount *mount);
  gboolean (* can_unmount) (GMount *mount);
  gboolean (* can_eject) (GMount *mount);
  void (* unmount) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  void (* eject) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  void (* remount) (GMount *mount,
                                             GMountMountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* remount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  void (* guess_content_type) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gchar ** (* guess_content_type_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  gchar ** (* guess_content_type_sync) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GError **error);

  void (* pre_unmount) (GMount *mount);
  void (* unmount_with_operation) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_with_operation_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  void (* eject_with_operation) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  GFile * (* get_default_location) (GMount *mount);
  const gchar * (* get_sort_key) (GMount *mount);
  GIcon * (* get_symbolic_icon) (GMount *mount);
};
 extern
GType g_mount_get_type (void) __attribute__ ((__const__));
 extern
GFile * g_mount_get_root (GMount *mount);
 extern
GFile * g_mount_get_default_location (GMount *mount);
 extern
char * g_mount_get_name (GMount *mount);
 extern
GIcon * g_mount_get_icon (GMount *mount);
 extern
GIcon * g_mount_get_symbolic_icon (GMount *mount);
 extern
char * g_mount_get_uuid (GMount *mount);
 extern
GVolume * g_mount_get_volume (GMount *mount);
 extern
GDrive * g_mount_get_drive (GMount *mount);
 extern
gboolean g_mount_can_unmount (GMount *mount);
 extern
gboolean g_mount_can_eject (GMount *mount);
__attribute__((__deprecated__("Use '" "g_mount_unmount_with_operation" "' instead"))) extern
void g_mount_unmount (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
__attribute__((__deprecated__("Use '" "g_mount_unmount_with_operation_finish" "' instead"))) extern
gboolean g_mount_unmount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
__attribute__((__deprecated__("Use '" "g_mount_eject_with_operation" "' instead"))) extern
void g_mount_eject (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
__attribute__((__deprecated__("Use '" "g_mount_eject_with_operation_finish" "' instead"))) extern
gboolean g_mount_eject_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
 extern
void g_mount_remount (GMount *mount,
                                               GMountMountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_mount_remount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
 extern
void g_mount_guess_content_type (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gchar ** g_mount_guess_content_type_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
 extern
gchar ** g_mount_guess_content_type_sync (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GError **error);
 extern
gboolean g_mount_is_shadowed (GMount *mount);
 extern
void g_mount_shadow (GMount *mount);
 extern
void g_mount_unshadow (GMount *mount);
 extern
void g_mount_unmount_with_operation (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_mount_unmount_with_operation_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
 extern
void g_mount_eject_with_operation (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_mount_eject_with_operation_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
 extern
const gchar *g_mount_get_sort_key (GMount *mount);
# 26592 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GMountOperationClass GMountOperationClass;
typedef struct _GMountOperationPrivate GMountOperationPrivate;
struct _GMountOperation
{
  GObject parent_instance;
  GMountOperationPrivate *priv;
};
struct _GMountOperationClass
{
  GObjectClass parent_class;

  void (* ask_password) (GMountOperation *op,
    const char *message,
    const char *default_user,
    const char *default_domain,
    GAskPasswordFlags flags);

  void (* ask_question) (GMountOperation *op,
    const char *message,
    const char *choices[]);
  void (* reply) (GMountOperation *op,
    GMountOperationResult result);
  void (* aborted) (GMountOperation *op);

  void (* show_processes) (GMountOperation *op,
                           const gchar *message,
                           GArray *processes,
                           const gchar *choices[]);
  void (* show_unmount_progress) (GMountOperation *op,
                                  const gchar *message,
                                  gint64 time_left,
                                  gint64 bytes_left);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
};
 extern
GType g_mount_operation_get_type (void) __attribute__ ((__const__));
 extern
GMountOperation * g_mount_operation_new (void);
 extern
const char * g_mount_operation_get_username (GMountOperation *op);
 extern
void g_mount_operation_set_username (GMountOperation *op,
         const char *username);
 extern
const char * g_mount_operation_get_password (GMountOperation *op);
 extern
void g_mount_operation_set_password (GMountOperation *op,
         const char *password);
 extern
gboolean g_mount_operation_get_anonymous (GMountOperation *op);
 extern
void g_mount_operation_set_anonymous (GMountOperation *op,
         gboolean anonymous);
 extern
const char * g_mount_operation_get_domain (GMountOperation *op);
 extern
void g_mount_operation_set_domain (GMountOperation *op,
         const char *domain);
 extern
GPasswordSave g_mount_operation_get_password_save (GMountOperation *op);
 extern
void g_mount_operation_set_password_save (GMountOperation *op,
         GPasswordSave save);
 extern
int g_mount_operation_get_choice (GMountOperation *op);
 extern
void g_mount_operation_set_choice (GMountOperation *op,
         int choice);
 extern
void g_mount_operation_reply (GMountOperation *op,
         GMountOperationResult result);
 extern
gboolean g_mount_operation_get_is_tcrypt_hidden_volume (GMountOperation *op);
 extern
void g_mount_operation_set_is_tcrypt_hidden_volume (GMountOperation *op,
                                                             gboolean hidden_volume);
 extern
gboolean g_mount_operation_get_is_tcrypt_system_volume (GMountOperation *op);
 extern
void g_mount_operation_set_is_tcrypt_system_volume (GMountOperation *op,
                                                             gboolean system_volume);
 extern
guint g_mount_operation_get_pim (GMountOperation *op);
 extern
void g_mount_operation_set_pim (GMountOperation *op,
                                                   guint pim);
# 26702 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GNativeSocketAddressClass GNativeSocketAddressClass;
typedef struct _GNativeSocketAddressPrivate GNativeSocketAddressPrivate;
struct _GNativeSocketAddress
{
  GSocketAddress parent_instance;

  GNativeSocketAddressPrivate *priv;
};
struct _GNativeSocketAddressClass
{
  GSocketAddressClass parent_class;
};
 extern
GType g_native_socket_address_get_type (void) __attribute__ ((__const__));
 extern
GSocketAddress *g_native_socket_address_new (gpointer native,
                                                        gsize len);
# 26739 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GVolumeMonitorClass GVolumeMonitorClass;
struct _GVolumeMonitor
{
  GObject parent_instance;

  gpointer priv;
};
struct _GVolumeMonitorClass
{
  GObjectClass parent_class;


  void (* volume_added) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_removed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_changed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* mount_added) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_removed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_pre_unmount) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_changed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* drive_connected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_disconnected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_changed) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);

  gboolean (* is_supported) (void);
  GList * (* get_connected_drives) (GVolumeMonitor *volume_monitor);
  GList * (* get_volumes) (GVolumeMonitor *volume_monitor);
  GList * (* get_mounts) (GVolumeMonitor *volume_monitor);
  GVolume * (* get_volume_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);
  GMount * (* get_mount_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);

  GVolume * (* adopt_orphan_mount) (GMount *mount,
                                      GVolumeMonitor *volume_monitor);

  void (* drive_eject_button) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);

  void (* drive_stop_button) (GVolumeMonitor *volume_monitor,
                                     GDrive *drive);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
 extern
GType g_volume_monitor_get_type (void) __attribute__ ((__const__));
 extern
GVolumeMonitor *g_volume_monitor_get (void);
 extern
GList * g_volume_monitor_get_connected_drives (GVolumeMonitor *volume_monitor);
 extern
GList * g_volume_monitor_get_volumes (GVolumeMonitor *volume_monitor);
 extern
GList * g_volume_monitor_get_mounts (GVolumeMonitor *volume_monitor);
 extern
GVolume * g_volume_monitor_get_volume_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);
 extern
GMount * g_volume_monitor_get_mount_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);
__attribute__((__deprecated__)) extern
GVolume * g_volume_monitor_adopt_orphan_mount (GMount *mount);
# 26825 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GNativeVolumeMonitor GNativeVolumeMonitor;
typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;
struct _GNativeVolumeMonitor
{
  GVolumeMonitor parent_instance;
};
struct _GNativeVolumeMonitorClass
{
  GVolumeMonitorClass parent_class;
  GMount * (* get_mount_for_mount_path) (const char *mount_path,
                                         GCancellable *cancellable);
};
 extern
GType g_native_volume_monitor_get_type (void) __attribute__ ((__const__));
# 26853 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GNetworkAddressClass GNetworkAddressClass;
typedef struct _GNetworkAddressPrivate GNetworkAddressPrivate;
struct _GNetworkAddress
{
  GObject parent_instance;

  GNetworkAddressPrivate *priv;
};
struct _GNetworkAddressClass
{
  GObjectClass parent_class;
};
 extern
GType g_network_address_get_type (void) __attribute__ ((__const__));
 extern
GSocketConnectable *g_network_address_new (const gchar *hostname,
          guint16 port);
 extern
GSocketConnectable *g_network_address_new_loopback (guint16 port);
 extern
GSocketConnectable *g_network_address_parse (const gchar *host_and_port,
          guint16 default_port,
          GError **error);
 extern
GSocketConnectable *g_network_address_parse_uri (const gchar *uri,
              guint16 default_port,
          GError **error);
 extern
const gchar *g_network_address_get_hostname (GNetworkAddress *addr);
 extern
guint16 g_network_address_get_port (GNetworkAddress *addr);
 extern
const gchar *g_network_address_get_scheme (GNetworkAddress *addr);
# 26899 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GNetworkMonitorInterface GNetworkMonitorInterface;
struct _GNetworkMonitorInterface {
  GTypeInterface g_iface;
  void (*network_changed) (GNetworkMonitor *monitor,
    gboolean network_available);
  gboolean (*can_reach) (GNetworkMonitor *monitor,
    GSocketConnectable *connectable,
    GCancellable *cancellable,
    GError **error);
  void (*can_reach_async) (GNetworkMonitor *monitor,
    GSocketConnectable *connectable,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);
  gboolean (*can_reach_finish) (GNetworkMonitor *monitor,
    GAsyncResult *result,
    GError **error);
};
 extern
GType g_network_monitor_get_type (void) __attribute__ ((__const__));
 extern
GNetworkMonitor *g_network_monitor_get_default (void);
 extern
gboolean g_network_monitor_get_network_available (GNetworkMonitor *monitor);
 extern
gboolean g_network_monitor_get_network_metered (GNetworkMonitor *monitor);
 extern
GNetworkConnectivity g_network_monitor_get_connectivity (GNetworkMonitor *monitor);
 extern
gboolean g_network_monitor_can_reach (GNetworkMonitor *monitor,
                                                               GSocketConnectable *connectable,
                                                               GCancellable *cancellable,
                                                               GError **error);
 extern
void g_network_monitor_can_reach_async (GNetworkMonitor *monitor,
                                                               GSocketConnectable *connectable,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
gboolean g_network_monitor_can_reach_finish (GNetworkMonitor *monitor,
                                                               GAsyncResult *result,
                                                               GError **error);
# 26956 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GNetworkServiceClass GNetworkServiceClass;
typedef struct _GNetworkServicePrivate GNetworkServicePrivate;
struct _GNetworkService
{
  GObject parent_instance;

  GNetworkServicePrivate *priv;
};
struct _GNetworkServiceClass
{
  GObjectClass parent_class;
};
 extern
GType g_network_service_get_type (void) __attribute__ ((__const__));
 extern
GSocketConnectable *g_network_service_new (const gchar *service,
            const gchar *protocol,
            const gchar *domain);
 extern
const gchar *g_network_service_get_service (GNetworkService *srv);
 extern
const gchar *g_network_service_get_protocol (GNetworkService *srv);
 extern
const gchar *g_network_service_get_domain (GNetworkService *srv);
 extern
const gchar *g_network_service_get_scheme (GNetworkService *srv);
 extern
void g_network_service_set_scheme (GNetworkService *srv, const gchar *scheme);
# 26995 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_notification_get_type (void) __attribute__ ((__const__));
 extern
GNotification * g_notification_new (const gchar *title);
 extern
void g_notification_set_title (GNotification *notification,
                                                                         const gchar *title);
 extern
void g_notification_set_body (GNotification *notification,
                                                                         const gchar *body);
 extern
void g_notification_set_icon (GNotification *notification,
                                                                         GIcon *icon);
__attribute__((__deprecated__("Use '" "g_notification_set_priority" "' instead"))) extern
void g_notification_set_urgent (GNotification *notification,
                                                                         gboolean urgent);
 extern
void g_notification_set_priority (GNotification *notification,
                                                                         GNotificationPriority priority);
 extern
void g_notification_set_category (GNotification *notification,
                                                                         const gchar *category);
 extern
void g_notification_add_button (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *detailed_action);
 extern
void g_notification_add_button_with_target (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *action,
                                                                         const gchar *target_format,
                                                                         ...);
 extern
void g_notification_add_button_with_target_value (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *action,
                                                                         GVariant *target);
 extern
void g_notification_set_default_action (GNotification *notification,
                                                                         const gchar *detailed_action);
 extern
void g_notification_set_default_action_and_target (GNotification *notification,
                                                                         const gchar *action,
                                                                         const gchar *target_format,
                                                                         ...);
 extern
void g_notification_set_default_action_and_target_value (GNotification *notification,
                                                                         const gchar *action,
                                                                         GVariant *target);
# 27063 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GPermissionPrivate GPermissionPrivate;
typedef struct _GPermissionClass GPermissionClass;
struct _GPermission
{
  GObject parent_instance;

  GPermissionPrivate *priv;
};
struct _GPermissionClass {
  GObjectClass parent_class;
  gboolean (*acquire) (GPermission *permission,
                              GCancellable *cancellable,
                              GError **error);
  void (*acquire_async) (GPermission *permission,
                              GCancellable *cancellable,
                              GAsyncReadyCallback callback,
                              gpointer user_data);
  gboolean (*acquire_finish) (GPermission *permission,
                              GAsyncResult *result,
                              GError **error);
  gboolean (*release) (GPermission *permission,
                              GCancellable *cancellable,
                              GError **error);
  void (*release_async) (GPermission *permission,
                              GCancellable *cancellable,
                              GAsyncReadyCallback callback,
                              gpointer user_data);
  gboolean (*release_finish) (GPermission *permission,
                              GAsyncResult *result,
                              GError **error);
  gpointer reserved[16];
};
 extern
GType g_permission_get_type (void);
 extern
gboolean g_permission_acquire (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GError **error);
 extern
void g_permission_acquire_async (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
 extern
gboolean g_permission_acquire_finish (GPermission *permission,
                                                 GAsyncResult *result,
                                                 GError **error);
 extern
gboolean g_permission_release (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GError **error);
 extern
void g_permission_release_async (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
 extern
gboolean g_permission_release_finish (GPermission *permission,
                                                 GAsyncResult *result,
                                                 GError **error);
 extern
gboolean g_permission_get_allowed (GPermission *permission);
 extern
gboolean g_permission_get_can_acquire (GPermission *permission);
 extern
gboolean g_permission_get_can_release (GPermission *permission);
 extern
void g_permission_impl_update (GPermission *permission,
                                                 gboolean allowed,
                                                 gboolean can_acquire,
                                                 gboolean can_release);
# 27146 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface;
struct _GPollableInputStreamInterface
{
  GTypeInterface g_iface;

  gboolean (*can_poll) (GPollableInputStream *stream);
  gboolean (*is_readable) (GPollableInputStream *stream);
  GSource * (*create_source) (GPollableInputStream *stream,
        GCancellable *cancellable);
  gssize (*read_nonblocking) (GPollableInputStream *stream,
        void *buffer,
        gsize count,
        GError **error);
};
 extern
GType g_pollable_input_stream_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_pollable_input_stream_can_poll (GPollableInputStream *stream);
 extern
gboolean g_pollable_input_stream_is_readable (GPollableInputStream *stream);
 extern
GSource *g_pollable_input_stream_create_source (GPollableInputStream *stream,
         GCancellable *cancellable);
 extern
gssize g_pollable_input_stream_read_nonblocking (GPollableInputStream *stream,
         void *buffer,
         gsize count,
         GCancellable *cancellable,
         GError **error);
# 27187 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GPollableOutputStreamInterface GPollableOutputStreamInterface;
struct _GPollableOutputStreamInterface
{
  GTypeInterface g_iface;

  gboolean (*can_poll) (GPollableOutputStream *stream);
  gboolean (*is_writable) (GPollableOutputStream *stream);
  GSource * (*create_source) (GPollableOutputStream *stream,
         GCancellable *cancellable);
  gssize (*write_nonblocking) (GPollableOutputStream *stream,
         const void *buffer,
         gsize count,
         GError **error);
  GPollableReturn (*writev_nonblocking) (GPollableOutputStream *stream,
      const GOutputVector *vectors,
      gsize n_vectors,
      gsize *bytes_written,
      GError **error);
};
 extern
GType g_pollable_output_stream_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_pollable_output_stream_can_poll (GPollableOutputStream *stream);
 extern
gboolean g_pollable_output_stream_is_writable (GPollableOutputStream *stream);
 extern
GSource *g_pollable_output_stream_create_source (GPollableOutputStream *stream,
           GCancellable *cancellable);
 extern
gssize g_pollable_output_stream_write_nonblocking (GPollableOutputStream *stream,
           const void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);
 extern
GPollableReturn g_pollable_output_stream_writev_nonblocking (GPollableOutputStream *stream,
            const GOutputVector *vectors,
            gsize n_vectors,
            gsize *bytes_written,
            GCancellable *cancellable,
            GError **error);
# 27236 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GSource *g_pollable_source_new (GObject *pollable_stream);
 extern
GSource *g_pollable_source_new_full (gpointer pollable_stream,
          GSource *child_source,
          GCancellable *cancellable);
 extern
gssize g_pollable_stream_read (GInputStream *stream,
          void *buffer,
          gsize count,
          gboolean blocking,
          GCancellable *cancellable,
          GError **error);
 extern
gssize g_pollable_stream_write (GOutputStream *stream,
          const void *buffer,
          gsize count,
          gboolean blocking,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_pollable_stream_write_all (GOutputStream *stream,
          const void *buffer,
          gsize count,
          gboolean blocking,
          gsize *bytes_written,
          GCancellable *cancellable,
          GError **error);
# 27274 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_power_profile_monitor_get_type (void);
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 typedef struct _GPowerProfileMonitor GPowerProfileMonitor; typedef struct _GPowerProfileMonitorInterface GPowerProfileMonitorInterface; typedef GPowerProfileMonitor *GPowerProfileMonitor_autoptr; typedef GList *GPowerProfileMonitor_listautoptr; typedef GSList *GPowerProfileMonitor_slistautoptr; typedef GQueue *GPowerProfileMonitor_queueautoptr;
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPowerProfileMonitor (GPowerProfileMonitor *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPowerProfileMonitor (GPowerProfileMonitor **_ptr) { glib_autoptr_clear_GPowerProfileMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPowerProfileMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPowerProfileMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPowerProfileMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 __attribute__ ((__unused__)) static inline GPowerProfileMonitor * g_power_profile_monitor (gpointer ptr) { return (((GPowerProfileMonitor*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_power_profile_monitor_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean g_IS_power_profile_monitor (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_power_profile_monitor_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GPowerProfileMonitorInterface * g_power_profile_monitor_GET_IFACE (gpointer ptr) { return (((GPowerProfileMonitorInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_power_profile_monitor_get_type ())))); }
# 27275 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop



struct _GPowerProfileMonitorInterface
{

  GTypeInterface g_iface;
};
 extern
GPowerProfileMonitor *g_power_profile_monitor_dup_default (void);
 extern
gboolean g_power_profile_monitor_get_power_saver_enabled (GPowerProfileMonitor *monitor);
# 27301 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_property_action_get_type (void) __attribute__ ((__const__));
 extern
GPropertyAction * g_property_action_new (const gchar *name,
                                                                         gpointer object,
                                                                         const gchar *property_name);
# 27320 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GProxyInterface GProxyInterface;
struct _GProxyInterface
{
  GTypeInterface g_iface;

  GIOStream * (* connect) (GProxy *proxy,
         GIOStream *connection,
         GProxyAddress *proxy_address,
         GCancellable *cancellable,
         GError **error);
  void (* connect_async) (GProxy *proxy,
         GIOStream *connection,
         GProxyAddress *proxy_address,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
  GIOStream * (* connect_finish) (GProxy *proxy,
         GAsyncResult *result,
         GError **error);
  gboolean (* supports_hostname) (GProxy *proxy);
};
 extern
GType g_proxy_get_type (void) __attribute__ ((__const__));
 extern
GProxy *g_proxy_get_default_for_protocol (const gchar *protocol);
 extern
GIOStream *g_proxy_connect (GProxy *proxy,
          GIOStream *connection,
          GProxyAddress *proxy_address,
          GCancellable *cancellable,
          GError **error);
 extern
void g_proxy_connect_async (GProxy *proxy,
          GIOStream *connection,
          GProxyAddress *proxy_address,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GIOStream *g_proxy_connect_finish (GProxy *proxy,
          GAsyncResult *result,
          GError **error);
 extern
gboolean g_proxy_supports_hostname (GProxy *proxy);
# 27378 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GProxyAddressClass GProxyAddressClass;
typedef struct _GProxyAddressPrivate GProxyAddressPrivate;
struct _GProxyAddress
{
  GInetSocketAddress parent_instance;

  GProxyAddressPrivate *priv;
};
struct _GProxyAddressClass
{
  GInetSocketAddressClass parent_class;
};
 extern
GType g_proxy_address_get_type (void) __attribute__ ((__const__));
 extern
GSocketAddress *g_proxy_address_new (GInetAddress *inetaddr,
          guint16 port,
          const gchar *protocol,
          const gchar *dest_hostname,
                               guint16 dest_port,
          const gchar *username,
          const gchar *password);
 extern
const gchar *g_proxy_address_get_protocol (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_destination_protocol (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_destination_hostname (GProxyAddress *proxy);
 extern
guint16 g_proxy_address_get_destination_port (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_username (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_password (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_uri (GProxyAddress *proxy);
# 27433 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass;
struct _GSocketAddressEnumerator
{

  GObject parent_instance;
};
struct _GSocketAddressEnumeratorClass
{

  GObjectClass parent_class;


  GSocketAddress * (* next) (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GError **error);
  void (* next_async) (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
  GSocketAddress * (* next_finish) (GSocketAddressEnumerator *enumerator,
        GAsyncResult *result,
        GError **error);
};
 extern
GType g_socket_address_enumerator_get_type (void) __attribute__ ((__const__));
 extern
GSocketAddress *g_socket_address_enumerator_next (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GError **error);
 extern
void g_socket_address_enumerator_next_async (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
 extern
GSocketAddress *g_socket_address_enumerator_next_finish (GSocketAddressEnumerator *enumerator,
        GAsyncResult *result,
        GError **error);
# 27480 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass;
typedef struct _GProxyAddressEnumeratorPrivate GProxyAddressEnumeratorPrivate;
struct _GProxyAddressEnumerator
{

  GSocketAddressEnumerator parent_instance;
  GProxyAddressEnumeratorPrivate *priv;
};
struct _GProxyAddressEnumeratorClass
{

  GSocketAddressEnumeratorClass parent_class;
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};
 extern
GType g_proxy_address_enumerator_get_type (void) __attribute__ ((__const__));
# 27515 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GProxyResolverInterface GProxyResolverInterface;
struct _GProxyResolverInterface {
  GTypeInterface g_iface;

  gboolean (* is_supported) (GProxyResolver *resolver);
  gchar ** (* lookup) (GProxyResolver *resolver,
         const gchar *uri,
         GCancellable *cancellable,
         GError **error);
  void (* lookup_async) (GProxyResolver *resolver,
         const gchar *uri,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
  gchar ** (* lookup_finish) (GProxyResolver *resolver,
         GAsyncResult *result,
         GError **error);
};
 extern
GType g_proxy_resolver_get_type (void) __attribute__ ((__const__));
 extern
GProxyResolver *g_proxy_resolver_get_default (void);
 extern
gboolean g_proxy_resolver_is_supported (GProxyResolver *resolver);
 extern
gchar **g_proxy_resolver_lookup (GProxyResolver *resolver,
       const gchar *uri,
       GCancellable *cancellable,
       GError **error);
 extern
void g_proxy_resolver_lookup_async (GProxyResolver *resolver,
       const gchar *uri,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
 extern
gchar **g_proxy_resolver_lookup_finish (GProxyResolver *resolver,
       GAsyncResult *result,
       GError **error);
# 27570 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GRemoteActionGroupInterface GRemoteActionGroupInterface;
struct _GRemoteActionGroupInterface
{
  GTypeInterface g_iface;
  void (* activate_action_full) (GRemoteActionGroup *remote,
                                     const gchar *action_name,
                                     GVariant *parameter,
                                     GVariant *platform_data);
  void (* change_action_state_full) (GRemoteActionGroup *remote,
                                     const gchar *action_name,
                                     GVariant *value,
                                     GVariant *platform_data);
};
 extern
GType g_remote_action_group_get_type (void) __attribute__ ((__const__));
 extern
void g_remote_action_group_activate_action_full (GRemoteActionGroup *remote,
                                                                         const gchar *action_name,
                                                                         GVariant *parameter,
                                                                         GVariant *platform_data);
 extern
void g_remote_action_group_change_action_state_full (GRemoteActionGroup *remote,
                                                                         const gchar *action_name,
                                                                         GVariant *value,
                                                                         GVariant *platform_data);
# 27609 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GResolverPrivate GResolverPrivate;
typedef struct _GResolverClass GResolverClass;
struct _GResolver {
  GObject parent_instance;
  GResolverPrivate *priv;
};
typedef enum {
  G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT = 0,
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = 1 << 0,
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = 1 << 1,
} GResolverNameLookupFlags;
struct _GResolverClass {
  GObjectClass parent_class;

  void ( *reload) (GResolver *resolver);

  GList * ( *lookup_by_name) (GResolver *resolver,
                                                const gchar *hostname,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_by_name_async) (GResolver *resolver,
                                                const gchar *hostname,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  GList * ( *lookup_by_name_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);
  gchar * ( *lookup_by_address) (GResolver *resolver,
                                                GInetAddress *address,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_by_address_async) (GResolver *resolver,
                                                GInetAddress *address,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  gchar * ( *lookup_by_address_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);
  GList * ( *lookup_service) (GResolver *resolver,
                                                const gchar *rrname,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_service_async) (GResolver *resolver,
                                                const gchar *rrname,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  GList * ( *lookup_service_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);
  GList * ( *lookup_records) (GResolver *resolver,
                                                const gchar *rrname,
                                                GResolverRecordType record_type,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_records_async) (GResolver *resolver,
                                                const gchar *rrname,
                                                GResolverRecordType record_type,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  GList * ( *lookup_records_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);

  void ( *lookup_by_name_with_flags_async) (GResolver *resolver,
                                                const gchar *hostname,
                                                GResolverNameLookupFlags flags,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);

  GList * ( *lookup_by_name_with_flags_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);

  GList * ( *lookup_by_name_with_flags) (GResolver *resolver,
                                                const gchar *hostname,
                                                GResolverNameLookupFlags flags,
                                                GCancellable *cancellable,
                                                GError **error);
};
 extern
GType g_resolver_get_type (void) __attribute__ ((__const__));
 extern
GResolver *g_resolver_get_default (void);
 extern
void g_resolver_set_default (GResolver *resolver);
 extern
GList *g_resolver_lookup_by_name (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_lookup_by_name_async (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
GList *g_resolver_lookup_by_name_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
void g_resolver_lookup_by_name_with_flags_async (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GResolverNameLookupFlags flags,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
GList *g_resolver_lookup_by_name_with_flags_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
GList *g_resolver_lookup_by_name_with_flags (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GResolverNameLookupFlags flags,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_free_addresses (GList *addresses);
 extern
gchar *g_resolver_lookup_by_address (GResolver *resolver,
                                                        GInetAddress *address,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_lookup_by_address_async (GResolver *resolver,
                                                        GInetAddress *address,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
gchar *g_resolver_lookup_by_address_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
GList *g_resolver_lookup_service (GResolver *resolver,
                                                        const gchar *service,
                                                        const gchar *protocol,
                                                        const gchar *domain,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_lookup_service_async (GResolver *resolver,
                                                        const gchar *service,
                                                        const gchar *protocol,
                                                        const gchar *domain,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
GList *g_resolver_lookup_service_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
GList *g_resolver_lookup_records (GResolver *resolver,
                                                        const gchar *rrname,
                                                        GResolverRecordType record_type,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_lookup_records_async (GResolver *resolver,
                                                        const gchar *rrname,
                                                        GResolverRecordType record_type,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
GList *g_resolver_lookup_records_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
void g_resolver_free_targets (GList *targets);

 extern
GQuark g_resolver_error_quark (void);
# 27799 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GQuark g_resource_error_quark (void);
typedef struct _GStaticResource GStaticResource;
struct _GStaticResource {

  const guint8 *data;
  gsize data_len;
  GResource *resource;
  GStaticResource *next;
  gpointer padding;
};
 extern
GType g_resource_get_type (void) __attribute__ ((__const__));
 extern
GResource * g_resource_new_from_data (GBytes *data,
           GError **error);
 extern
GResource * g_resource_ref (GResource *resource);
 extern
void g_resource_unref (GResource *resource);
 extern
GResource * g_resource_load (const gchar *filename,
           GError **error);
 extern
GInputStream *g_resource_open_stream (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
GBytes * g_resource_lookup_data (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
char ** g_resource_enumerate_children (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
gboolean g_resource_get_info (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           gsize *size,
           guint32 *flags,
           GError **error);
 extern
void g_resources_register (GResource *resource);
 extern
void g_resources_unregister (GResource *resource);
 extern
GInputStream *g_resources_open_stream (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
GBytes * g_resources_lookup_data (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
char ** g_resources_enumerate_children (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
gboolean g_resources_get_info (const char *path,
           GResourceLookupFlags lookup_flags,
           gsize *size,
           guint32 *flags,
           GError **error);
 extern
void g_static_resource_init (GStaticResource *static_resource);
 extern
void g_static_resource_fini (GStaticResource *static_resource);
 extern
GResource *g_static_resource_get_resource (GStaticResource *static_resource);
# 27884 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSeekableIface GSeekableIface;
struct _GSeekableIface
{
  GTypeInterface g_iface;

  goffset (* tell) (GSeekable *seekable);
  gboolean (* can_seek) (GSeekable *seekable);
  gboolean (* seek) (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);
  gboolean (* can_truncate) (GSeekable *seekable);
  gboolean (* truncate_fn) (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);

};
 extern
GType g_seekable_get_type (void) __attribute__ ((__const__));
 extern
goffset g_seekable_tell (GSeekable *seekable);
 extern
gboolean g_seekable_can_seek (GSeekable *seekable);
 extern
gboolean g_seekable_seek (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);
 extern
gboolean g_seekable_can_truncate (GSeekable *seekable);
 extern
gboolean g_seekable_truncate (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);
# 27932 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSettingsSchemaSource GSettingsSchemaSource;
typedef struct _GSettingsSchema GSettingsSchema;
typedef struct _GSettingsSchemaKey GSettingsSchemaKey;

 extern
GType g_settings_schema_source_get_type (void) __attribute__ ((__const__));
 extern
GSettingsSchemaSource * g_settings_schema_source_get_default (void);
 extern
GSettingsSchemaSource * g_settings_schema_source_ref (GSettingsSchemaSource *source);
 extern
void g_settings_schema_source_unref (GSettingsSchemaSource *source);
 extern
GSettingsSchemaSource * g_settings_schema_source_new_from_directory (const gchar *directory,
                                                                         GSettingsSchemaSource *parent,
                                                                         gboolean trusted,
                                                                         GError **error);
 extern
GSettingsSchema * g_settings_schema_source_lookup (GSettingsSchemaSource *source,
                                                                         const gchar *schema_id,
                                                                         gboolean recursive);
 extern
void g_settings_schema_source_list_schemas (GSettingsSchemaSource *source,
                                                                         gboolean recursive,
                                                                         gchar ***non_relocatable,
                                                                         gchar ***relocatable);

 extern
GType g_settings_schema_get_type (void) __attribute__ ((__const__));
 extern
GSettingsSchema * g_settings_schema_ref (GSettingsSchema *schema);
 extern
void g_settings_schema_unref (GSettingsSchema *schema);
 extern
const gchar * g_settings_schema_get_id (GSettingsSchema *schema);
 extern
const gchar * g_settings_schema_get_path (GSettingsSchema *schema);
 extern
GSettingsSchemaKey * g_settings_schema_get_key (GSettingsSchema *schema,
                                                                         const gchar *name);
 extern
gboolean g_settings_schema_has_key (GSettingsSchema *schema,
                                                                         const gchar *name);
 extern
gchar** g_settings_schema_list_keys (GSettingsSchema *schema);
 extern
gchar ** g_settings_schema_list_children (GSettingsSchema *schema);

 extern
GType g_settings_schema_key_get_type (void) __attribute__ ((__const__));
 extern
GSettingsSchemaKey * g_settings_schema_key_ref (GSettingsSchemaKey *key);
 extern
void g_settings_schema_key_unref (GSettingsSchemaKey *key);
 extern
const GVariantType * g_settings_schema_key_get_value_type (GSettingsSchemaKey *key);
 extern
GVariant * g_settings_schema_key_get_default_value (GSettingsSchemaKey *key);
 extern
GVariant * g_settings_schema_key_get_range (GSettingsSchemaKey *key);
 extern
gboolean g_settings_schema_key_range_check (GSettingsSchemaKey *key,
                                                                         GVariant *value);
 extern
const gchar * g_settings_schema_key_get_name (GSettingsSchemaKey *key);
 extern
const gchar * g_settings_schema_key_get_summary (GSettingsSchemaKey *key);
 extern
const gchar * g_settings_schema_key_get_description (GSettingsSchemaKey *key);
# 28013 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSettingsPrivate GSettingsPrivate;
typedef struct _GSettingsClass GSettingsClass;
struct _GSettingsClass
{
  GObjectClass parent_class;

  void (*writable_changed) (GSettings *settings,
                                        const gchar *key);
  void (*changed) (GSettings *settings,
                                        const gchar *key);
  gboolean (*writable_change_event) (GSettings *settings,
                                        GQuark key);
  gboolean (*change_event) (GSettings *settings,
                                        const GQuark *keys,
                                        gint n_keys);
  gpointer padding[20];
};
struct _GSettings
{
  GObject parent_instance;
  GSettingsPrivate *priv;
};
 extern
GType g_settings_get_type (void);
__attribute__((__deprecated__("Use '" "g_settings_schema_source_list_schemas" "' instead"))) extern
const gchar * const * g_settings_list_schemas (void);
__attribute__((__deprecated__("Use '" "g_settings_schema_source_list_schemas" "' instead"))) extern
const gchar * const * g_settings_list_relocatable_schemas (void);
 extern
GSettings * g_settings_new (const gchar *schema_id);
 extern
GSettings * g_settings_new_with_path (const gchar *schema_id,
                                                                         const gchar *path);
 extern
GSettings * g_settings_new_with_backend (const gchar *schema_id,
                                                                         GSettingsBackend *backend);
 extern
GSettings * g_settings_new_with_backend_and_path (const gchar *schema_id,
                                                                         GSettingsBackend *backend,
                                                                         const gchar *path);
 extern
GSettings * g_settings_new_full (GSettingsSchema *schema,
                                                                         GSettingsBackend *backend,
                                                                         const gchar *path);
 extern
gchar ** g_settings_list_children (GSettings *settings);
__attribute__((__deprecated__("Use '" "g_settings_schema_list_keys" "' instead"))) extern
gchar ** g_settings_list_keys (GSettings *settings);
__attribute__((__deprecated__("Use '" "g_settings_schema_key_get_range" "' instead"))) extern
GVariant * g_settings_get_range (GSettings *settings,
                                                                         const gchar *key);
__attribute__((__deprecated__("Use '" "g_settings_schema_key_range_check" "' instead"))) extern
gboolean g_settings_range_check (GSettings *settings,
                                                                         const gchar *key,
                                                                         GVariant *value);
 extern
gboolean g_settings_set_value (GSettings *settings,
                                                                         const gchar *key,
                                                                         GVariant *value);
 extern
GVariant * g_settings_get_value (GSettings *settings,
                                                                         const gchar *key);
 extern
GVariant * g_settings_get_user_value (GSettings *settings,
                                                                         const gchar *key);
 extern
GVariant * g_settings_get_default_value (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *format,
                                                                         ...);
 extern
void g_settings_get (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *format,
                                                                         ...);
 extern
void g_settings_reset (GSettings *settings,
                                                                         const gchar *key);
 extern
gint g_settings_get_int (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_int (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint value);
 extern
gint64 g_settings_get_int64 (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_int64 (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint64 value);
 extern
guint g_settings_get_uint (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_uint (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint value);
 extern
guint64 g_settings_get_uint64 (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_uint64 (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint64 value);
 extern
gchar * g_settings_get_string (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_string (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *value);
 extern
gboolean g_settings_get_boolean (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_boolean (GSettings *settings,
                                                                         const gchar *key,
                                                                         gboolean value);
 extern
gdouble g_settings_get_double (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_double (GSettings *settings,
                                                                         const gchar *key,
                                                                         gdouble value);
 extern
gchar ** g_settings_get_strv (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_strv (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *const *value);
 extern
gint g_settings_get_enum (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_enum (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint value);
 extern
guint g_settings_get_flags (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_flags (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint value);
 extern
GSettings * g_settings_get_child (GSettings *settings,
                                                                         const gchar *name);
 extern
gboolean g_settings_is_writable (GSettings *settings,
                                                                         const gchar *name);
 extern
void g_settings_delay (GSettings *settings);
 extern
void g_settings_apply (GSettings *settings);
 extern
void g_settings_revert (GSettings *settings);
 extern
gboolean g_settings_get_has_unapplied (GSettings *settings);
 extern
void g_settings_sync (void);
typedef GVariant * (*GSettingsBindSetMapping) (const GValue *value,
                                                                         const GVariantType *expected_type,
                                                                         gpointer user_data);
typedef gboolean (*GSettingsBindGetMapping) (GValue *value,
                                                                         GVariant *variant,
                                                                         gpointer user_data);
typedef gboolean (*GSettingsGetMapping) (GVariant *value,
                                                                         gpointer *result,
                                                                         gpointer user_data);
typedef enum
{
  G_SETTINGS_BIND_DEFAULT,
  G_SETTINGS_BIND_GET = (1<<0),
  G_SETTINGS_BIND_SET = (1<<1),
  G_SETTINGS_BIND_NO_SENSITIVITY = (1<<2),
  G_SETTINGS_BIND_GET_NO_CHANGES = (1<<3),
  G_SETTINGS_BIND_INVERT_BOOLEAN = (1<<4)
} GSettingsBindFlags;
 extern
void g_settings_bind (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         GSettingsBindFlags flags);
 extern
void g_settings_bind_with_mapping (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         GSettingsBindFlags flags,
                                                                         GSettingsBindGetMapping get_mapping,
                                                                         GSettingsBindSetMapping set_mapping,
                                                                         gpointer user_data,
                                                                         GDestroyNotify destroy);
 extern
void g_settings_bind_writable (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         gboolean inverted);
 extern
void g_settings_unbind (gpointer object,
                                                                         const gchar *property);
 extern
GAction * g_settings_create_action (GSettings *settings,
                                                                         const gchar *key);
 extern
gpointer g_settings_get_mapped (GSettings *settings,
                                                                         const gchar *key,
                                                                         GSettingsGetMapping mapping,
                                                                         gpointer user_data);
# 28244 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_simple_action_get_type (void) __attribute__ ((__const__));
 extern
GSimpleAction * g_simple_action_new (const gchar *name,
                                                                         const GVariantType *parameter_type);
 extern
GSimpleAction * g_simple_action_new_stateful (const gchar *name,
                                                                         const GVariantType *parameter_type,
                                                                         GVariant *state);
 extern
void g_simple_action_set_enabled (GSimpleAction *simple,
                                                                         gboolean enabled);
 extern
void g_simple_action_set_state (GSimpleAction *simple,
                                                                         GVariant *value);
 extern
void g_simple_action_set_state_hint (GSimpleAction *simple,
                                                                         GVariant *state_hint);
# 28281 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSimpleActionGroupPrivate GSimpleActionGroupPrivate;
typedef struct _GSimpleActionGroupClass GSimpleActionGroupClass;
struct _GSimpleActionGroup
{

  GObject parent_instance;
  GSimpleActionGroupPrivate *priv;
};
struct _GSimpleActionGroupClass
{

  GObjectClass parent_class;

  gpointer padding[12];
};
 extern
GType g_simple_action_group_get_type (void) __attribute__ ((__const__));
 extern
GSimpleActionGroup * g_simple_action_group_new (void);
__attribute__((__deprecated__("Use '" "g_action_map_lookup_action" "' instead"))) extern
GAction * g_simple_action_group_lookup (GSimpleActionGroup *simple,
                                                                         const gchar *action_name);
__attribute__((__deprecated__("Use '" "g_action_map_add_action" "' instead"))) extern
void g_simple_action_group_insert (GSimpleActionGroup *simple,
                                                                         GAction *action);
__attribute__((__deprecated__("Use '" "g_action_map_remove_action" "' instead"))) extern
void g_simple_action_group_remove (GSimpleActionGroup *simple,
                                                                         const gchar *action_name);
__attribute__((__deprecated__("Use '" "g_action_map_add_action_entries" "' instead"))) extern
void g_simple_action_group_add_entries (GSimpleActionGroup *simple,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries,
                                                                         gpointer user_data);
# 28328 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSimpleAsyncResultClass GSimpleAsyncResultClass;
 extern
GType g_simple_async_result_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           gpointer source_tag);
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (__printf__, 6, 7)));
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_from_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           const GError *error);
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_take_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GError *error);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gpointer (GSimpleAsyncResult *simple,
                                                               gpointer op_res,
                                                               GDestroyNotify destroy_op_res);
__attribute__((__deprecated__)) extern
gpointer g_simple_async_result_get_op_res_gpointer (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gssize (GSimpleAsyncResult *simple,
                                                               gssize op_res);
__attribute__((__deprecated__)) extern
gssize g_simple_async_result_get_op_res_gssize (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gboolean (GSimpleAsyncResult *simple,
                                                               gboolean op_res);
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_get_op_res_gboolean (GSimpleAsyncResult *simple);
 extern
void g_simple_async_result_set_check_cancellable (GSimpleAsyncResult *simple,
                                                                 GCancellable *check_cancellable);
__attribute__((__deprecated__)) extern
gpointer g_simple_async_result_get_source_tag (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_handle_cancellation (GSimpleAsyncResult *simple,
           gboolean handle_cancellation);
__attribute__((__deprecated__)) extern
void g_simple_async_result_complete (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_complete_in_idle (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_run_in_thread (GSimpleAsyncResult *simple,
           GSimpleAsyncThreadFunc func,
           int io_priority,
           GCancellable *cancellable);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_from_error (GSimpleAsyncResult *simple,
           const GError *error);
__attribute__((__deprecated__)) extern
void g_simple_async_result_take_error (GSimpleAsyncResult *simple,
           GError *error);
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_propagate_error (GSimpleAsyncResult *simple,
           GError **dest);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_error (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (__printf__, 4, 5)));
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_error_va (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           va_list args)
           __attribute__((__format__ (__printf__, 4, 0)));
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_is_valid (GAsyncResult *result,
                                                            GObject *source,
                                                            gpointer source_tag);
__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_error_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        GQuark domain,
        gint code,
        const char *format,
        ...) __attribute__((__format__ (__printf__, 6, 7)));
__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_gerror_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        const GError *error);
__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_take_gerror_in_idle (GObject *object,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data,
                                                GError *error);
# 28442 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_simple_io_stream_get_type (void) __attribute__ ((__const__));
 extern
GIOStream *g_simple_io_stream_new (GInputStream *input_stream,
                                                          GOutputStream *output_stream);
# 28461 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_simple_permission_get_type (void);
 extern
GPermission * g_simple_permission_new (gboolean allowed);
# 28479 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSimpleProxyResolver GSimpleProxyResolver;
typedef struct _GSimpleProxyResolverPrivate GSimpleProxyResolverPrivate;
typedef struct _GSimpleProxyResolverClass GSimpleProxyResolverClass;
struct _GSimpleProxyResolver
{
  GObject parent_instance;

  GSimpleProxyResolverPrivate *priv;
};
struct _GSimpleProxyResolverClass
{
  GObjectClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
 extern
GType g_simple_proxy_resolver_get_type (void) __attribute__ ((__const__));
 extern
GProxyResolver *g_simple_proxy_resolver_new (const gchar *default_proxy,
                                                           gchar **ignore_hosts);
 extern
void g_simple_proxy_resolver_set_default_proxy (GSimpleProxyResolver *resolver,
                                                           const gchar *default_proxy);
 extern
void g_simple_proxy_resolver_set_ignore_hosts (GSimpleProxyResolver *resolver,
                                                           gchar **ignore_hosts);
 extern
void g_simple_proxy_resolver_set_uri_proxy (GSimpleProxyResolver *resolver,
                                                           const gchar *uri_scheme,
                                                           const gchar *proxy);
# 28533 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketPrivate GSocketPrivate;
typedef struct _GSocketClass GSocketClass;
struct _GSocketClass
{
  GObjectClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};
struct _GSocket
{
  GObject parent_instance;
  GSocketPrivate *priv;
};
 extern
GType g_socket_get_type (void) __attribute__ ((__const__));
 extern
GSocket * g_socket_new (GSocketFamily family,
        GSocketType type,
        GSocketProtocol protocol,
        GError **error);
 extern
GSocket * g_socket_new_from_fd (gint fd,
        GError **error);
 extern
int g_socket_get_fd (GSocket *socket);
 extern
GSocketFamily g_socket_get_family (GSocket *socket);
 extern
GSocketType g_socket_get_socket_type (GSocket *socket);
 extern
GSocketProtocol g_socket_get_protocol (GSocket *socket);
 extern
GSocketAddress * g_socket_get_local_address (GSocket *socket,
        GError **error);
 extern
GSocketAddress * g_socket_get_remote_address (GSocket *socket,
        GError **error);
 extern
void g_socket_set_blocking (GSocket *socket,
        gboolean blocking);
 extern
gboolean g_socket_get_blocking (GSocket *socket);
 extern
void g_socket_set_keepalive (GSocket *socket,
        gboolean keepalive);
 extern
gboolean g_socket_get_keepalive (GSocket *socket);
 extern
gint g_socket_get_listen_backlog (GSocket *socket);
 extern
void g_socket_set_listen_backlog (GSocket *socket,
        gint backlog);
 extern
guint g_socket_get_timeout (GSocket *socket);
 extern
void g_socket_set_timeout (GSocket *socket,
        guint timeout);
 extern
guint g_socket_get_ttl (GSocket *socket);
 extern
void g_socket_set_ttl (GSocket *socket,
                                                         guint ttl);
 extern
gboolean g_socket_get_broadcast (GSocket *socket);
 extern
void g_socket_set_broadcast (GSocket *socket,
                                                         gboolean broadcast);
 extern
gboolean g_socket_get_multicast_loopback (GSocket *socket);
 extern
void g_socket_set_multicast_loopback (GSocket *socket,
                                                         gboolean loopback);
 extern
guint g_socket_get_multicast_ttl (GSocket *socket);
 extern
void g_socket_set_multicast_ttl (GSocket *socket,
                                                         guint ttl);
 extern
gboolean g_socket_is_connected (GSocket *socket);
 extern
gboolean g_socket_bind (GSocket *socket,
        GSocketAddress *address,
        gboolean allow_reuse,
        GError **error);
 extern
gboolean g_socket_join_multicast_group (GSocket *socket,
                                                         GInetAddress *group,
                                                         gboolean source_specific,
                                                         const gchar *iface,
                                                         GError **error);
 extern
gboolean g_socket_leave_multicast_group (GSocket *socket,
                                                         GInetAddress *group,
                                                         gboolean source_specific,
                                                         const gchar *iface,
                                                         GError **error);
 extern
gboolean g_socket_join_multicast_group_ssm (GSocket *socket,
                                                             GInetAddress *group,
                                                             GInetAddress *source_specific,
                                                             const gchar *iface,
                                                             GError **error);
 extern
gboolean g_socket_leave_multicast_group_ssm (GSocket *socket,
                                                             GInetAddress *group,
                                                             GInetAddress *source_specific,
                                                             const gchar *iface,
                                                             GError **error);
 extern
gboolean g_socket_connect (GSocket *socket,
        GSocketAddress *address,
        GCancellable *cancellable,
        GError **error);
 extern
gboolean g_socket_check_connect_result (GSocket *socket,
        GError **error);
 extern
gssize g_socket_get_available_bytes (GSocket *socket);
 extern
GIOCondition g_socket_condition_check (GSocket *socket,
        GIOCondition condition);
 extern
gboolean g_socket_condition_wait (GSocket *socket,
        GIOCondition condition,
        GCancellable *cancellable,
        GError **error);
 extern
gboolean g_socket_condition_timed_wait (GSocket *socket,
        GIOCondition condition,
        gint64 timeout_us,
        GCancellable *cancellable,
        GError **error);
 extern
GSocket * g_socket_accept (GSocket *socket,
        GCancellable *cancellable,
        GError **error);
 extern
gboolean g_socket_listen (GSocket *socket,
        GError **error);
 extern
gssize g_socket_receive (GSocket *socket,
        gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_receive_from (GSocket *socket,
        GSocketAddress **address,
        gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_send (GSocket *socket,
        const gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_send_to (GSocket *socket,
        GSocketAddress *address,
        const gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_receive_message (GSocket *socket,
        GSocketAddress **address,
        GInputVector *vectors,
        gint num_vectors,
        GSocketControlMessage ***messages,
        gint *num_messages,
        gint *flags,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_send_message (GSocket *socket,
        GSocketAddress *address,
        GOutputVector *vectors,
        gint num_vectors,
        GSocketControlMessage **messages,
        gint num_messages,
        gint flags,
        GCancellable *cancellable,
        GError **error);
 extern
gint g_socket_receive_messages (GSocket *socket,
                                                         GInputMessage *messages,
                                                         guint num_messages,
                                                         gint flags,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
gint g_socket_send_messages (GSocket *socket,
        GOutputMessage *messages,
        guint num_messages,
        gint flags,
        GCancellable *cancellable,
        GError **error);
 extern
gboolean g_socket_close (GSocket *socket,
        GError **error);
 extern
gboolean g_socket_shutdown (GSocket *socket,
        gboolean shutdown_read,
        gboolean shutdown_write,
        GError **error);
 extern
gboolean g_socket_is_closed (GSocket *socket);
 extern
GSource * g_socket_create_source (GSocket *socket,
        GIOCondition condition,
        GCancellable *cancellable);
 extern
gboolean g_socket_speaks_ipv4 (GSocket *socket);
 extern
GCredentials *g_socket_get_credentials (GSocket *socket,
                                                         GError **error);
 extern
gssize g_socket_receive_with_blocking (GSocket *socket,
        gchar *buffer,
        gsize size,
        gboolean blocking,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_send_with_blocking (GSocket *socket,
        const gchar *buffer,
        gsize size,
        gboolean blocking,
        GCancellable *cancellable,
        GError **error);
 extern
GPollableReturn g_socket_send_message_with_timeout (GSocket *socket,
          GSocketAddress *address,
          const GOutputVector *vectors,
          gint num_vectors,
          GSocketControlMessage **messages,
          gint num_messages,
          gint flags,
          gint64 timeout_us,
          gsize *bytes_written,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_socket_get_option (GSocket *socket,
        gint level,
        gint optname,
        gint *value,
        GError **error);
 extern
gboolean g_socket_set_option (GSocket *socket,
        gint level,
        gint optname,
        gint value,
        GError **error);
# 28818 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketClientPrivate GSocketClientPrivate;
typedef struct _GSocketClientClass GSocketClientClass;
struct _GSocketClientClass
{
  GObjectClass parent_class;
  void (* event) (GSocketClient *client,
    GSocketClientEvent event,
    GSocketConnectable *connectable,
    GIOStream *connection);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
};
struct _GSocketClient
{
  GObject parent_instance;
  GSocketClientPrivate *priv;
};
 extern
GType g_socket_client_get_type (void) __attribute__ ((__const__));
 extern
GSocketClient *g_socket_client_new (void);
 extern
GSocketFamily g_socket_client_get_family (GSocketClient *client);
 extern
void g_socket_client_set_family (GSocketClient *client,
          GSocketFamily family);
 extern
GSocketType g_socket_client_get_socket_type (GSocketClient *client);
 extern
void g_socket_client_set_socket_type (GSocketClient *client,
          GSocketType type);
 extern
GSocketProtocol g_socket_client_get_protocol (GSocketClient *client);
 extern
void g_socket_client_set_protocol (GSocketClient *client,
          GSocketProtocol protocol);
 extern
GSocketAddress *g_socket_client_get_local_address (GSocketClient *client);
 extern
void g_socket_client_set_local_address (GSocketClient *client,
          GSocketAddress *address);
 extern
guint g_socket_client_get_timeout (GSocketClient *client);
 extern
void g_socket_client_set_timeout (GSocketClient *client,
          guint timeout);
 extern
gboolean g_socket_client_get_enable_proxy (GSocketClient *client);
 extern
void g_socket_client_set_enable_proxy (GSocketClient *client,
              gboolean enable);
 extern
gboolean g_socket_client_get_tls (GSocketClient *client);
 extern
void g_socket_client_set_tls (GSocketClient *client,
          gboolean tls);
__attribute__((__deprecated__)) extern
GTlsCertificateFlags g_socket_client_get_tls_validation_flags (GSocketClient *client);
__attribute__((__deprecated__)) extern
void g_socket_client_set_tls_validation_flags (GSocketClient *client,
          GTlsCertificateFlags flags);
 extern
GProxyResolver *g_socket_client_get_proxy_resolver (GSocketClient *client);
 extern
void g_socket_client_set_proxy_resolver (GSocketClient *client,
                                                                         GProxyResolver *proxy_resolver);
 extern
GSocketConnection * g_socket_client_connect (GSocketClient *client,
                                                                         GSocketConnectable *connectable,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
GSocketConnection * g_socket_client_connect_to_host (GSocketClient *client,
          const gchar *host_and_port,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
GSocketConnection * g_socket_client_connect_to_service (GSocketClient *client,
          const gchar *domain,
          const gchar *service,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
GSocketConnection * g_socket_client_connect_to_uri (GSocketClient *client,
          const gchar *uri,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_socket_client_connect_async (GSocketClient *client,
                                                                         GSocketConnectable *connectable,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_client_connect_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
 extern
void g_socket_client_connect_to_host_async (GSocketClient *client,
          const gchar *host_and_port,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_client_connect_to_host_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
 extern
void g_socket_client_connect_to_service_async (GSocketClient *client,
          const gchar *domain,
          const gchar *service,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_client_connect_to_service_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
 extern
void g_socket_client_connect_to_uri_async (GSocketClient *client,
          const gchar *uri,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_client_connect_to_uri_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
 extern
void g_socket_client_add_application_proxy (GSocketClient *client,
          const gchar *protocol);
# 28968 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketConnectableIface GSocketConnectableIface;
struct _GSocketConnectableIface
{
  GTypeInterface g_iface;

  GSocketAddressEnumerator * (* enumerate) (GSocketConnectable *connectable);
  GSocketAddressEnumerator * (* proxy_enumerate) (GSocketConnectable *connectable);
  gchar * (* to_string) (GSocketConnectable *connectable);
};
 extern
GType g_socket_connectable_get_type (void) __attribute__ ((__const__));
 extern
GSocketAddressEnumerator *g_socket_connectable_enumerate (GSocketConnectable *connectable);
 extern
GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate (GSocketConnectable *connectable);
 extern
gchar *g_socket_connectable_to_string (GSocketConnectable *connectable);
# 29004 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketConnectionPrivate GSocketConnectionPrivate;
typedef struct _GSocketConnectionClass GSocketConnectionClass;
struct _GSocketConnectionClass
{
  GIOStreamClass parent_class;

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
struct _GSocketConnection
{
  GIOStream parent_instance;
  GSocketConnectionPrivate *priv;
};
 extern
GType g_socket_connection_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_socket_connection_is_connected (GSocketConnection *connection);
 extern
gboolean g_socket_connection_connect (GSocketConnection *connection,
          GSocketAddress *address,
          GCancellable *cancellable,
          GError **error);
 extern
void g_socket_connection_connect_async (GSocketConnection *connection,
          GSocketAddress *address,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_socket_connection_connect_finish (GSocketConnection *connection,
          GAsyncResult *result,
          GError **error);
 extern
GSocket *g_socket_connection_get_socket (GSocketConnection *connection);
 extern
GSocketAddress *g_socket_connection_get_local_address (GSocketConnection *connection,
          GError **error);
 extern
GSocketAddress *g_socket_connection_get_remote_address (GSocketConnection *connection,
          GError **error);
 extern
void g_socket_connection_factory_register_type (GType g_type,
          GSocketFamily family,
          GSocketType type,
          gint protocol);
 extern
GType g_socket_connection_factory_lookup_type (GSocketFamily family,
          GSocketType type,
          gint protocol_id);
 extern
GSocketConnection *g_socket_connection_factory_create_connection (GSocket *socket);
# 29082 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketControlMessagePrivate GSocketControlMessagePrivate;
typedef struct _GSocketControlMessageClass GSocketControlMessageClass;
struct _GSocketControlMessageClass
{
  GObjectClass parent_class;
  gsize (* get_size) (GSocketControlMessage *message);
  int (* get_level) (GSocketControlMessage *message);
  int (* get_type) (GSocketControlMessage *message);
  void (* serialize) (GSocketControlMessage *message,
     gpointer data);
  GSocketControlMessage *(* deserialize) (int level,
       int type,
       gsize size,
       gpointer data);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
struct _GSocketControlMessage
{
  GObject parent_instance;
  GSocketControlMessagePrivate *priv;
};
 extern
GType g_socket_control_message_get_type (void) __attribute__ ((__const__));
 extern
gsize g_socket_control_message_get_size (GSocketControlMessage *message);
 extern
int g_socket_control_message_get_level (GSocketControlMessage *message);
 extern
int g_socket_control_message_get_msg_type (GSocketControlMessage *message);
 extern
void g_socket_control_message_serialize (GSocketControlMessage *message,
             gpointer data);
 extern
GSocketControlMessage *g_socket_control_message_deserialize (int level,
             int type,
             gsize size,
             gpointer data);
# 29144 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketListenerPrivate GSocketListenerPrivate;
typedef struct _GSocketListenerClass GSocketListenerClass;
struct _GSocketListenerClass
{
  GObjectClass parent_class;
  void (* changed) (GSocketListener *listener);
  void (* event) (GSocketListener *listener,
                  GSocketListenerEvent event,
                  GSocket *socket);

  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
struct _GSocketListener
{
  GObject parent_instance;
  GSocketListenerPrivate *priv;
};
 extern
GType g_socket_listener_get_type (void) __attribute__ ((__const__));
 extern
GSocketListener * g_socket_listener_new (void);
 extern
void g_socket_listener_set_backlog (GSocketListener *listener,
          int listen_backlog);
 extern
gboolean g_socket_listener_add_socket (GSocketListener *listener,
                                                                         GSocket *socket,
          GObject *source_object,
          GError **error);
 extern
gboolean g_socket_listener_add_address (GSocketListener *listener,
                                                                         GSocketAddress *address,
          GSocketType type,
          GSocketProtocol protocol,
          GObject *source_object,
                                                                         GSocketAddress **effective_address,
          GError **error);
 extern
gboolean g_socket_listener_add_inet_port (GSocketListener *listener,
                                                                         guint16 port,
          GObject *source_object,
          GError **error);
 extern
guint16 g_socket_listener_add_any_inet_port (GSocketListener *listener,
          GObject *source_object,
          GError **error);
 extern
GSocket * g_socket_listener_accept_socket (GSocketListener *listener,
          GObject **source_object,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_socket_listener_accept_socket_async (GSocketListener *listener,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocket * g_socket_listener_accept_socket_finish (GSocketListener *listener,
                                                                         GAsyncResult *result,
          GObject **source_object,
                                                                         GError **error);
 extern
GSocketConnection * g_socket_listener_accept (GSocketListener *listener,
          GObject **source_object,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_socket_listener_accept_async (GSocketListener *listener,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_listener_accept_finish (GSocketListener *listener,
                                                                         GAsyncResult *result,
          GObject **source_object,
                                                                         GError **error);
 extern
void g_socket_listener_close (GSocketListener *listener);
# 29245 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GSocketServicePrivate GSocketServicePrivate;
typedef struct _GSocketServiceClass GSocketServiceClass;
struct _GSocketServiceClass
{
  GSocketListenerClass parent_class;
  gboolean (* incoming) (GSocketService *service,
                         GSocketConnection *connection,
    GObject *source_object);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
struct _GSocketService
{
  GSocketListener parent_instance;
  GSocketServicePrivate *priv;
};
 extern
GType g_socket_service_get_type (void);
 extern
GSocketService *g_socket_service_new (void);
 extern
void g_socket_service_start (GSocketService *service);
 extern
void g_socket_service_stop (GSocketService *service);
 extern
gboolean g_socket_service_is_active (GSocketService *service);
# 29284 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_srv_target_get_type (void) __attribute__ ((__const__));

 extern
GSrvTarget *g_srv_target_new (const gchar *hostname,
            guint16 port,
            guint16 priority,
            guint16 weight);
 extern
GSrvTarget *g_srv_target_copy (GSrvTarget *target);
 extern
void g_srv_target_free (GSrvTarget *target);
 extern
const gchar *g_srv_target_get_hostname (GSrvTarget *target);
 extern
guint16 g_srv_target_get_port (GSrvTarget *target);
 extern
guint16 g_srv_target_get_priority (GSrvTarget *target);
 extern
guint16 g_srv_target_get_weight (GSrvTarget *target);
 extern
GList *g_srv_target_list_sort (GList *targets);
# 29317 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_subprocess_get_type (void) __attribute__ ((__const__));
 extern
GSubprocess * g_subprocess_new (GSubprocessFlags flags,
                                                         GError **error,
                                                         const gchar *argv0,
                                                         ...) __attribute__((__sentinel__));
 extern
GSubprocess * g_subprocess_newv (const gchar * const *argv,
                                                         GSubprocessFlags flags,
                                                         GError **error);
 extern
GOutputStream * g_subprocess_get_stdin_pipe (GSubprocess *subprocess);
 extern
GInputStream * g_subprocess_get_stdout_pipe (GSubprocess *subprocess);
 extern
GInputStream * g_subprocess_get_stderr_pipe (GSubprocess *subprocess);
 extern
const gchar * g_subprocess_get_identifier (GSubprocess *subprocess);

 extern
void g_subprocess_send_signal (GSubprocess *subprocess,
                                                         gint signal_num);

 extern
void g_subprocess_force_exit (GSubprocess *subprocess);
 extern
gboolean g_subprocess_wait (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
void g_subprocess_wait_async (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
gboolean g_subprocess_wait_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GError **error);
 extern
gboolean g_subprocess_wait_check (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
void g_subprocess_wait_check_async (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
gboolean g_subprocess_wait_check_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GError **error);
 extern
gint g_subprocess_get_status (GSubprocess *subprocess);
 extern
gboolean g_subprocess_get_successful (GSubprocess *subprocess);
 extern
gboolean g_subprocess_get_if_exited (GSubprocess *subprocess);
 extern
gint g_subprocess_get_exit_status (GSubprocess *subprocess);
 extern
gboolean g_subprocess_get_if_signaled (GSubprocess *subprocess);
 extern
gint g_subprocess_get_term_sig (GSubprocess *subprocess);
 extern
gboolean g_subprocess_communicate (GSubprocess *subprocess,
                                                         GBytes *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GBytes **stdout_buf,
                                                         GBytes **stderr_buf,
                                                         GError **error);
 extern
void g_subprocess_communicate_async (GSubprocess *subprocess,
                                                         GBytes *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
gboolean g_subprocess_communicate_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GBytes **stdout_buf,
                                                         GBytes **stderr_buf,
                                                         GError **error);
 extern
gboolean g_subprocess_communicate_utf8 (GSubprocess *subprocess,
                                                         const char *stdin_buf,
                                                         GCancellable *cancellable,
                                                         char **stdout_buf,
                                                         char **stderr_buf,
                                                         GError **error);
 extern
void g_subprocess_communicate_utf8_async (GSubprocess *subprocess,
                                                         const char *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
gboolean g_subprocess_communicate_utf8_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         char **stdout_buf,
                                                         char **stderr_buf,
                                                         GError **error);
# 29430 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_subprocess_launcher_get_type (void) __attribute__ ((__const__));
 extern
GSubprocessLauncher * g_subprocess_launcher_new (GSubprocessFlags flags);
 extern
GSubprocess * g_subprocess_launcher_spawn (GSubprocessLauncher *self,
                                                                         GError **error,
                                                                         const gchar *argv0,
                                                                         ...) __attribute__((__sentinel__));
 extern
GSubprocess * g_subprocess_launcher_spawnv (GSubprocessLauncher *self,
                                                                         const gchar * const *argv,
                                                                         GError **error);
 extern
void g_subprocess_launcher_set_environ (GSubprocessLauncher *self,
                                                                         gchar **env);
 extern
void g_subprocess_launcher_setenv (GSubprocessLauncher *self,
                                                                         const gchar *variable,
                                                                         const gchar *value,
                                                                         gboolean overwrite);
 extern
void g_subprocess_launcher_unsetenv (GSubprocessLauncher *self,
                                                                         const gchar *variable);
 extern
const gchar * g_subprocess_launcher_getenv (GSubprocessLauncher *self,
                                                                         const gchar *variable);
 extern
void g_subprocess_launcher_set_cwd (GSubprocessLauncher *self,
                                                                         const gchar *cwd);
 extern
void g_subprocess_launcher_set_flags (GSubprocessLauncher *self,
                                                                         GSubprocessFlags flags);

 extern
void g_subprocess_launcher_set_stdin_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
 extern
void g_subprocess_launcher_take_stdin_fd (GSubprocessLauncher *self,
                                                                         gint fd);
 extern
void g_subprocess_launcher_set_stdout_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
 extern
void g_subprocess_launcher_take_stdout_fd (GSubprocessLauncher *self,
                                                                         gint fd);
 extern
void g_subprocess_launcher_set_stderr_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
 extern
void g_subprocess_launcher_take_stderr_fd (GSubprocessLauncher *self,
                                                                         gint fd);
 extern
void g_subprocess_launcher_take_fd (GSubprocessLauncher *self,
                                                                         gint source_fd,
                                                                         gint target_fd);
 extern
void g_subprocess_launcher_close (GSubprocessLauncher *self);
 extern
void g_subprocess_launcher_set_child_setup (GSubprocessLauncher *self,
                                                                         GSpawnChildSetupFunc child_setup,
                                                                         gpointer user_data,
                                                                         GDestroyNotify destroy_notify);
# 29508 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTaskClass GTaskClass;
 extern
GType g_task_get_type (void) __attribute__ ((__const__));
 extern
GTask *g_task_new (gpointer source_object,
                                            GCancellable *cancellable,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data);
 extern
void g_task_report_error (gpointer source_object,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data,
                                            gpointer source_tag,
                                            GError *error);
 extern
void g_task_report_new_error (gpointer source_object,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data,
                                            gpointer source_tag,
                                            GQuark domain,
                                            gint code,
                                            const char *format,
                                            ...) __attribute__((__format__ (__printf__, 7, 8)));
 extern
void g_task_set_task_data (GTask *task,
                                            gpointer task_data,
                                            GDestroyNotify task_data_destroy);
 extern
void g_task_set_priority (GTask *task,
                                            gint priority);
 extern
void g_task_set_check_cancellable (GTask *task,
                                            gboolean check_cancellable);
 extern
void g_task_set_source_tag (GTask *task,
                                            gpointer source_tag);
 extern
void g_task_set_name (GTask *task,
                                            const gchar *name);
 extern
void g_task_set_static_name (GTask *task,
                                            const gchar *name);
# 29569 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
gpointer g_task_get_source_object (GTask *task);
 extern
gpointer g_task_get_task_data (GTask *task);
 extern
gint g_task_get_priority (GTask *task);
 extern
GMainContext *g_task_get_context (GTask *task);
 extern
GCancellable *g_task_get_cancellable (GTask *task);
 extern
gboolean g_task_get_check_cancellable (GTask *task);
 extern
gpointer g_task_get_source_tag (GTask *task);
 extern
const gchar *g_task_get_name (GTask *task);
 extern
gboolean g_task_is_valid (gpointer result,
                                            gpointer source_object);
typedef void (*GTaskThreadFunc) (GTask *task,
                                           gpointer source_object,
                                           gpointer task_data,
                                           GCancellable *cancellable);
 extern
void g_task_run_in_thread (GTask *task,
                                           GTaskThreadFunc task_func);
 extern
void g_task_run_in_thread_sync (GTask *task,
                                           GTaskThreadFunc task_func);
 extern
gboolean g_task_set_return_on_cancel (GTask *task,
                                           gboolean return_on_cancel);
 extern
gboolean g_task_get_return_on_cancel (GTask *task);
 extern
void g_task_attach_source (GTask *task,
                                           GSource *source,
                                           GSourceFunc callback);
 extern
void g_task_return_pointer (GTask *task,
                                                gpointer result,
                                                GDestroyNotify result_destroy);
 extern
void g_task_return_boolean (GTask *task,
                                                gboolean result);
 extern
void g_task_return_int (GTask *task,
                                                gssize result);
 extern
void g_task_return_error (GTask *task,
                                                GError *error);
 extern
void g_task_return_new_error (GTask *task,
                                                GQuark domain,
                                                gint code,
                                                const char *format,
                                                ...) __attribute__((__format__ (__printf__, 4, 5)));
 extern
void g_task_return_value (GTask *task,
                                                GValue *result);
 extern
gboolean g_task_return_error_if_cancelled (GTask *task);
 extern
gpointer g_task_propagate_pointer (GTask *task,
                                                GError **error);
 extern
gboolean g_task_propagate_boolean (GTask *task,
                                                GError **error);
 extern
gssize g_task_propagate_int (GTask *task,
                                                GError **error);
 extern
gboolean g_task_propagate_value (GTask *task,
                                                GValue *value,
                                                GError **error);
 extern
gboolean g_task_had_error (GTask *task);
 extern
gboolean g_task_get_completed (GTask *task);
# 29667 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTcpConnectionPrivate GTcpConnectionPrivate;
typedef struct _GTcpConnectionClass GTcpConnectionClass;
struct _GTcpConnectionClass
{
  GSocketConnectionClass parent_class;
};
struct _GTcpConnection
{
  GSocketConnection parent_instance;
  GTcpConnectionPrivate *priv;
};
 extern
GType g_tcp_connection_get_type (void) __attribute__ ((__const__));
 extern
void g_tcp_connection_set_graceful_disconnect (GTcpConnection *connection,
         gboolean graceful_disconnect);
 extern
gboolean g_tcp_connection_get_graceful_disconnect (GTcpConnection *connection);
# 29704 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate;
typedef struct _GTcpWrapperConnectionClass GTcpWrapperConnectionClass;
struct _GTcpWrapperConnectionClass
{
  GTcpConnectionClass parent_class;
};
struct _GTcpWrapperConnection
{
  GTcpConnection parent_instance;
  GTcpWrapperConnectionPrivate *priv;
};
 extern
GType g_tcp_wrapper_connection_get_type (void) __attribute__ ((__const__));
 extern
GSocketConnection *g_tcp_wrapper_connection_new (GIOStream *base_io_stream,
        GSocket *socket);
 extern
GIOStream *g_tcp_wrapper_connection_get_base_io_stream (GTcpWrapperConnection *conn);
# 29737 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 extern
GType g_test_dbus_get_type (void) __attribute__ ((__const__));
 extern
GTestDBus * g_test_dbus_new (GTestDBusFlags flags);
 extern
GTestDBusFlags g_test_dbus_get_flags (GTestDBus *self);
 extern
const gchar * g_test_dbus_get_bus_address (GTestDBus *self);
 extern
void g_test_dbus_add_service_dir (GTestDBus *self,
                                            const gchar *path);
 extern
void g_test_dbus_up (GTestDBus *self);
 extern
void g_test_dbus_stop (GTestDBus *self);
 extern
void g_test_dbus_down (GTestDBus *self);
 extern
void g_test_dbus_unset (void);
# 29770 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GThemedIconClass GThemedIconClass;
 extern
GType g_themed_icon_get_type (void) __attribute__ ((__const__));
 extern
GIcon *g_themed_icon_new (const char *iconname);
 extern
GIcon *g_themed_icon_new_with_default_fallbacks (const char *iconname);
 extern
GIcon *g_themed_icon_new_from_names (char **iconnames,
                                                 int len);
 extern
void g_themed_icon_prepend_name (GThemedIcon *icon,
                                                 const char *iconname);
 extern
void g_themed_icon_append_name (GThemedIcon *icon,
                                                 const char *iconname);
 extern
const gchar* const * g_themed_icon_get_names (GThemedIcon *icon);
# 29810 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GThreadedSocketServicePrivate GThreadedSocketServicePrivate;
typedef struct _GThreadedSocketServiceClass GThreadedSocketServiceClass;
struct _GThreadedSocketServiceClass
{
  GSocketServiceClass parent_class;
  gboolean (* run) (GThreadedSocketService *service,
                    GSocketConnection *connection,
                    GObject *source_object);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
struct _GThreadedSocketService
{
  GSocketService parent_instance;
  GThreadedSocketServicePrivate *priv;
};
 extern
GType g_threaded_socket_service_get_type (void);
 extern
GSocketService * g_threaded_socket_service_new (int max_threads);
# 29847 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTlsBackend GTlsBackend;
typedef struct _GTlsBackendInterface GTlsBackendInterface;
struct _GTlsBackendInterface
{
  GTypeInterface g_iface;

  gboolean ( *supports_tls) (GTlsBackend *backend);
  GType ( *get_certificate_type) (void);
  GType ( *get_client_connection_type) (void);
  GType ( *get_server_connection_type) (void);
  GType ( *get_file_database_type) (void);
  GTlsDatabase * ( *get_default_database) (GTlsBackend *backend);
  gboolean ( *supports_dtls) (GTlsBackend *backend);
  GType ( *get_dtls_client_connection_type) (void);
  GType ( *get_dtls_server_connection_type) (void);
};
 extern
GType g_tls_backend_get_type (void) __attribute__ ((__const__));
 extern
GTlsBackend * g_tls_backend_get_default (void);
 extern
GTlsDatabase * g_tls_backend_get_default_database (GTlsBackend *backend);
 extern
void g_tls_backend_set_default_database (GTlsBackend *backend,
                                                         GTlsDatabase *database);
 extern
gboolean g_tls_backend_supports_tls (GTlsBackend *backend);
 extern
gboolean g_tls_backend_supports_dtls (GTlsBackend *backend);
 extern
GType g_tls_backend_get_certificate_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_client_connection_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_server_connection_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_file_database_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_dtls_client_connection_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_dtls_server_connection_type (GTlsBackend *backend);
# 29902 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTlsCertificateClass GTlsCertificateClass;
typedef struct _GTlsCertificatePrivate GTlsCertificatePrivate;
struct _GTlsCertificate {
  GObject parent_instance;
  GTlsCertificatePrivate *priv;
};
struct _GTlsCertificateClass
{
  GObjectClass parent_class;
  GTlsCertificateFlags (* verify) (GTlsCertificate *cert,
        GSocketConnectable *identity,
        GTlsCertificate *trusted_ca);


  gpointer padding[8];
};
 extern
GType g_tls_certificate_get_type (void) __attribute__ ((__const__));
 extern
GTlsCertificate *g_tls_certificate_new_from_pem (const gchar *data,
           gssize length,
           GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_pkcs12 (const guint8 *data,
                                                              gsize length,
                                                              const gchar *password,
                                                              GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_file_with_password (const gchar *file,
                                                                     const gchar *password,
                                                                     GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_file (const gchar *file,
           GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_files (const gchar *cert_file,
           const gchar *key_file,
           GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_pkcs11_uris (const gchar *pkcs11_uri,
                                                              const gchar *private_key_pkcs11_uri,
                                                              GError **error);
 extern
GList *g_tls_certificate_list_new_from_file (const gchar *file,
           GError **error);
 extern
GTlsCertificate *g_tls_certificate_get_issuer (GTlsCertificate *cert);
 extern
GTlsCertificateFlags g_tls_certificate_verify (GTlsCertificate *cert,
           GSocketConnectable *identity,
           GTlsCertificate *trusted_ca);
 extern
gboolean g_tls_certificate_is_same (GTlsCertificate *cert_one,
                                                            GTlsCertificate *cert_two);
 extern
GDateTime *g_tls_certificate_get_not_valid_before (GTlsCertificate *cert);
 extern
GDateTime *g_tls_certificate_get_not_valid_after (GTlsCertificate *cert);
 extern
gchar *g_tls_certificate_get_subject_name (GTlsCertificate *cert);
 extern
gchar *g_tls_certificate_get_issuer_name (GTlsCertificate *cert);
 extern
GPtrArray *g_tls_certificate_get_dns_names (GTlsCertificate *cert);
 extern
GPtrArray *g_tls_certificate_get_ip_addresses (GTlsCertificate *cert);
# 29987 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTlsConnectionClass GTlsConnectionClass;
typedef struct _GTlsConnectionPrivate GTlsConnectionPrivate;
struct _GTlsConnection {
  GIOStream parent_instance;
  GTlsConnectionPrivate *priv;
};
struct _GTlsConnectionClass
{
  GIOStreamClass parent_class;

  gboolean ( *accept_certificate) (GTlsConnection *connection,
         GTlsCertificate *peer_cert,
         GTlsCertificateFlags errors);

  gboolean ( *handshake ) (GTlsConnection *conn,
      GCancellable *cancellable,
      GError **error);
  void ( *handshake_async ) (GTlsConnection *conn,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
  gboolean ( *handshake_finish ) (GTlsConnection *conn,
      GAsyncResult *result,
      GError **error);
#pragma clang diagnostic push
# 30012 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
  gboolean ( *get_binding_data) (GTlsConnection *conn,
                                  GTlsChannelBindingType type,
                                  GByteArray *data,
                                  GError **error);
#pragma clang diagnostic pop
  const gchar *(*get_negotiated_protocol) (GTlsConnection *conn);


  gpointer padding[6];
};
 extern
GType g_tls_connection_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
void g_tls_connection_set_use_system_certdb (GTlsConnection *conn,
                                                                    gboolean use_system_certdb);
__attribute__((__deprecated__)) extern
gboolean g_tls_connection_get_use_system_certdb (GTlsConnection *conn);
 extern
void g_tls_connection_set_database (GTlsConnection *conn,
            GTlsDatabase *database);
 extern
GTlsDatabase * g_tls_connection_get_database (GTlsConnection *conn);
 extern
void g_tls_connection_set_certificate (GTlsConnection *conn,
                                                                    GTlsCertificate *certificate);
 extern
GTlsCertificate *g_tls_connection_get_certificate (GTlsConnection *conn);
 extern
void g_tls_connection_set_interaction (GTlsConnection *conn,
                                                                    GTlsInteraction *interaction);
 extern
GTlsInteraction * g_tls_connection_get_interaction (GTlsConnection *conn);
 extern
GTlsCertificate *g_tls_connection_get_peer_certificate (GTlsConnection *conn);
 extern
GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors (GTlsConnection *conn);
 extern
void g_tls_connection_set_require_close_notify (GTlsConnection *conn,
            gboolean require_close_notify);
 extern
gboolean g_tls_connection_get_require_close_notify (GTlsConnection *conn);
#pragma clang diagnostic push
# 30054 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_tls_connection_set_rehandshake_mode (GTlsConnection *conn,
            GTlsRehandshakeMode mode);
__attribute__((__deprecated__)) extern
GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode (GTlsConnection *conn);
#pragma clang diagnostic pop
 extern
void g_tls_connection_set_advertised_protocols (GTlsConnection *conn,
                                                                    const gchar * const *protocols);
 extern
const gchar * g_tls_connection_get_negotiated_protocol (GTlsConnection *conn);
#pragma clang diagnostic push
# 30066 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
gboolean g_tls_connection_get_channel_binding_data (GTlsConnection *conn,
                                                                    GTlsChannelBindingType type,
                                                                    GByteArray *data,
                                                                    GError **error);
#pragma clang diagnostic pop
 extern
gboolean g_tls_connection_handshake (GTlsConnection *conn,
            GCancellable *cancellable,
            GError **error);
 extern
void g_tls_connection_handshake_async (GTlsConnection *conn,
            int io_priority,
            GCancellable *cancellable,
            GAsyncReadyCallback callback,
            gpointer user_data);
 extern
gboolean g_tls_connection_handshake_finish (GTlsConnection *conn,
            GAsyncResult *result,
            GError **error);
 extern
GTlsProtocolVersion g_tls_connection_get_protocol_version (GTlsConnection *conn);
 extern
gchar * g_tls_connection_get_ciphersuite_name (GTlsConnection *conn);

 extern
GQuark g_tls_error_quark (void);

 extern
GQuark g_tls_channel_binding_error_quark (void);
 extern
gboolean g_tls_connection_emit_accept_certificate (GTlsConnection *conn,
            GTlsCertificate *peer_cert,
            GTlsCertificateFlags errors);







typedef struct _GTlsClientConnectionInterface GTlsClientConnectionInterface;
struct _GTlsClientConnectionInterface
{
  GTypeInterface g_iface;
  void ( *copy_session_state ) (GTlsClientConnection *conn,
                                        GTlsClientConnection *source);
};
 extern
GType g_tls_client_connection_get_type (void) __attribute__ ((__const__));
 extern
GIOStream * g_tls_client_connection_new (GIOStream *base_io_stream,
            GSocketConnectable *server_identity,
            GError **error);
__attribute__((__deprecated__)) extern
GTlsCertificateFlags g_tls_client_connection_get_validation_flags (GTlsClientConnection *conn);
__attribute__((__deprecated__)) extern
void g_tls_client_connection_set_validation_flags (GTlsClientConnection *conn,
            GTlsCertificateFlags flags);
 extern
GSocketConnectable *g_tls_client_connection_get_server_identity (GTlsClientConnection *conn);
 extern
void g_tls_client_connection_set_server_identity (GTlsClientConnection *conn,
            GSocketConnectable *identity);
__attribute__((__deprecated__)) extern
gboolean g_tls_client_connection_get_use_ssl3 (GTlsClientConnection *conn);
__attribute__((__deprecated__)) extern
void g_tls_client_connection_set_use_ssl3 (GTlsClientConnection *conn,
            gboolean use_ssl3);
 extern
GList * g_tls_client_connection_get_accepted_cas (GTlsClientConnection *conn);
 extern
void g_tls_client_connection_copy_session_state (GTlsClientConnection *conn,
                                                                    GTlsClientConnection *source);
# 30157 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTlsDatabaseClass GTlsDatabaseClass;
typedef struct _GTlsDatabasePrivate GTlsDatabasePrivate;
struct _GTlsDatabase
{
  GObject parent_instance;
  GTlsDatabasePrivate *priv;
};
struct _GTlsDatabaseClass
{
  GObjectClass parent_class;

  GTlsCertificateFlags (*verify_chain) (GTlsDatabase *self,
                                                                 GTlsCertificate *chain,
                                                                 const gchar *purpose,
                                                                 GSocketConnectable *identity,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseVerifyFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
  void (*verify_chain_async) (GTlsDatabase *self,
                                                                 GTlsCertificate *chain,
                                                                 const gchar *purpose,
                                                                 GSocketConnectable *identity,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseVerifyFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
  GTlsCertificateFlags (*verify_chain_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);
  gchar* (*create_certificate_handle) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate);
  GTlsCertificate* (*lookup_certificate_for_handle) (GTlsDatabase *self,
                                                                 const gchar *handle,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
  void (*lookup_certificate_for_handle_async) (GTlsDatabase *self,
                                                                 const gchar *handle,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
  GTlsCertificate* (*lookup_certificate_for_handle_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);
  GTlsCertificate* (*lookup_certificate_issuer) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
  void (*lookup_certificate_issuer_async) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
  GTlsCertificate* (*lookup_certificate_issuer_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);
  GList* (*lookup_certificates_issued_by) (GTlsDatabase *self,
                                                                 GByteArray *issuer_raw_dn,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
  void (*lookup_certificates_issued_by_async) (GTlsDatabase *self,
                                                                 GByteArray *issuer_raw_dn,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
  GList* (*lookup_certificates_issued_by_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);


  gpointer padding[16];
};
 extern
GType g_tls_database_get_type (void) __attribute__ ((__const__));
 extern
GTlsCertificateFlags g_tls_database_verify_chain (GTlsDatabase *self,
                                                                           GTlsCertificate *chain,
                                                                           const gchar *purpose,
                                                                           GSocketConnectable *identity,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseVerifyFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);
 extern
void g_tls_database_verify_chain_async (GTlsDatabase *self,
                                                                           GTlsCertificate *chain,
                                                                           const gchar *purpose,
                                                                           GSocketConnectable *identity,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseVerifyFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);
 extern
GTlsCertificateFlags g_tls_database_verify_chain_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);
 extern
gchar* g_tls_database_create_certificate_handle (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate);
 extern
GTlsCertificate* g_tls_database_lookup_certificate_for_handle (GTlsDatabase *self,
                                                                           const gchar *handle,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);
 extern
void g_tls_database_lookup_certificate_for_handle_async (GTlsDatabase *self,
                                                                           const gchar *handle,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);
 extern
GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);
 extern
GTlsCertificate* g_tls_database_lookup_certificate_issuer (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);
 extern
void g_tls_database_lookup_certificate_issuer_async (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);
 extern
GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);
 extern
GList* g_tls_database_lookup_certificates_issued_by (GTlsDatabase *self,
                                                                           GByteArray *issuer_raw_dn,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);
 extern
void g_tls_database_lookup_certificates_issued_by_async (GTlsDatabase *self,
                                                                            GByteArray *issuer_raw_dn,
                                                                            GTlsInteraction *interaction,
                                                                            GTlsDatabaseLookupFlags flags,
                                                                            GCancellable *cancellable,
                                                                            GAsyncReadyCallback callback,
                                                                            gpointer user_data);
 extern
GList* g_tls_database_lookup_certificates_issued_by_finish (GTlsDatabase *self,
                                                                            GAsyncResult *result,
                                                                            GError **error);
# 30339 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTlsFileDatabaseInterface GTlsFileDatabaseInterface;
struct _GTlsFileDatabaseInterface
{
  GTypeInterface g_iface;


  gpointer padding[8];
};
 extern
GType g_tls_file_database_get_type (void) __attribute__ ((__const__));
 extern
GTlsDatabase* g_tls_file_database_new (const gchar *anchors,
                                                                        GError **error);
# 30366 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTlsInteractionClass GTlsInteractionClass;
typedef struct _GTlsInteractionPrivate GTlsInteractionPrivate;
struct _GTlsInteraction
{

  GObject parent_instance;
  GTlsInteractionPrivate *priv;
};
struct _GTlsInteractionClass
{

  GObjectClass parent_class;

  GTlsInteractionResult (* ask_password) (GTlsInteraction *interaction,
                                                  GTlsPassword *password,
                                                  GCancellable *cancellable,
                                                  GError **error);
  void (* ask_password_async) (GTlsInteraction *interaction,
                                                  GTlsPassword *password,
                                                  GCancellable *cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer user_data);
  GTlsInteractionResult (* ask_password_finish) (GTlsInteraction *interaction,
                                                  GAsyncResult *result,
                                                  GError **error);
  GTlsInteractionResult (* request_certificate) (GTlsInteraction *interaction,
                                                         GTlsConnection *connection,
                                                         GTlsCertificateRequestFlags flags,
                                                         GCancellable *cancellable,
                                                         GError **error);
  void (* request_certificate_async) (GTlsInteraction *interaction,
                                                         GTlsConnection *connection,
                                                         GTlsCertificateRequestFlags flags,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
  GTlsInteractionResult (* request_certificate_finish) (GTlsInteraction *interaction,
                                                         GAsyncResult *result,
                                                         GError **error);


  gpointer padding[21];
};
 extern
GType g_tls_interaction_get_type (void) __attribute__ ((__const__));
 extern
GTlsInteractionResult g_tls_interaction_invoke_ask_password (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GError **error);
 extern
GTlsInteractionResult g_tls_interaction_ask_password (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GError **error);
 extern
void g_tls_interaction_ask_password_async (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GAsyncReadyCallback callback,
                                                              gpointer user_data);
 extern
GTlsInteractionResult g_tls_interaction_ask_password_finish (GTlsInteraction *interaction,
                                                              GAsyncResult *result,
                                                              GError **error);
 extern
GTlsInteractionResult g_tls_interaction_invoke_request_certificate (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
 extern
GTlsInteractionResult g_tls_interaction_request_certificate (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GError **error);
 extern
void g_tls_interaction_request_certificate_async (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
 extern
GTlsInteractionResult g_tls_interaction_request_certificate_finish (GTlsInteraction *interaction,
                                                                     GAsyncResult *result,
                                                                     GError **error);
# 30468 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTlsPasswordClass GTlsPasswordClass;
typedef struct _GTlsPasswordPrivate GTlsPasswordPrivate;
struct _GTlsPassword
{
  GObject parent_instance;
  GTlsPasswordPrivate *priv;
};
struct _GTlsPasswordClass
{
  GObjectClass parent_class;

  const guchar * ( *get_value) (GTlsPassword *password,
                                              gsize *length);
  void ( *set_value) (GTlsPassword *password,
                                              guchar *value,
                                              gssize length,
                                              GDestroyNotify destroy);
  const gchar* ( *get_default_warning) (GTlsPassword *password);


  gpointer padding[4];
};
 extern
GType g_tls_password_get_type (void) __attribute__ ((__const__));
 extern
GTlsPassword * g_tls_password_new (GTlsPasswordFlags flags,
                                                      const gchar *description);
 extern
const guchar * g_tls_password_get_value (GTlsPassword *password,
                                                      gsize *length);
 extern
void g_tls_password_set_value (GTlsPassword *password,
                                                      const guchar *value,
                                                      gssize length);
 extern
void g_tls_password_set_value_full (GTlsPassword *password,
                                                      guchar *value,
                                                      gssize length,
                                                      GDestroyNotify destroy);
 extern
GTlsPasswordFlags g_tls_password_get_flags (GTlsPassword *password);
 extern
void g_tls_password_set_flags (GTlsPassword *password,
                                                      GTlsPasswordFlags flags);
 extern
const gchar* g_tls_password_get_description (GTlsPassword *password);
 extern
void g_tls_password_set_description (GTlsPassword *password,
                                                      const gchar *description);
 extern
const gchar * g_tls_password_get_warning (GTlsPassword *password);
 extern
void g_tls_password_set_warning (GTlsPassword *password,
                                                      const gchar *warning);
# 30534 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GTlsServerConnectionInterface GTlsServerConnectionInterface;
struct _GTlsServerConnectionInterface
{
  GTypeInterface g_iface;
};
 extern
GType g_tls_server_connection_get_type (void) __attribute__ ((__const__));
 extern
GIOStream * g_tls_server_connection_new (GIOStream *base_io_stream,
         GTlsCertificate *certificate,
         GError **error);
# 30561 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GUnixConnection GUnixConnection;
typedef struct _GUnixConnectionPrivate GUnixConnectionPrivate;
typedef struct _GUnixConnectionClass GUnixConnectionClass;
typedef GUnixConnection *GUnixConnection_autoptr; typedef GList *GUnixConnection_listautoptr; typedef GSList *GUnixConnection_slistautoptr; typedef GQueue *GUnixConnection_queueautoptr;
# 30564 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 30564 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30564 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUnixConnection (GUnixConnection *_ptr) { if (_ptr) (g_object_unref) ((GUnixConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUnixConnection (GUnixConnection **_ptr) { glib_autoptr_clear_GUnixConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUnixConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUnixConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUnixConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 30564 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
struct _GUnixConnectionClass
{
  GSocketConnectionClass parent_class;
};
struct _GUnixConnection
{
  GSocketConnection parent_instance;
  GUnixConnectionPrivate *priv;
};
 extern
GType g_unix_connection_get_type (void);
 extern
gboolean g_unix_connection_send_fd (GUnixConnection *connection,
                                                                         gint fd,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
gint g_unix_connection_receive_fd (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
gboolean g_unix_connection_send_credentials (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_unix_connection_send_credentials_async (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
gboolean g_unix_connection_send_credentials_finish (GUnixConnection *connection,
                                                                         GAsyncResult *result,
                                                                         GError **error);
 extern
GCredentials *g_unix_connection_receive_credentials (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_unix_connection_receive_credentials_async (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GCredentials *g_unix_connection_receive_credentials_finish (GUnixConnection *connection,
                                                                         GAsyncResult *result,
                                                                         GError **error);
# 30622 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GUnixCredentialsMessagePrivate GUnixCredentialsMessagePrivate;
typedef struct _GUnixCredentialsMessageClass GUnixCredentialsMessageClass;
typedef GUnixCredentialsMessage *GUnixCredentialsMessage_autoptr; typedef GList *GUnixCredentialsMessage_listautoptr; typedef GSList *GUnixCredentialsMessage_slistautoptr; typedef GQueue *GUnixCredentialsMessage_queueautoptr;
# 30624 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 30624 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30624 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUnixCredentialsMessage (GUnixCredentialsMessage *_ptr) { if (_ptr) (g_object_unref) ((GUnixCredentialsMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUnixCredentialsMessage (GUnixCredentialsMessage **_ptr) { glib_autoptr_clear_GUnixCredentialsMessage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUnixCredentialsMessage (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUnixCredentialsMessage (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUnixCredentialsMessage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 30624 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
struct _GUnixCredentialsMessageClass
{
  GSocketControlMessageClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
};
struct _GUnixCredentialsMessage
{
  GSocketControlMessage parent_instance;
  GUnixCredentialsMessagePrivate *priv;
};
 extern
GType g_unix_credentials_message_get_type (void) __attribute__ ((__const__));
 extern
GSocketControlMessage *g_unix_credentials_message_new (void);
 extern
GSocketControlMessage *g_unix_credentials_message_new_with_credentials (GCredentials *credentials);
 extern
GCredentials *g_unix_credentials_message_get_credentials (GUnixCredentialsMessage *message);
 extern
gboolean g_unix_credentials_message_is_supported (void);
# 30664 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef GUnixFDList *GUnixFDList_autoptr; typedef GList *GUnixFDList_listautoptr; typedef GSList *GUnixFDList_slistautoptr; typedef GQueue *GUnixFDList_queueautoptr;
# 30664 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 30664 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30664 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUnixFDList (GUnixFDList *_ptr) { if (_ptr) (g_object_unref) ((GUnixFDList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUnixFDList (GUnixFDList **_ptr) { glib_autoptr_clear_GUnixFDList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUnixFDList (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUnixFDList (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUnixFDList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 30664 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef struct _GUnixFDListPrivate GUnixFDListPrivate;
typedef struct _GUnixFDListClass GUnixFDListClass;
struct _GUnixFDListClass
{
  GObjectClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
struct _GUnixFDList
{
  GObject parent_instance;
  GUnixFDListPrivate *priv;
};
 extern
GType g_unix_fd_list_get_type (void) __attribute__ ((__const__));
 extern
GUnixFDList * g_unix_fd_list_new (void);
 extern
GUnixFDList * g_unix_fd_list_new_from_array (const gint *fds,
                                                                         gint n_fds);
 extern
gint g_unix_fd_list_append (GUnixFDList *list,
                                                                         gint fd,
                                                                         GError **error);
 extern
gint g_unix_fd_list_get_length (GUnixFDList *list);
 extern
gint g_unix_fd_list_get (GUnixFDList *list,
                                                                         gint index_,
                                                                         GError **error);
 extern
const gint * g_unix_fd_list_peek_fds (GUnixFDList *list,
                                                                         gint *length);
 extern
gint * g_unix_fd_list_steal_fds (GUnixFDList *list,
                                                                         gint *length);
# 30717 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GUnixSocketAddress GUnixSocketAddress;
typedef struct _GUnixSocketAddressClass GUnixSocketAddressClass;
typedef struct _GUnixSocketAddressPrivate GUnixSocketAddressPrivate;
typedef GUnixSocketAddress *GUnixSocketAddress_autoptr; typedef GList *GUnixSocketAddress_listautoptr; typedef GSList *GUnixSocketAddress_slistautoptr; typedef GQueue *GUnixSocketAddress_queueautoptr;
# 30720 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 30720 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30720 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUnixSocketAddress (GUnixSocketAddress *_ptr) { if (_ptr) (g_object_unref) ((GUnixSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUnixSocketAddress (GUnixSocketAddress **_ptr) { glib_autoptr_clear_GUnixSocketAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUnixSocketAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUnixSocketAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUnixSocketAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 30720 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
struct _GUnixSocketAddress
{
  GSocketAddress parent_instance;

  GUnixSocketAddressPrivate *priv;
};
struct _GUnixSocketAddressClass
{
  GSocketAddressClass parent_class;
};
 extern
GType g_unix_socket_address_get_type (void) __attribute__ ((__const__));
 extern
GSocketAddress *g_unix_socket_address_new (const gchar *path);
__attribute__((__deprecated__("Use '" "g_unix_socket_address_new_with_type" "' instead"))) extern
GSocketAddress *g_unix_socket_address_new_abstract (const gchar *path,
                                                       gint path_len);
 extern
GSocketAddress *g_unix_socket_address_new_with_type (const gchar *path,
                                                       gint path_len,
                                                       GUnixSocketAddressType type);
 extern
const char * g_unix_socket_address_get_path (GUnixSocketAddress *address);
 extern
gsize g_unix_socket_address_get_path_len (GUnixSocketAddress *address);
 extern
GUnixSocketAddressType g_unix_socket_address_get_address_type (GUnixSocketAddress *address);
__attribute__((__deprecated__)) extern
gboolean g_unix_socket_address_get_is_abstract (GUnixSocketAddress *address);
 extern
gboolean g_unix_socket_address_abstract_names_supported (void);
# 30766 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef GFile * (* GVfsFileLookupFunc) (GVfs *vfs,
                                        const char *identifier,
                                        gpointer user_data);

typedef struct _GVfsClass GVfsClass;
struct _GVfs
{
  GObject parent_instance;
};
struct _GVfsClass
{
  GObjectClass parent_class;

  gboolean (* is_active) (GVfs *vfs);
  GFile * (* get_file_for_path) (GVfs *vfs,
                                                       const char *path);
  GFile * (* get_file_for_uri) (GVfs *vfs,
                                                       const char *uri);
  const gchar * const * (* get_supported_uri_schemes) (GVfs *vfs);
  GFile * (* parse_name) (GVfs *vfs,
                                                       const char *parse_name);

  void (* local_file_add_info) (GVfs *vfs,
             const char *filename,
             guint64 device,
             GFileAttributeMatcher *attribute_matcher,
             GFileInfo *info,
             GCancellable *cancellable,
             gpointer *extra_data,
             GDestroyNotify *free_extra_data);
  void (* add_writable_namespaces) (GVfs *vfs,
             GFileAttributeInfoList *list);
  gboolean (* local_file_set_attributes) (GVfs *vfs,
             const char *filename,
             GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
             GError **error);
  void (* local_file_removed) (GVfs *vfs,
             const char *filename);
  void (* local_file_moved) (GVfs *vfs,
             const char *source,
             const char *dest);
  GIcon * (* deserialize_icon) (GVfs *vfs,
                                                       GVariant *value);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};
 extern
GType g_vfs_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_vfs_is_active (GVfs *vfs);
 extern
GFile * g_vfs_get_file_for_path (GVfs *vfs,
                                                       const char *path);
 extern
GFile * g_vfs_get_file_for_uri (GVfs *vfs,
                                                       const char *uri);
 extern
const gchar* const * g_vfs_get_supported_uri_schemes (GVfs *vfs);
 extern
GFile * g_vfs_parse_name (GVfs *vfs,
                                                       const char *parse_name);
 extern
GVfs * g_vfs_get_default (void);
 extern
GVfs * g_vfs_get_local (void);
 extern
gboolean g_vfs_register_uri_scheme (GVfs *vfs,
                                                       const char *scheme,
                                                       GVfsFileLookupFunc uri_func,
                                                       gpointer uri_data,
                                                       GDestroyNotify uri_destroy,
                                                       GVfsFileLookupFunc parse_name_func,
                                                       gpointer parse_name_data,
                                                       GDestroyNotify parse_name_destroy);
 extern
gboolean g_vfs_unregister_uri_scheme (GVfs *vfs,
                                                       const char *scheme);
# 30868 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GVolumeIface GVolumeIface;
struct _GVolumeIface
{
  GTypeInterface g_iface;

  void (* changed) (GVolume *volume);
  void (* removed) (GVolume *volume);

  char * (* get_name) (GVolume *volume);
  GIcon * (* get_icon) (GVolume *volume);
  char * (* get_uuid) (GVolume *volume);
  GDrive * (* get_drive) (GVolume *volume);
  GMount * (* get_mount) (GVolume *volume);
  gboolean (* can_mount) (GVolume *volume);
  gboolean (* can_eject) (GVolume *volume);
  void (* mount_fn) (GVolume *volume,
                                         GMountMountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* mount_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
  void (* eject) (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
  char * (* get_identifier) (GVolume *volume,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GVolume *volume);
  gboolean (* should_automount) (GVolume *volume);
  GFile * (* get_activation_root) (GVolume *volume);
  void (* eject_with_operation) (GVolume *volume,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GVolume *volume,
                                             GAsyncResult *result,
                                             GError **error);
  const gchar * (* get_sort_key) (GVolume *volume);
  GIcon * (* get_symbolic_icon) (GVolume *volume);
};
 extern
GType g_volume_get_type (void) __attribute__ ((__const__));
 extern
char * g_volume_get_name (GVolume *volume);
 extern
GIcon * g_volume_get_icon (GVolume *volume);
 extern
GIcon * g_volume_get_symbolic_icon (GVolume *volume);
 extern
char * g_volume_get_uuid (GVolume *volume);
 extern
GDrive * g_volume_get_drive (GVolume *volume);
 extern
GMount * g_volume_get_mount (GVolume *volume);
 extern
gboolean g_volume_can_mount (GVolume *volume);
 extern
gboolean g_volume_can_eject (GVolume *volume);
 extern
gboolean g_volume_should_automount (GVolume *volume);
 extern
void g_volume_mount (GVolume *volume,
      GMountMountFlags flags,
      GMountOperation *mount_operation,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
 extern
gboolean g_volume_mount_finish (GVolume *volume,
      GAsyncResult *result,
      GError **error);
__attribute__((__deprecated__("Use '" "g_volume_eject_with_operation" "' instead"))) extern
void g_volume_eject (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
__attribute__((__deprecated__("Use '" "g_volume_eject_with_operation_finish" "' instead"))) extern
gboolean g_volume_eject_finish (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
 extern
char * g_volume_get_identifier (GVolume *volume,
      const char *kind);
 extern
char ** g_volume_enumerate_identifiers (GVolume *volume);
 extern
GFile * g_volume_get_activation_root (GVolume *volume);
 extern
void g_volume_eject_with_operation (GVolume *volume,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_volume_eject_with_operation_finish (GVolume *volume,
                                               GAsyncResult *result,
                                               GError **error);
 extern
const gchar *g_volume_get_sort_key (GVolume *volume);
# 30992 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GZlibCompressorClass GZlibCompressorClass;
struct _GZlibCompressorClass
{
  GObjectClass parent_class;
};
 extern
GType g_zlib_compressor_get_type (void) __attribute__ ((__const__));
 extern
GZlibCompressor *g_zlib_compressor_new (GZlibCompressorFormat format,
     int level);
 extern
GFileInfo *g_zlib_compressor_get_file_info (GZlibCompressor *compressor);
 extern
void g_zlib_compressor_set_file_info (GZlibCompressor *compressor,
                                                  GFileInfo *file_info);
# 31021 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _GZlibDecompressorClass GZlibDecompressorClass;
struct _GZlibDecompressorClass
{
  GObjectClass parent_class;
};
 extern
GType g_zlib_decompressor_get_type (void) __attribute__ ((__const__));
 extern
GZlibDecompressor *g_zlib_decompressor_new (GZlibCompressorFormat format);
 extern
GFileInfo *g_zlib_decompressor_get_file_info (GZlibDecompressor *decompressor);





typedef GAction *GAction_autoptr; typedef GList *GAction_listautoptr; typedef GSList *GAction_slistautoptr; typedef GQueue *GAction_queueautoptr;
# 31037 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31037 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31037 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAction (GAction *_ptr) { if (_ptr) (g_object_unref) ((GAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAction (GAction **_ptr) { glib_autoptr_clear_GAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAction (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAction (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31037 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GActionMap *GActionMap_autoptr; typedef GList *GActionMap_listautoptr; typedef GSList *GActionMap_slistautoptr; typedef GQueue *GActionMap_queueautoptr;
# 31038 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31038 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31038 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GActionMap (GActionMap *_ptr) { if (_ptr) (g_object_unref) ((GActionMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GActionMap (GActionMap **_ptr) { glib_autoptr_clear_GActionMap (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GActionMap (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GActionMap (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GActionMap (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31038 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GAppInfo *GAppInfo_autoptr; typedef GList *GAppInfo_listautoptr; typedef GSList *GAppInfo_slistautoptr; typedef GQueue *GAppInfo_queueautoptr;
# 31039 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31039 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31039 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppInfo (GAppInfo *_ptr) { if (_ptr) (g_object_unref) ((GAppInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppInfo (GAppInfo **_ptr) { glib_autoptr_clear_GAppInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppInfo (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppInfo (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31039 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GAppLaunchContext *GAppLaunchContext_autoptr; typedef GList *GAppLaunchContext_listautoptr; typedef GSList *GAppLaunchContext_slistautoptr; typedef GQueue *GAppLaunchContext_queueautoptr;
# 31040 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31040 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31040 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppLaunchContext (GAppLaunchContext *_ptr) { if (_ptr) (g_object_unref) ((GAppLaunchContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppLaunchContext (GAppLaunchContext **_ptr) { glib_autoptr_clear_GAppLaunchContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppLaunchContext (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppLaunchContext (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppLaunchContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31040 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GAppInfoMonitor *GAppInfoMonitor_autoptr; typedef GList *GAppInfoMonitor_listautoptr; typedef GSList *GAppInfoMonitor_slistautoptr; typedef GQueue *GAppInfoMonitor_queueautoptr;
# 31041 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31041 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31041 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppInfoMonitor (GAppInfoMonitor *_ptr) { if (_ptr) (g_object_unref) ((GAppInfoMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppInfoMonitor (GAppInfoMonitor **_ptr) { glib_autoptr_clear_GAppInfoMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppInfoMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppInfoMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppInfoMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31041 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GApplicationCommandLine *GApplicationCommandLine_autoptr; typedef GList *GApplicationCommandLine_listautoptr; typedef GSList *GApplicationCommandLine_slistautoptr; typedef GQueue *GApplicationCommandLine_queueautoptr;
# 31042 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31042 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31042 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GApplicationCommandLine (GApplicationCommandLine *_ptr) { if (_ptr) (g_object_unref) ((GApplicationCommandLine *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GApplicationCommandLine (GApplicationCommandLine **_ptr) { glib_autoptr_clear_GApplicationCommandLine (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GApplicationCommandLine (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GApplicationCommandLine (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GApplicationCommandLine (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31042 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GApplication *GApplication_autoptr; typedef GList *GApplication_listautoptr; typedef GSList *GApplication_slistautoptr; typedef GQueue *GApplication_queueautoptr;
# 31043 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31043 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31043 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GApplication (GApplication *_ptr) { if (_ptr) (g_object_unref) ((GApplication *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GApplication (GApplication **_ptr) { glib_autoptr_clear_GApplication (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GApplication (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GApplication (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GApplication (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31043 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GAsyncInitable *GAsyncInitable_autoptr; typedef GList *GAsyncInitable_listautoptr; typedef GSList *GAsyncInitable_slistautoptr; typedef GQueue *GAsyncInitable_queueautoptr;
# 31044 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31044 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31044 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncInitable (GAsyncInitable *_ptr) { if (_ptr) (g_object_unref) ((GAsyncInitable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncInitable (GAsyncInitable **_ptr) { glib_autoptr_clear_GAsyncInitable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncInitable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncInitable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncInitable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31044 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GAsyncResult *GAsyncResult_autoptr; typedef GList *GAsyncResult_listautoptr; typedef GSList *GAsyncResult_slistautoptr; typedef GQueue *GAsyncResult_queueautoptr;
# 31045 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31045 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31045 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncResult (GAsyncResult *_ptr) { if (_ptr) (g_object_unref) ((GAsyncResult *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncResult (GAsyncResult **_ptr) { glib_autoptr_clear_GAsyncResult (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncResult (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncResult (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncResult (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31045 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GBufferedInputStream *GBufferedInputStream_autoptr; typedef GList *GBufferedInputStream_listautoptr; typedef GSList *GBufferedInputStream_slistautoptr; typedef GQueue *GBufferedInputStream_queueautoptr;
# 31046 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31046 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31046 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBufferedInputStream (GBufferedInputStream *_ptr) { if (_ptr) (g_object_unref) ((GBufferedInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBufferedInputStream (GBufferedInputStream **_ptr) { glib_autoptr_clear_GBufferedInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBufferedInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBufferedInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBufferedInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31046 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GBufferedOutputStream *GBufferedOutputStream_autoptr; typedef GList *GBufferedOutputStream_listautoptr; typedef GSList *GBufferedOutputStream_slistautoptr; typedef GQueue *GBufferedOutputStream_queueautoptr;
# 31047 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31047 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31047 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBufferedOutputStream (GBufferedOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GBufferedOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBufferedOutputStream (GBufferedOutputStream **_ptr) { glib_autoptr_clear_GBufferedOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBufferedOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBufferedOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBufferedOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31047 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GBytesIcon *GBytesIcon_autoptr; typedef GList *GBytesIcon_listautoptr; typedef GSList *GBytesIcon_slistautoptr; typedef GQueue *GBytesIcon_queueautoptr;
# 31048 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31048 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31048 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBytesIcon (GBytesIcon *_ptr) { if (_ptr) (g_object_unref) ((GBytesIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBytesIcon (GBytesIcon **_ptr) { glib_autoptr_clear_GBytesIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBytesIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBytesIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBytesIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31048 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GCancellable *GCancellable_autoptr; typedef GList *GCancellable_listautoptr; typedef GSList *GCancellable_slistautoptr; typedef GQueue *GCancellable_queueautoptr;
# 31049 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31049 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31049 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCancellable (GCancellable *_ptr) { if (_ptr) (g_object_unref) ((GCancellable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCancellable (GCancellable **_ptr) { glib_autoptr_clear_GCancellable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCancellable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCancellable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCancellable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31049 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GCharsetConverter *GCharsetConverter_autoptr; typedef GList *GCharsetConverter_listautoptr; typedef GSList *GCharsetConverter_slistautoptr; typedef GQueue *GCharsetConverter_queueautoptr;
# 31050 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31050 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31050 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCharsetConverter (GCharsetConverter *_ptr) { if (_ptr) (g_object_unref) ((GCharsetConverter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCharsetConverter (GCharsetConverter **_ptr) { glib_autoptr_clear_GCharsetConverter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCharsetConverter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCharsetConverter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCharsetConverter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31050 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GConverter *GConverter_autoptr; typedef GList *GConverter_listautoptr; typedef GSList *GConverter_slistautoptr; typedef GQueue *GConverter_queueautoptr;
# 31051 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31051 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31051 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverter (GConverter *_ptr) { if (_ptr) (g_object_unref) ((GConverter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverter (GConverter **_ptr) { glib_autoptr_clear_GConverter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31051 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GConverterInputStream *GConverterInputStream_autoptr; typedef GList *GConverterInputStream_listautoptr; typedef GSList *GConverterInputStream_slistautoptr; typedef GQueue *GConverterInputStream_queueautoptr;
# 31052 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31052 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31052 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverterInputStream (GConverterInputStream *_ptr) { if (_ptr) (g_object_unref) ((GConverterInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverterInputStream (GConverterInputStream **_ptr) { glib_autoptr_clear_GConverterInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverterInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverterInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverterInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31052 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GConverterOutputStream *GConverterOutputStream_autoptr; typedef GList *GConverterOutputStream_listautoptr; typedef GSList *GConverterOutputStream_slistautoptr; typedef GQueue *GConverterOutputStream_queueautoptr;
# 31053 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31053 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31053 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverterOutputStream (GConverterOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GConverterOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverterOutputStream (GConverterOutputStream **_ptr) { glib_autoptr_clear_GConverterOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverterOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverterOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverterOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31053 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GCredentials *GCredentials_autoptr; typedef GList *GCredentials_listautoptr; typedef GSList *GCredentials_slistautoptr; typedef GQueue *GCredentials_queueautoptr;
# 31054 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31054 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31054 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCredentials (GCredentials *_ptr) { if (_ptr) (g_object_unref) ((GCredentials *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCredentials (GCredentials **_ptr) { glib_autoptr_clear_GCredentials (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCredentials (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCredentials (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCredentials (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31054 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDatagramBased *GDatagramBased_autoptr; typedef GList *GDatagramBased_listautoptr; typedef GSList *GDatagramBased_slistautoptr; typedef GQueue *GDatagramBased_queueautoptr;
# 31055 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31055 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31055 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDatagramBased (GDatagramBased *_ptr) { if (_ptr) (g_object_unref) ((GDatagramBased *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDatagramBased (GDatagramBased **_ptr) { glib_autoptr_clear_GDatagramBased (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDatagramBased (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDatagramBased (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDatagramBased (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31055 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDataInputStream *GDataInputStream_autoptr; typedef GList *GDataInputStream_listautoptr; typedef GSList *GDataInputStream_slistautoptr; typedef GQueue *GDataInputStream_queueautoptr;
# 31056 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31056 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31056 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDataInputStream (GDataInputStream *_ptr) { if (_ptr) (g_object_unref) ((GDataInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDataInputStream (GDataInputStream **_ptr) { glib_autoptr_clear_GDataInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDataInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDataInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDataInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31056 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDataOutputStream *GDataOutputStream_autoptr; typedef GList *GDataOutputStream_listautoptr; typedef GSList *GDataOutputStream_slistautoptr; typedef GQueue *GDataOutputStream_queueautoptr;
# 31057 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31057 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31057 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDataOutputStream (GDataOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GDataOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDataOutputStream (GDataOutputStream **_ptr) { glib_autoptr_clear_GDataOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDataOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDataOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDataOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31057 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusActionGroup *GDBusActionGroup_autoptr; typedef GList *GDBusActionGroup_listautoptr; typedef GSList *GDBusActionGroup_slistautoptr; typedef GQueue *GDBusActionGroup_queueautoptr;
# 31058 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31058 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31058 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusActionGroup (GDBusActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GDBusActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusActionGroup (GDBusActionGroup **_ptr) { glib_autoptr_clear_GDBusActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusActionGroup (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusActionGroup (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31058 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusAuthObserver *GDBusAuthObserver_autoptr; typedef GList *GDBusAuthObserver_listautoptr; typedef GSList *GDBusAuthObserver_slistautoptr; typedef GQueue *GDBusAuthObserver_queueautoptr;
# 31059 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31059 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31059 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusAuthObserver (GDBusAuthObserver *_ptr) { if (_ptr) (g_object_unref) ((GDBusAuthObserver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusAuthObserver (GDBusAuthObserver **_ptr) { glib_autoptr_clear_GDBusAuthObserver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusAuthObserver (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusAuthObserver (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusAuthObserver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31059 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusConnection *GDBusConnection_autoptr; typedef GList *GDBusConnection_listautoptr; typedef GSList *GDBusConnection_slistautoptr; typedef GQueue *GDBusConnection_queueautoptr;
# 31060 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31060 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31060 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusConnection (GDBusConnection *_ptr) { if (_ptr) (g_object_unref) ((GDBusConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusConnection (GDBusConnection **_ptr) { glib_autoptr_clear_GDBusConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31060 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusInterface *GDBusInterface_autoptr; typedef GList *GDBusInterface_listautoptr; typedef GSList *GDBusInterface_slistautoptr; typedef GQueue *GDBusInterface_queueautoptr;
# 31061 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31061 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31061 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusInterface (GDBusInterface *_ptr) { if (_ptr) (g_object_unref) ((GDBusInterface *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusInterface (GDBusInterface **_ptr) { glib_autoptr_clear_GDBusInterface (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusInterface (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusInterface (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusInterface (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31061 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusInterfaceSkeleton *GDBusInterfaceSkeleton_autoptr; typedef GList *GDBusInterfaceSkeleton_listautoptr; typedef GSList *GDBusInterfaceSkeleton_slistautoptr; typedef GQueue *GDBusInterfaceSkeleton_queueautoptr;
# 31062 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31062 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31062 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusInterfaceSkeleton (GDBusInterfaceSkeleton *_ptr) { if (_ptr) (g_object_unref) ((GDBusInterfaceSkeleton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusInterfaceSkeleton (GDBusInterfaceSkeleton **_ptr) { glib_autoptr_clear_GDBusInterfaceSkeleton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusInterfaceSkeleton (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusInterfaceSkeleton (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusInterfaceSkeleton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31062 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusMenuModel *GDBusMenuModel_autoptr; typedef GList *GDBusMenuModel_listautoptr; typedef GSList *GDBusMenuModel_slistautoptr; typedef GQueue *GDBusMenuModel_queueautoptr;
# 31063 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31063 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31063 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMenuModel (GDBusMenuModel *_ptr) { if (_ptr) (g_object_unref) ((GDBusMenuModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMenuModel (GDBusMenuModel **_ptr) { glib_autoptr_clear_GDBusMenuModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMenuModel (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMenuModel (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMenuModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31063 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusMessage *GDBusMessage_autoptr; typedef GList *GDBusMessage_listautoptr; typedef GSList *GDBusMessage_slistautoptr; typedef GQueue *GDBusMessage_queueautoptr;
# 31064 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31064 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31064 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMessage (GDBusMessage *_ptr) { if (_ptr) (g_object_unref) ((GDBusMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMessage (GDBusMessage **_ptr) { glib_autoptr_clear_GDBusMessage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMessage (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMessage (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMessage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31064 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusMethodInvocation *GDBusMethodInvocation_autoptr; typedef GList *GDBusMethodInvocation_listautoptr; typedef GSList *GDBusMethodInvocation_slistautoptr; typedef GQueue *GDBusMethodInvocation_queueautoptr;
# 31065 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31065 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31065 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMethodInvocation (GDBusMethodInvocation *_ptr) { if (_ptr) (g_object_unref) ((GDBusMethodInvocation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMethodInvocation (GDBusMethodInvocation **_ptr) { glib_autoptr_clear_GDBusMethodInvocation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMethodInvocation (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMethodInvocation (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMethodInvocation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31065 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusNodeInfo *GDBusNodeInfo_autoptr; typedef GList *GDBusNodeInfo_listautoptr; typedef GSList *GDBusNodeInfo_slistautoptr; typedef GQueue *GDBusNodeInfo_queueautoptr;
# 31066 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31066 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31066 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusNodeInfo (GDBusNodeInfo *_ptr) { if (_ptr) (g_dbus_node_info_unref) ((GDBusNodeInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusNodeInfo (GDBusNodeInfo **_ptr) { glib_autoptr_clear_GDBusNodeInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusNodeInfo (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_dbus_node_info_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusNodeInfo (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_dbus_node_info_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusNodeInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_dbus_node_info_unref); }
# 31066 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusObject *GDBusObject_autoptr; typedef GList *GDBusObject_listautoptr; typedef GSList *GDBusObject_slistautoptr; typedef GQueue *GDBusObject_queueautoptr;
# 31067 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31067 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31067 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObject (GDBusObject *_ptr) { if (_ptr) (g_object_unref) ((GDBusObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObject (GDBusObject **_ptr) { glib_autoptr_clear_GDBusObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObject (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObject (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31067 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusObjectManagerClient *GDBusObjectManagerClient_autoptr; typedef GList *GDBusObjectManagerClient_listautoptr; typedef GSList *GDBusObjectManagerClient_slistautoptr; typedef GQueue *GDBusObjectManagerClient_queueautoptr;
# 31068 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31068 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31068 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManagerClient (GDBusObjectManagerClient *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManagerClient *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManagerClient (GDBusObjectManagerClient **_ptr) { glib_autoptr_clear_GDBusObjectManagerClient (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManagerClient (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManagerClient (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManagerClient (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31068 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusObjectManager *GDBusObjectManager_autoptr; typedef GList *GDBusObjectManager_listautoptr; typedef GSList *GDBusObjectManager_slistautoptr; typedef GQueue *GDBusObjectManager_queueautoptr;
# 31069 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31069 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31069 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManager (GDBusObjectManager *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManager (GDBusObjectManager **_ptr) { glib_autoptr_clear_GDBusObjectManager (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManager (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManager (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManager (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31069 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusObjectManagerServer *GDBusObjectManagerServer_autoptr; typedef GList *GDBusObjectManagerServer_listautoptr; typedef GSList *GDBusObjectManagerServer_slistautoptr; typedef GQueue *GDBusObjectManagerServer_queueautoptr;
# 31070 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31070 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31070 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManagerServer (GDBusObjectManagerServer *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManagerServer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManagerServer (GDBusObjectManagerServer **_ptr) { glib_autoptr_clear_GDBusObjectManagerServer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManagerServer (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManagerServer (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManagerServer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31070 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusObjectProxy *GDBusObjectProxy_autoptr; typedef GList *GDBusObjectProxy_listautoptr; typedef GSList *GDBusObjectProxy_slistautoptr; typedef GQueue *GDBusObjectProxy_queueautoptr;
# 31071 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31071 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31071 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectProxy (GDBusObjectProxy *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectProxy (GDBusObjectProxy **_ptr) { glib_autoptr_clear_GDBusObjectProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectProxy (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectProxy (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31071 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusObjectSkeleton *GDBusObjectSkeleton_autoptr; typedef GList *GDBusObjectSkeleton_listautoptr; typedef GSList *GDBusObjectSkeleton_slistautoptr; typedef GQueue *GDBusObjectSkeleton_queueautoptr;
# 31072 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31072 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31072 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectSkeleton (GDBusObjectSkeleton *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectSkeleton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectSkeleton (GDBusObjectSkeleton **_ptr) { glib_autoptr_clear_GDBusObjectSkeleton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectSkeleton (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectSkeleton (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectSkeleton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31072 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusProxy *GDBusProxy_autoptr; typedef GList *GDBusProxy_listautoptr; typedef GSList *GDBusProxy_slistautoptr; typedef GQueue *GDBusProxy_queueautoptr;
# 31073 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31073 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31073 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusProxy (GDBusProxy *_ptr) { if (_ptr) (g_object_unref) ((GDBusProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusProxy (GDBusProxy **_ptr) { glib_autoptr_clear_GDBusProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusProxy (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusProxy (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31073 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDBusServer *GDBusServer_autoptr; typedef GList *GDBusServer_listautoptr; typedef GSList *GDBusServer_slistautoptr; typedef GQueue *GDBusServer_queueautoptr;
# 31074 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31074 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31074 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusServer (GDBusServer *_ptr) { if (_ptr) (g_object_unref) ((GDBusServer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusServer (GDBusServer **_ptr) { glib_autoptr_clear_GDBusServer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusServer (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusServer (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusServer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31074 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GDrive *GDrive_autoptr; typedef GList *GDrive_listautoptr; typedef GSList *GDrive_slistautoptr; typedef GQueue *GDrive_queueautoptr;
# 31075 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31075 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31075 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDrive (GDrive *_ptr) { if (_ptr) (g_object_unref) ((GDrive *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDrive (GDrive **_ptr) { glib_autoptr_clear_GDrive (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDrive (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDrive (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDrive (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31075 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GEmblemedIcon *GEmblemedIcon_autoptr; typedef GList *GEmblemedIcon_listautoptr; typedef GSList *GEmblemedIcon_slistautoptr; typedef GQueue *GEmblemedIcon_queueautoptr;
# 31076 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31076 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31076 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEmblemedIcon (GEmblemedIcon *_ptr) { if (_ptr) (g_object_unref) ((GEmblemedIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEmblemedIcon (GEmblemedIcon **_ptr) { glib_autoptr_clear_GEmblemedIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEmblemedIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEmblemedIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEmblemedIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31076 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GEmblem *GEmblem_autoptr; typedef GList *GEmblem_listautoptr; typedef GSList *GEmblem_slistautoptr; typedef GQueue *GEmblem_queueautoptr;
# 31077 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31077 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31077 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEmblem (GEmblem *_ptr) { if (_ptr) (g_object_unref) ((GEmblem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEmblem (GEmblem **_ptr) { glib_autoptr_clear_GEmblem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEmblem (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEmblem (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEmblem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31077 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFileEnumerator *GFileEnumerator_autoptr; typedef GList *GFileEnumerator_listautoptr; typedef GSList *GFileEnumerator_slistautoptr; typedef GQueue *GFileEnumerator_queueautoptr;
# 31078 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31078 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31078 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileEnumerator (GFileEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GFileEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileEnumerator (GFileEnumerator **_ptr) { glib_autoptr_clear_GFileEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileEnumerator (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileEnumerator (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31078 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFile *GFile_autoptr; typedef GList *GFile_listautoptr; typedef GSList *GFile_slistautoptr; typedef GQueue *GFile_queueautoptr;
# 31079 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31079 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31079 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFile (GFile *_ptr) { if (_ptr) (g_object_unref) ((GFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFile (GFile **_ptr) { glib_autoptr_clear_GFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFile (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFile (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31079 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFileAttributeInfoList *GFileAttributeInfoList_autoptr; typedef GList *GFileAttributeInfoList_listautoptr; typedef GSList *GFileAttributeInfoList_slistautoptr; typedef GQueue *GFileAttributeInfoList_queueautoptr;
# 31080 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31080 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31080 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileAttributeInfoList (GFileAttributeInfoList *_ptr) { if (_ptr) (g_file_attribute_info_list_unref) ((GFileAttributeInfoList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileAttributeInfoList (GFileAttributeInfoList **_ptr) { glib_autoptr_clear_GFileAttributeInfoList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileAttributeInfoList (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_file_attribute_info_list_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileAttributeInfoList (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_file_attribute_info_list_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileAttributeInfoList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_file_attribute_info_list_unref); }
# 31080 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFileIcon *GFileIcon_autoptr; typedef GList *GFileIcon_listautoptr; typedef GSList *GFileIcon_slistautoptr; typedef GQueue *GFileIcon_queueautoptr;
# 31081 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31081 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31081 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileIcon (GFileIcon *_ptr) { if (_ptr) (g_object_unref) ((GFileIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileIcon (GFileIcon **_ptr) { glib_autoptr_clear_GFileIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31081 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFileInfo *GFileInfo_autoptr; typedef GList *GFileInfo_listautoptr; typedef GSList *GFileInfo_slistautoptr; typedef GQueue *GFileInfo_queueautoptr;
# 31082 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31082 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31082 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileInfo (GFileInfo *_ptr) { if (_ptr) (g_object_unref) ((GFileInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileInfo (GFileInfo **_ptr) { glib_autoptr_clear_GFileInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileInfo (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileInfo (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31082 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFileInputStream *GFileInputStream_autoptr; typedef GList *GFileInputStream_listautoptr; typedef GSList *GFileInputStream_slistautoptr; typedef GQueue *GFileInputStream_queueautoptr;
# 31083 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31083 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31083 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileInputStream (GFileInputStream *_ptr) { if (_ptr) (g_object_unref) ((GFileInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileInputStream (GFileInputStream **_ptr) { glib_autoptr_clear_GFileInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31083 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFileIOStream *GFileIOStream_autoptr; typedef GList *GFileIOStream_listautoptr; typedef GSList *GFileIOStream_slistautoptr; typedef GQueue *GFileIOStream_queueautoptr;
# 31084 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31084 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31084 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileIOStream (GFileIOStream *_ptr) { if (_ptr) (g_object_unref) ((GFileIOStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileIOStream (GFileIOStream **_ptr) { glib_autoptr_clear_GFileIOStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileIOStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileIOStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileIOStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31084 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFileMonitor *GFileMonitor_autoptr; typedef GList *GFileMonitor_listautoptr; typedef GSList *GFileMonitor_slistautoptr; typedef GQueue *GFileMonitor_queueautoptr;
# 31085 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31085 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31085 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileMonitor (GFileMonitor *_ptr) { if (_ptr) (g_object_unref) ((GFileMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileMonitor (GFileMonitor **_ptr) { glib_autoptr_clear_GFileMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31085 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFilenameCompleter *GFilenameCompleter_autoptr; typedef GList *GFilenameCompleter_listautoptr; typedef GSList *GFilenameCompleter_slistautoptr; typedef GQueue *GFilenameCompleter_queueautoptr;
# 31086 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31086 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31086 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilenameCompleter (GFilenameCompleter *_ptr) { if (_ptr) (g_object_unref) ((GFilenameCompleter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilenameCompleter (GFilenameCompleter **_ptr) { glib_autoptr_clear_GFilenameCompleter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilenameCompleter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilenameCompleter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilenameCompleter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31086 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFileOutputStream *GFileOutputStream_autoptr; typedef GList *GFileOutputStream_listautoptr; typedef GSList *GFileOutputStream_slistautoptr; typedef GQueue *GFileOutputStream_queueautoptr;
# 31087 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31087 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31087 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileOutputStream (GFileOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GFileOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileOutputStream (GFileOutputStream **_ptr) { glib_autoptr_clear_GFileOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31087 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFilterInputStream *GFilterInputStream_autoptr; typedef GList *GFilterInputStream_listautoptr; typedef GSList *GFilterInputStream_slistautoptr; typedef GQueue *GFilterInputStream_queueautoptr;
# 31088 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31088 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31088 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilterInputStream (GFilterInputStream *_ptr) { if (_ptr) (g_object_unref) ((GFilterInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilterInputStream (GFilterInputStream **_ptr) { glib_autoptr_clear_GFilterInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilterInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilterInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilterInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31088 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GFilterOutputStream *GFilterOutputStream_autoptr; typedef GList *GFilterOutputStream_listautoptr; typedef GSList *GFilterOutputStream_slistautoptr; typedef GQueue *GFilterOutputStream_queueautoptr;
# 31089 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31089 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31089 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilterOutputStream (GFilterOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GFilterOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilterOutputStream (GFilterOutputStream **_ptr) { glib_autoptr_clear_GFilterOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilterOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilterOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilterOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31089 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GIcon *GIcon_autoptr; typedef GList *GIcon_listautoptr; typedef GSList *GIcon_slistautoptr; typedef GQueue *GIcon_queueautoptr;
# 31090 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31090 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31090 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIcon (GIcon *_ptr) { if (_ptr) (g_object_unref) ((GIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIcon (GIcon **_ptr) { glib_autoptr_clear_GIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31090 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GInetAddress *GInetAddress_autoptr; typedef GList *GInetAddress_listautoptr; typedef GSList *GInetAddress_slistautoptr; typedef GQueue *GInetAddress_queueautoptr;
# 31091 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31091 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31091 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetAddress (GInetAddress *_ptr) { if (_ptr) (g_object_unref) ((GInetAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetAddress (GInetAddress **_ptr) { glib_autoptr_clear_GInetAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31091 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GInetAddressMask *GInetAddressMask_autoptr; typedef GList *GInetAddressMask_listautoptr; typedef GSList *GInetAddressMask_slistautoptr; typedef GQueue *GInetAddressMask_queueautoptr;
# 31092 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31092 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31092 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetAddressMask (GInetAddressMask *_ptr) { if (_ptr) (g_object_unref) ((GInetAddressMask *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetAddressMask (GInetAddressMask **_ptr) { glib_autoptr_clear_GInetAddressMask (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetAddressMask (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetAddressMask (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetAddressMask (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31092 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GInetSocketAddress *GInetSocketAddress_autoptr; typedef GList *GInetSocketAddress_listautoptr; typedef GSList *GInetSocketAddress_slistautoptr; typedef GQueue *GInetSocketAddress_queueautoptr;
# 31093 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31093 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31093 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetSocketAddress (GInetSocketAddress *_ptr) { if (_ptr) (g_object_unref) ((GInetSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetSocketAddress (GInetSocketAddress **_ptr) { glib_autoptr_clear_GInetSocketAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetSocketAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetSocketAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetSocketAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31093 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GInitable *GInitable_autoptr; typedef GList *GInitable_listautoptr; typedef GSList *GInitable_slistautoptr; typedef GQueue *GInitable_queueautoptr;
# 31094 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31094 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31094 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInitable (GInitable *_ptr) { if (_ptr) (g_object_unref) ((GInitable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInitable (GInitable **_ptr) { glib_autoptr_clear_GInitable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInitable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInitable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInitable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31094 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GInputStream *GInputStream_autoptr; typedef GList *GInputStream_listautoptr; typedef GSList *GInputStream_slistautoptr; typedef GQueue *GInputStream_queueautoptr;
# 31095 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31095 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31095 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInputStream (GInputStream *_ptr) { if (_ptr) (g_object_unref) ((GInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInputStream (GInputStream **_ptr) { glib_autoptr_clear_GInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31095 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GIOModule *GIOModule_autoptr; typedef GList *GIOModule_listautoptr; typedef GSList *GIOModule_slistautoptr; typedef GQueue *GIOModule_queueautoptr;
# 31096 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31096 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31096 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOModule (GIOModule *_ptr) { if (_ptr) (g_object_unref) ((GIOModule *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOModule (GIOModule **_ptr) { glib_autoptr_clear_GIOModule (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOModule (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOModule (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOModule (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31096 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GIOStream *GIOStream_autoptr; typedef GList *GIOStream_listautoptr; typedef GSList *GIOStream_slistautoptr; typedef GQueue *GIOStream_queueautoptr;
# 31097 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31097 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31097 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOStream (GIOStream *_ptr) { if (_ptr) (g_object_unref) ((GIOStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOStream (GIOStream **_ptr) { glib_autoptr_clear_GIOStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31097 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GLoadableIcon *GLoadableIcon_autoptr; typedef GList *GLoadableIcon_listautoptr; typedef GSList *GLoadableIcon_slistautoptr; typedef GQueue *GLoadableIcon_queueautoptr;
# 31098 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31098 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31098 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GLoadableIcon (GLoadableIcon *_ptr) { if (_ptr) (g_object_unref) ((GLoadableIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GLoadableIcon (GLoadableIcon **_ptr) { glib_autoptr_clear_GLoadableIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GLoadableIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GLoadableIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GLoadableIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31098 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMemoryInputStream *GMemoryInputStream_autoptr; typedef GList *GMemoryInputStream_listautoptr; typedef GSList *GMemoryInputStream_slistautoptr; typedef GQueue *GMemoryInputStream_queueautoptr;
# 31099 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31099 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31099 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryInputStream (GMemoryInputStream *_ptr) { if (_ptr) (g_object_unref) ((GMemoryInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryInputStream (GMemoryInputStream **_ptr) { glib_autoptr_clear_GMemoryInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31099 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMemoryOutputStream *GMemoryOutputStream_autoptr; typedef GList *GMemoryOutputStream_listautoptr; typedef GSList *GMemoryOutputStream_slistautoptr; typedef GQueue *GMemoryOutputStream_queueautoptr;
# 31100 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31100 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31100 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryOutputStream (GMemoryOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GMemoryOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryOutputStream (GMemoryOutputStream **_ptr) { glib_autoptr_clear_GMemoryOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31100 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMenu *GMenu_autoptr; typedef GList *GMenu_listautoptr; typedef GSList *GMenu_slistautoptr; typedef GQueue *GMenu_queueautoptr;
# 31101 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31101 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31101 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenu (GMenu *_ptr) { if (_ptr) (g_object_unref) ((GMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenu (GMenu **_ptr) { glib_autoptr_clear_GMenu (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenu (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenu (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenu (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31101 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMenuItem *GMenuItem_autoptr; typedef GList *GMenuItem_listautoptr; typedef GSList *GMenuItem_slistautoptr; typedef GQueue *GMenuItem_queueautoptr;
# 31102 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31102 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31102 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuItem (GMenuItem *_ptr) { if (_ptr) (g_object_unref) ((GMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuItem (GMenuItem **_ptr) { glib_autoptr_clear_GMenuItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuItem (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuItem (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31102 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMenuModel *GMenuModel_autoptr; typedef GList *GMenuModel_listautoptr; typedef GSList *GMenuModel_slistautoptr; typedef GQueue *GMenuModel_queueautoptr;
# 31103 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31103 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31103 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuModel (GMenuModel *_ptr) { if (_ptr) (g_object_unref) ((GMenuModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuModel (GMenuModel **_ptr) { glib_autoptr_clear_GMenuModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuModel (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuModel (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31103 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMenuAttributeIter *GMenuAttributeIter_autoptr; typedef GList *GMenuAttributeIter_listautoptr; typedef GSList *GMenuAttributeIter_slistautoptr; typedef GQueue *GMenuAttributeIter_queueautoptr;
# 31104 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31104 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31104 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuAttributeIter (GMenuAttributeIter *_ptr) { if (_ptr) (g_object_unref) ((GMenuAttributeIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuAttributeIter (GMenuAttributeIter **_ptr) { glib_autoptr_clear_GMenuAttributeIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuAttributeIter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuAttributeIter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuAttributeIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31104 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMenuLinkIter *GMenuLinkIter_autoptr; typedef GList *GMenuLinkIter_listautoptr; typedef GSList *GMenuLinkIter_slistautoptr; typedef GQueue *GMenuLinkIter_queueautoptr;
# 31105 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31105 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31105 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuLinkIter (GMenuLinkIter *_ptr) { if (_ptr) (g_object_unref) ((GMenuLinkIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuLinkIter (GMenuLinkIter **_ptr) { glib_autoptr_clear_GMenuLinkIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuLinkIter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuLinkIter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuLinkIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31105 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMount *GMount_autoptr; typedef GList *GMount_listautoptr; typedef GSList *GMount_slistautoptr; typedef GQueue *GMount_queueautoptr;
# 31106 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31106 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31106 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMount (GMount *_ptr) { if (_ptr) (g_object_unref) ((GMount *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMount (GMount **_ptr) { glib_autoptr_clear_GMount (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMount (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMount (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMount (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31106 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GMountOperation *GMountOperation_autoptr; typedef GList *GMountOperation_listautoptr; typedef GSList *GMountOperation_slistautoptr; typedef GQueue *GMountOperation_queueautoptr;
# 31107 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31107 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31107 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMountOperation (GMountOperation *_ptr) { if (_ptr) (g_object_unref) ((GMountOperation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMountOperation (GMountOperation **_ptr) { glib_autoptr_clear_GMountOperation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMountOperation (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMountOperation (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMountOperation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31107 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GNativeVolumeMonitor *GNativeVolumeMonitor_autoptr; typedef GList *GNativeVolumeMonitor_listautoptr; typedef GSList *GNativeVolumeMonitor_slistautoptr; typedef GQueue *GNativeVolumeMonitor_queueautoptr;
# 31108 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31108 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31108 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNativeVolumeMonitor (GNativeVolumeMonitor *_ptr) { if (_ptr) (g_object_unref) ((GNativeVolumeMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNativeVolumeMonitor (GNativeVolumeMonitor **_ptr) { glib_autoptr_clear_GNativeVolumeMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNativeVolumeMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNativeVolumeMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNativeVolumeMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31108 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GNetworkAddress *GNetworkAddress_autoptr; typedef GList *GNetworkAddress_listautoptr; typedef GSList *GNetworkAddress_slistautoptr; typedef GQueue *GNetworkAddress_queueautoptr;
# 31109 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31109 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31109 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkAddress (GNetworkAddress *_ptr) { if (_ptr) (g_object_unref) ((GNetworkAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkAddress (GNetworkAddress **_ptr) { glib_autoptr_clear_GNetworkAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31109 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GNetworkMonitor *GNetworkMonitor_autoptr; typedef GList *GNetworkMonitor_listautoptr; typedef GSList *GNetworkMonitor_slistautoptr; typedef GQueue *GNetworkMonitor_queueautoptr;
# 31110 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31110 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31110 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkMonitor (GNetworkMonitor *_ptr) { if (_ptr) (g_object_unref) ((GNetworkMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkMonitor (GNetworkMonitor **_ptr) { glib_autoptr_clear_GNetworkMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31110 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GNetworkService *GNetworkService_autoptr; typedef GList *GNetworkService_listautoptr; typedef GSList *GNetworkService_slistautoptr; typedef GQueue *GNetworkService_queueautoptr;
# 31111 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31111 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31111 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkService (GNetworkService *_ptr) { if (_ptr) (g_object_unref) ((GNetworkService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkService (GNetworkService **_ptr) { glib_autoptr_clear_GNetworkService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkService (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkService (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31111 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GNotification *GNotification_autoptr; typedef GList *GNotification_listautoptr; typedef GSList *GNotification_slistautoptr; typedef GQueue *GNotification_queueautoptr;
# 31112 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31112 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31112 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNotification (GNotification *_ptr) { if (_ptr) (g_object_unref) ((GNotification *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNotification (GNotification **_ptr) { glib_autoptr_clear_GNotification (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNotification (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNotification (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNotification (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31112 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GOutputStream *GOutputStream_autoptr; typedef GList *GOutputStream_listautoptr; typedef GSList *GOutputStream_slistautoptr; typedef GQueue *GOutputStream_queueautoptr;
# 31113 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31113 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31113 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOutputStream (GOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOutputStream (GOutputStream **_ptr) { glib_autoptr_clear_GOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31113 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GPermission *GPermission_autoptr; typedef GList *GPermission_listautoptr; typedef GSList *GPermission_slistautoptr; typedef GQueue *GPermission_queueautoptr;
# 31114 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31114 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31114 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPermission (GPermission *_ptr) { if (_ptr) (g_object_unref) ((GPermission *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPermission (GPermission **_ptr) { glib_autoptr_clear_GPermission (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPermission (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPermission (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPermission (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31114 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GPollableInputStream *GPollableInputStream_autoptr; typedef GList *GPollableInputStream_listautoptr; typedef GSList *GPollableInputStream_slistautoptr; typedef GQueue *GPollableInputStream_queueautoptr;
# 31115 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31115 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31115 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPollableInputStream (GPollableInputStream *_ptr) { if (_ptr) (g_object_unref) ((GPollableInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPollableInputStream (GPollableInputStream **_ptr) { glib_autoptr_clear_GPollableInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPollableInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPollableInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPollableInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31115 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GPollableOutputStream *GPollableOutputStream_autoptr; typedef GList *GPollableOutputStream_listautoptr; typedef GSList *GPollableOutputStream_slistautoptr; typedef GQueue *GPollableOutputStream_queueautoptr;
# 31116 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31116 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31116 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPollableOutputStream (GPollableOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GPollableOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPollableOutputStream (GPollableOutputStream **_ptr) { glib_autoptr_clear_GPollableOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPollableOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPollableOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPollableOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31116 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GPropertyAction *GPropertyAction_autoptr; typedef GList *GPropertyAction_listautoptr; typedef GSList *GPropertyAction_slistautoptr; typedef GQueue *GPropertyAction_queueautoptr;
# 31117 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31117 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31117 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPropertyAction (GPropertyAction *_ptr) { if (_ptr) (g_object_unref) ((GPropertyAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPropertyAction (GPropertyAction **_ptr) { glib_autoptr_clear_GPropertyAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPropertyAction (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPropertyAction (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPropertyAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31117 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GProxyAddressEnumerator *GProxyAddressEnumerator_autoptr; typedef GList *GProxyAddressEnumerator_listautoptr; typedef GSList *GProxyAddressEnumerator_slistautoptr; typedef GQueue *GProxyAddressEnumerator_queueautoptr;
# 31118 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31118 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31118 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyAddressEnumerator (GProxyAddressEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GProxyAddressEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyAddressEnumerator (GProxyAddressEnumerator **_ptr) { glib_autoptr_clear_GProxyAddressEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyAddressEnumerator (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyAddressEnumerator (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyAddressEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31118 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GProxyAddress *GProxyAddress_autoptr; typedef GList *GProxyAddress_listautoptr; typedef GSList *GProxyAddress_slistautoptr; typedef GQueue *GProxyAddress_queueautoptr;
# 31119 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31119 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31119 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyAddress (GProxyAddress *_ptr) { if (_ptr) (g_object_unref) ((GProxyAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyAddress (GProxyAddress **_ptr) { glib_autoptr_clear_GProxyAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31119 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GProxy *GProxy_autoptr; typedef GList *GProxy_listautoptr; typedef GSList *GProxy_slistautoptr; typedef GQueue *GProxy_queueautoptr;
# 31120 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31120 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31120 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxy (GProxy *_ptr) { if (_ptr) (g_object_unref) ((GProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxy (GProxy **_ptr) { glib_autoptr_clear_GProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxy (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxy (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31120 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GProxyResolver *GProxyResolver_autoptr; typedef GList *GProxyResolver_listautoptr; typedef GSList *GProxyResolver_slistautoptr; typedef GQueue *GProxyResolver_queueautoptr;
# 31121 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31121 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31121 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyResolver (GProxyResolver *_ptr) { if (_ptr) (g_object_unref) ((GProxyResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyResolver (GProxyResolver **_ptr) { glib_autoptr_clear_GProxyResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyResolver (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyResolver (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31121 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GRemoteActionGroup *GRemoteActionGroup_autoptr; typedef GList *GRemoteActionGroup_listautoptr; typedef GSList *GRemoteActionGroup_slistautoptr; typedef GQueue *GRemoteActionGroup_queueautoptr;
# 31122 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31122 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31122 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRemoteActionGroup (GRemoteActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GRemoteActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRemoteActionGroup (GRemoteActionGroup **_ptr) { glib_autoptr_clear_GRemoteActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRemoteActionGroup (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRemoteActionGroup (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRemoteActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31122 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GResolver *GResolver_autoptr; typedef GList *GResolver_listautoptr; typedef GSList *GResolver_slistautoptr; typedef GQueue *GResolver_queueautoptr;
# 31123 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31123 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31123 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GResolver (GResolver *_ptr) { if (_ptr) (g_object_unref) ((GResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GResolver (GResolver **_ptr) { glib_autoptr_clear_GResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GResolver (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GResolver (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31123 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GResource *GResource_autoptr; typedef GList *GResource_listautoptr; typedef GSList *GResource_slistautoptr; typedef GQueue *GResource_queueautoptr;
# 31124 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31124 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31124 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GResource (GResource *_ptr) { if (_ptr) (g_resource_unref) ((GResource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GResource (GResource **_ptr) { glib_autoptr_clear_GResource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GResource (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_resource_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GResource (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_resource_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GResource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_resource_unref); }
# 31124 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSeekable *GSeekable_autoptr; typedef GList *GSeekable_listautoptr; typedef GSList *GSeekable_slistautoptr; typedef GQueue *GSeekable_queueautoptr;
# 31125 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31125 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31125 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSeekable (GSeekable *_ptr) { if (_ptr) (g_object_unref) ((GSeekable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSeekable (GSeekable **_ptr) { glib_autoptr_clear_GSeekable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSeekable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSeekable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSeekable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31125 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSettingsBackend *GSettingsBackend_autoptr; typedef GList *GSettingsBackend_listautoptr; typedef GSList *GSettingsBackend_slistautoptr; typedef GQueue *GSettingsBackend_queueautoptr;
# 31126 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31126 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31126 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsBackend (GSettingsBackend *_ptr) { if (_ptr) (g_object_unref) ((GSettingsBackend *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsBackend (GSettingsBackend **_ptr) { glib_autoptr_clear_GSettingsBackend (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsBackend (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsBackend (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsBackend (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31126 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSettingsSchema *GSettingsSchema_autoptr; typedef GList *GSettingsSchema_listautoptr; typedef GSList *GSettingsSchema_slistautoptr; typedef GQueue *GSettingsSchema_queueautoptr;
# 31127 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31127 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31127 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchema (GSettingsSchema *_ptr) { if (_ptr) (g_settings_schema_unref) ((GSettingsSchema *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchema (GSettingsSchema **_ptr) { glib_autoptr_clear_GSettingsSchema (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchema (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchema (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchema (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_settings_schema_unref); }
# 31127 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSettingsSchemaKey *GSettingsSchemaKey_autoptr; typedef GList *GSettingsSchemaKey_listautoptr; typedef GSList *GSettingsSchemaKey_slistautoptr; typedef GQueue *GSettingsSchemaKey_queueautoptr;
# 31128 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31128 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31128 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchemaKey (GSettingsSchemaKey *_ptr) { if (_ptr) (g_settings_schema_key_unref) ((GSettingsSchemaKey *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchemaKey (GSettingsSchemaKey **_ptr) { glib_autoptr_clear_GSettingsSchemaKey (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchemaKey (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_key_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchemaKey (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_key_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchemaKey (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_settings_schema_key_unref); }
# 31128 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSettingsSchemaSource *GSettingsSchemaSource_autoptr; typedef GList *GSettingsSchemaSource_listautoptr; typedef GSList *GSettingsSchemaSource_slistautoptr; typedef GQueue *GSettingsSchemaSource_queueautoptr;
# 31129 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31129 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31129 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchemaSource (GSettingsSchemaSource *_ptr) { if (_ptr) (g_settings_schema_source_unref) ((GSettingsSchemaSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchemaSource (GSettingsSchemaSource **_ptr) { glib_autoptr_clear_GSettingsSchemaSource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchemaSource (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_source_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchemaSource (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_source_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchemaSource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_settings_schema_source_unref); }
# 31129 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSettings *GSettings_autoptr; typedef GList *GSettings_listautoptr; typedef GSList *GSettings_slistautoptr; typedef GQueue *GSettings_queueautoptr;
# 31130 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31130 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31130 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettings (GSettings *_ptr) { if (_ptr) (g_object_unref) ((GSettings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettings (GSettings **_ptr) { glib_autoptr_clear_GSettings (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettings (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettings (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettings (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31130 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSimpleActionGroup *GSimpleActionGroup_autoptr; typedef GList *GSimpleActionGroup_listautoptr; typedef GSList *GSimpleActionGroup_slistautoptr; typedef GQueue *GSimpleActionGroup_queueautoptr;
# 31131 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31131 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31131 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleActionGroup (GSimpleActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GSimpleActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleActionGroup (GSimpleActionGroup **_ptr) { glib_autoptr_clear_GSimpleActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleActionGroup (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleActionGroup (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31131 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSimpleAction *GSimpleAction_autoptr; typedef GList *GSimpleAction_listautoptr; typedef GSList *GSimpleAction_slistautoptr; typedef GQueue *GSimpleAction_queueautoptr;
# 31132 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31132 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31132 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleAction (GSimpleAction *_ptr) { if (_ptr) (g_object_unref) ((GSimpleAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleAction (GSimpleAction **_ptr) { glib_autoptr_clear_GSimpleAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleAction (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleAction (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31132 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSimpleAsyncResult *GSimpleAsyncResult_autoptr; typedef GList *GSimpleAsyncResult_listautoptr; typedef GSList *GSimpleAsyncResult_slistautoptr; typedef GQueue *GSimpleAsyncResult_queueautoptr;
# 31133 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31133 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31133 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleAsyncResult (GSimpleAsyncResult *_ptr) { if (_ptr) (g_object_unref) ((GSimpleAsyncResult *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleAsyncResult (GSimpleAsyncResult **_ptr) { glib_autoptr_clear_GSimpleAsyncResult (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleAsyncResult (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleAsyncResult (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleAsyncResult (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31133 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSimplePermission *GSimplePermission_autoptr; typedef GList *GSimplePermission_listautoptr; typedef GSList *GSimplePermission_slistautoptr; typedef GQueue *GSimplePermission_queueautoptr;
# 31134 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31134 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31134 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimplePermission (GSimplePermission *_ptr) { if (_ptr) (g_object_unref) ((GSimplePermission *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimplePermission (GSimplePermission **_ptr) { glib_autoptr_clear_GSimplePermission (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimplePermission (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimplePermission (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimplePermission (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31134 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSimpleProxyResolver *GSimpleProxyResolver_autoptr; typedef GList *GSimpleProxyResolver_listautoptr; typedef GSList *GSimpleProxyResolver_slistautoptr; typedef GQueue *GSimpleProxyResolver_queueautoptr;
# 31135 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31135 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31135 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleProxyResolver (GSimpleProxyResolver *_ptr) { if (_ptr) (g_object_unref) ((GSimpleProxyResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleProxyResolver (GSimpleProxyResolver **_ptr) { glib_autoptr_clear_GSimpleProxyResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleProxyResolver (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleProxyResolver (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleProxyResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31135 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocketAddressEnumerator *GSocketAddressEnumerator_autoptr; typedef GList *GSocketAddressEnumerator_listautoptr; typedef GSList *GSocketAddressEnumerator_slistautoptr; typedef GQueue *GSocketAddressEnumerator_queueautoptr;
# 31136 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31136 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31136 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketAddressEnumerator (GSocketAddressEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GSocketAddressEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketAddressEnumerator (GSocketAddressEnumerator **_ptr) { glib_autoptr_clear_GSocketAddressEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketAddressEnumerator (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketAddressEnumerator (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketAddressEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31136 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocketAddress *GSocketAddress_autoptr; typedef GList *GSocketAddress_listautoptr; typedef GSList *GSocketAddress_slistautoptr; typedef GQueue *GSocketAddress_queueautoptr;
# 31137 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31137 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31137 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketAddress (GSocketAddress *_ptr) { if (_ptr) (g_object_unref) ((GSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketAddress (GSocketAddress **_ptr) { glib_autoptr_clear_GSocketAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31137 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocketClient *GSocketClient_autoptr; typedef GList *GSocketClient_listautoptr; typedef GSList *GSocketClient_slistautoptr; typedef GQueue *GSocketClient_queueautoptr;
# 31138 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31138 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31138 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketClient (GSocketClient *_ptr) { if (_ptr) (g_object_unref) ((GSocketClient *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketClient (GSocketClient **_ptr) { glib_autoptr_clear_GSocketClient (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketClient (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketClient (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketClient (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31138 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocketConnectable *GSocketConnectable_autoptr; typedef GList *GSocketConnectable_listautoptr; typedef GSList *GSocketConnectable_slistautoptr; typedef GQueue *GSocketConnectable_queueautoptr;
# 31139 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31139 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31139 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketConnectable (GSocketConnectable *_ptr) { if (_ptr) (g_object_unref) ((GSocketConnectable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketConnectable (GSocketConnectable **_ptr) { glib_autoptr_clear_GSocketConnectable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketConnectable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketConnectable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketConnectable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31139 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocketConnection *GSocketConnection_autoptr; typedef GList *GSocketConnection_listautoptr; typedef GSList *GSocketConnection_slistautoptr; typedef GQueue *GSocketConnection_queueautoptr;
# 31140 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31140 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31140 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketConnection (GSocketConnection *_ptr) { if (_ptr) (g_object_unref) ((GSocketConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketConnection (GSocketConnection **_ptr) { glib_autoptr_clear_GSocketConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31140 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocketControlMessage *GSocketControlMessage_autoptr; typedef GList *GSocketControlMessage_listautoptr; typedef GSList *GSocketControlMessage_slistautoptr; typedef GQueue *GSocketControlMessage_queueautoptr;
# 31141 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31141 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31141 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketControlMessage (GSocketControlMessage *_ptr) { if (_ptr) (g_object_unref) ((GSocketControlMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketControlMessage (GSocketControlMessage **_ptr) { glib_autoptr_clear_GSocketControlMessage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketControlMessage (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketControlMessage (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketControlMessage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31141 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocket *GSocket_autoptr; typedef GList *GSocket_listautoptr; typedef GSList *GSocket_slistautoptr; typedef GQueue *GSocket_queueautoptr;
# 31142 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31142 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31142 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocket (GSocket *_ptr) { if (_ptr) (g_object_unref) ((GSocket *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocket (GSocket **_ptr) { glib_autoptr_clear_GSocket (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocket (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocket (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocket (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31142 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocketListener *GSocketListener_autoptr; typedef GList *GSocketListener_listautoptr; typedef GSList *GSocketListener_slistautoptr; typedef GQueue *GSocketListener_queueautoptr;
# 31143 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31143 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31143 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketListener (GSocketListener *_ptr) { if (_ptr) (g_object_unref) ((GSocketListener *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketListener (GSocketListener **_ptr) { glib_autoptr_clear_GSocketListener (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketListener (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketListener (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketListener (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31143 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSocketService *GSocketService_autoptr; typedef GList *GSocketService_listautoptr; typedef GSList *GSocketService_slistautoptr; typedef GQueue *GSocketService_queueautoptr;
# 31144 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31144 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31144 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketService (GSocketService *_ptr) { if (_ptr) (g_object_unref) ((GSocketService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketService (GSocketService **_ptr) { glib_autoptr_clear_GSocketService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketService (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketService (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31144 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSubprocess *GSubprocess_autoptr; typedef GList *GSubprocess_listautoptr; typedef GSList *GSubprocess_slistautoptr; typedef GQueue *GSubprocess_queueautoptr;
# 31145 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31145 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31145 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSubprocess (GSubprocess *_ptr) { if (_ptr) (g_object_unref) ((GSubprocess *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSubprocess (GSubprocess **_ptr) { glib_autoptr_clear_GSubprocess (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSubprocess (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSubprocess (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSubprocess (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31145 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GSubprocessLauncher *GSubprocessLauncher_autoptr; typedef GList *GSubprocessLauncher_listautoptr; typedef GSList *GSubprocessLauncher_slistautoptr; typedef GQueue *GSubprocessLauncher_queueautoptr;
# 31146 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31146 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31146 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSubprocessLauncher (GSubprocessLauncher *_ptr) { if (_ptr) (g_object_unref) ((GSubprocessLauncher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSubprocessLauncher (GSubprocessLauncher **_ptr) { glib_autoptr_clear_GSubprocessLauncher (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSubprocessLauncher (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSubprocessLauncher (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSubprocessLauncher (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31146 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTask *GTask_autoptr; typedef GList *GTask_listautoptr; typedef GSList *GTask_slistautoptr; typedef GQueue *GTask_queueautoptr;
# 31147 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31147 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31147 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTask (GTask *_ptr) { if (_ptr) (g_object_unref) ((GTask *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTask (GTask **_ptr) { glib_autoptr_clear_GTask (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTask (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTask (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTask (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31147 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTcpConnection *GTcpConnection_autoptr; typedef GList *GTcpConnection_listautoptr; typedef GSList *GTcpConnection_slistautoptr; typedef GQueue *GTcpConnection_queueautoptr;
# 31148 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31148 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31148 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTcpConnection (GTcpConnection *_ptr) { if (_ptr) (g_object_unref) ((GTcpConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTcpConnection (GTcpConnection **_ptr) { glib_autoptr_clear_GTcpConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTcpConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTcpConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTcpConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31148 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTcpWrapperConnection *GTcpWrapperConnection_autoptr; typedef GList *GTcpWrapperConnection_listautoptr; typedef GSList *GTcpWrapperConnection_slistautoptr; typedef GQueue *GTcpWrapperConnection_queueautoptr;
# 31149 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31149 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31149 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTcpWrapperConnection (GTcpWrapperConnection *_ptr) { if (_ptr) (g_object_unref) ((GTcpWrapperConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTcpWrapperConnection (GTcpWrapperConnection **_ptr) { glib_autoptr_clear_GTcpWrapperConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTcpWrapperConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTcpWrapperConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTcpWrapperConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31149 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTestDBus *GTestDBus_autoptr; typedef GList *GTestDBus_listautoptr; typedef GSList *GTestDBus_slistautoptr; typedef GQueue *GTestDBus_queueautoptr;
# 31150 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31150 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31150 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTestDBus (GTestDBus *_ptr) { if (_ptr) (g_object_unref) ((GTestDBus *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTestDBus (GTestDBus **_ptr) { glib_autoptr_clear_GTestDBus (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTestDBus (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTestDBus (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTestDBus (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31150 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GThemedIcon *GThemedIcon_autoptr; typedef GList *GThemedIcon_listautoptr; typedef GSList *GThemedIcon_slistautoptr; typedef GQueue *GThemedIcon_queueautoptr;
# 31151 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31151 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31151 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThemedIcon (GThemedIcon *_ptr) { if (_ptr) (g_object_unref) ((GThemedIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThemedIcon (GThemedIcon **_ptr) { glib_autoptr_clear_GThemedIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThemedIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThemedIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThemedIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31151 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GThreadedSocketService *GThreadedSocketService_autoptr; typedef GList *GThreadedSocketService_listautoptr; typedef GSList *GThreadedSocketService_slistautoptr; typedef GQueue *GThreadedSocketService_queueautoptr;
# 31152 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31152 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31152 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThreadedSocketService (GThreadedSocketService *_ptr) { if (_ptr) (g_object_unref) ((GThreadedSocketService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThreadedSocketService (GThreadedSocketService **_ptr) { glib_autoptr_clear_GThreadedSocketService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThreadedSocketService (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThreadedSocketService (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThreadedSocketService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31152 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsBackend *GTlsBackend_autoptr; typedef GList *GTlsBackend_listautoptr; typedef GSList *GTlsBackend_slistautoptr; typedef GQueue *GTlsBackend_queueautoptr;
# 31153 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31153 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31153 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsBackend (GTlsBackend *_ptr) { if (_ptr) (g_object_unref) ((GTlsBackend *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsBackend (GTlsBackend **_ptr) { glib_autoptr_clear_GTlsBackend (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsBackend (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsBackend (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsBackend (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31153 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsCertificate *GTlsCertificate_autoptr; typedef GList *GTlsCertificate_listautoptr; typedef GSList *GTlsCertificate_slistautoptr; typedef GQueue *GTlsCertificate_queueautoptr;
# 31154 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31154 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31154 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsCertificate (GTlsCertificate *_ptr) { if (_ptr) (g_object_unref) ((GTlsCertificate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsCertificate (GTlsCertificate **_ptr) { glib_autoptr_clear_GTlsCertificate (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsCertificate (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsCertificate (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsCertificate (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31154 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsClientConnection *GTlsClientConnection_autoptr; typedef GList *GTlsClientConnection_listautoptr; typedef GSList *GTlsClientConnection_slistautoptr; typedef GQueue *GTlsClientConnection_queueautoptr;
# 31155 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31155 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31155 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsClientConnection (GTlsClientConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsClientConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsClientConnection (GTlsClientConnection **_ptr) { glib_autoptr_clear_GTlsClientConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsClientConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsClientConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsClientConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31155 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsConnection *GTlsConnection_autoptr; typedef GList *GTlsConnection_listautoptr; typedef GSList *GTlsConnection_slistautoptr; typedef GQueue *GTlsConnection_queueautoptr;
# 31156 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31156 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31156 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsConnection (GTlsConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsConnection (GTlsConnection **_ptr) { glib_autoptr_clear_GTlsConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31156 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsDatabase *GTlsDatabase_autoptr; typedef GList *GTlsDatabase_listautoptr; typedef GSList *GTlsDatabase_slistautoptr; typedef GQueue *GTlsDatabase_queueautoptr;
# 31157 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31157 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31157 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsDatabase (GTlsDatabase *_ptr) { if (_ptr) (g_object_unref) ((GTlsDatabase *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsDatabase (GTlsDatabase **_ptr) { glib_autoptr_clear_GTlsDatabase (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsDatabase (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsDatabase (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsDatabase (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31157 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsFileDatabase *GTlsFileDatabase_autoptr; typedef GList *GTlsFileDatabase_listautoptr; typedef GSList *GTlsFileDatabase_slistautoptr; typedef GQueue *GTlsFileDatabase_queueautoptr;
# 31158 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31158 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31158 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsFileDatabase (GTlsFileDatabase *_ptr) { if (_ptr) (g_object_unref) ((GTlsFileDatabase *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsFileDatabase (GTlsFileDatabase **_ptr) { glib_autoptr_clear_GTlsFileDatabase (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsFileDatabase (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsFileDatabase (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsFileDatabase (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31158 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsInteraction *GTlsInteraction_autoptr; typedef GList *GTlsInteraction_listautoptr; typedef GSList *GTlsInteraction_slistautoptr; typedef GQueue *GTlsInteraction_queueautoptr;
# 31159 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31159 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31159 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsInteraction (GTlsInteraction *_ptr) { if (_ptr) (g_object_unref) ((GTlsInteraction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsInteraction (GTlsInteraction **_ptr) { glib_autoptr_clear_GTlsInteraction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsInteraction (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsInteraction (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsInteraction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31159 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsPassword *GTlsPassword_autoptr; typedef GList *GTlsPassword_listautoptr; typedef GSList *GTlsPassword_slistautoptr; typedef GQueue *GTlsPassword_queueautoptr;
# 31160 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31160 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31160 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsPassword (GTlsPassword *_ptr) { if (_ptr) (g_object_unref) ((GTlsPassword *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsPassword (GTlsPassword **_ptr) { glib_autoptr_clear_GTlsPassword (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsPassword (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsPassword (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsPassword (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31160 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GTlsServerConnection *GTlsServerConnection_autoptr; typedef GList *GTlsServerConnection_listautoptr; typedef GSList *GTlsServerConnection_slistautoptr; typedef GQueue *GTlsServerConnection_queueautoptr;
# 31161 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31161 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31161 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsServerConnection (GTlsServerConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsServerConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsServerConnection (GTlsServerConnection **_ptr) { glib_autoptr_clear_GTlsServerConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsServerConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsServerConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsServerConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31161 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GVfs *GVfs_autoptr; typedef GList *GVfs_listautoptr; typedef GSList *GVfs_slistautoptr; typedef GQueue *GVfs_queueautoptr;
# 31162 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31162 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31162 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVfs (GVfs *_ptr) { if (_ptr) (g_object_unref) ((GVfs *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVfs (GVfs **_ptr) { glib_autoptr_clear_GVfs (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVfs (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVfs (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVfs (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31162 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GVolume *GVolume_autoptr; typedef GList *GVolume_listautoptr; typedef GSList *GVolume_slistautoptr; typedef GQueue *GVolume_queueautoptr;
# 31163 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31163 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31163 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVolume (GVolume *_ptr) { if (_ptr) (g_object_unref) ((GVolume *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVolume (GVolume **_ptr) { glib_autoptr_clear_GVolume (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVolume (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVolume (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVolume (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31163 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GVolumeMonitor *GVolumeMonitor_autoptr; typedef GList *GVolumeMonitor_listautoptr; typedef GSList *GVolumeMonitor_slistautoptr; typedef GQueue *GVolumeMonitor_queueautoptr;
# 31164 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31164 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31164 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVolumeMonitor (GVolumeMonitor *_ptr) { if (_ptr) (g_object_unref) ((GVolumeMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVolumeMonitor (GVolumeMonitor **_ptr) { glib_autoptr_clear_GVolumeMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVolumeMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVolumeMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVolumeMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31164 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GZlibCompressor *GZlibCompressor_autoptr; typedef GList *GZlibCompressor_listautoptr; typedef GSList *GZlibCompressor_slistautoptr; typedef GQueue *GZlibCompressor_queueautoptr;
# 31165 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31165 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31165 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GZlibCompressor (GZlibCompressor *_ptr) { if (_ptr) (g_object_unref) ((GZlibCompressor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GZlibCompressor (GZlibCompressor **_ptr) { glib_autoptr_clear_GZlibCompressor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GZlibCompressor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GZlibCompressor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GZlibCompressor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31165 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef GZlibDecompressor *GZlibDecompressor_autoptr; typedef GList *GZlibDecompressor_listautoptr; typedef GSList *GZlibDecompressor_slistautoptr; typedef GQueue *GZlibDecompressor_queueautoptr;
# 31166 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31166 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31166 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GZlibDecompressor (GZlibDecompressor *_ptr) { if (_ptr) (g_object_unref) ((GZlibDecompressor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GZlibDecompressor (GZlibDecompressor **_ptr) { glib_autoptr_clear_GZlibDecompressor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GZlibDecompressor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GZlibDecompressor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GZlibDecompressor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31166 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop


 extern
void gio_init (void);
 extern
void gio_shutdown (void);
 extern
void gio_deinit (void);
 extern
void gio_prepare_to_fork (void);
 extern
void gio_recover_from_fork_in_parent (void);
 extern
void gio_recover_from_fork_in_child (void);
# 31334 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _JsonNode JsonNode;
typedef struct _JsonObject JsonObject;
typedef struct _JsonArray JsonArray;
typedef enum {
  JSON_NODE_OBJECT,
  JSON_NODE_ARRAY,
  JSON_NODE_VALUE,
  JSON_NODE_NULL
} JsonNodeType;
typedef void (* JsonObjectForeach) (JsonObject *object,
                                    const gchar *member_name,
                                    JsonNode *member_node,
                                    gpointer user_data);
typedef void (* JsonArrayForeach) (JsonArray *array,
                                   guint index_,
                                   JsonNode *element_node,
                                   gpointer user_data);
extern
GType json_node_get_type (void) __attribute__ ((__const__));
extern
JsonNode * json_node_new (JsonNodeType type);
extern
JsonNode * json_node_alloc (void);
extern
JsonNode * json_node_init (JsonNode *node,
                                                 JsonNodeType type);
extern
JsonNode * json_node_init_object (JsonNode *node,
                                                 JsonObject *object);
extern
JsonNode * json_node_init_array (JsonNode *node,
                                                 JsonArray *array);
extern
JsonNode * json_node_init_int (JsonNode *node,
                                                 gint64 value);
extern
JsonNode * json_node_init_double (JsonNode *node,
                                                 gdouble value);
extern
JsonNode * json_node_init_boolean (JsonNode *node,
                                                 gboolean value);
extern
JsonNode * json_node_init_string (JsonNode *node,
                                                 const char *value);
extern
JsonNode * json_node_init_null (JsonNode *node);
extern
JsonNode * json_node_copy (JsonNode *node);
extern
void json_node_free (JsonNode *node);
extern
JsonNode * json_node_ref (JsonNode *node);
extern
void json_node_unref (JsonNode *node);
extern
JsonNodeType json_node_get_node_type (JsonNode *node);
extern
GType json_node_get_value_type (JsonNode *node);
extern
void json_node_set_parent (JsonNode *node,
                                                 JsonNode *parent);
extern
JsonNode * json_node_get_parent (JsonNode *node);
extern
const gchar * json_node_type_name (JsonNode *node);
extern
void json_node_set_object (JsonNode *node,
                                                 JsonObject *object);
extern
void json_node_take_object (JsonNode *node,
                                                 JsonObject *object);
extern
JsonObject * json_node_get_object (JsonNode *node);
extern
JsonObject * json_node_dup_object (JsonNode *node);
extern
void json_node_set_array (JsonNode *node,
                                                 JsonArray *array);
extern
void json_node_take_array (JsonNode *node,
                                                 JsonArray *array);
extern
JsonArray * json_node_get_array (JsonNode *node);
extern
JsonArray * json_node_dup_array (JsonNode *node);
extern
void json_node_set_value (JsonNode *node,
                                                 const GValue *value);
extern
void json_node_get_value (JsonNode *node,
                                                 GValue *value);
extern
void json_node_set_string (JsonNode *node,
                                                 const gchar *value);
extern
const gchar * json_node_get_string (JsonNode *node);
extern
gchar * json_node_dup_string (JsonNode *node);
extern
void json_node_set_int (JsonNode *node,
                                                 gint64 value);
extern
gint64 json_node_get_int (JsonNode *node);
extern
void json_node_set_double (JsonNode *node,
                                                 gdouble value);
extern
gdouble json_node_get_double (JsonNode *node);
extern
void json_node_set_boolean (JsonNode *node,
                                                 gboolean value);
extern
gboolean json_node_get_boolean (JsonNode *node);
extern
gboolean json_node_is_null (JsonNode *node);
extern
void json_node_seal (JsonNode *node);
extern
gboolean json_node_is_immutable (JsonNode *node);
extern
guint json_string_hash (gconstpointer key);
extern
gboolean json_string_equal (gconstpointer a,
                                                   gconstpointer b);
extern
gint json_string_compare (gconstpointer a,
                                                   gconstpointer b);
extern
guint json_node_hash (gconstpointer key);
extern
gboolean json_node_equal (gconstpointer a,
                                                   gconstpointer b);
extern
GType json_object_get_type (void) __attribute__ ((__const__));
extern
JsonObject * json_object_new (void);
extern
JsonObject * json_object_ref (JsonObject *object);
extern
void json_object_unref (JsonObject *object);
__attribute__((__deprecated__("Use '" "json_object_set_member" "' instead"))) extern
void json_object_add_member (JsonObject *object,
                                                      const gchar *member_name,
                                                      JsonNode *node);
extern
void json_object_set_member (JsonObject *object,
                                                      const gchar *member_name,
                                                      JsonNode *node);
extern
void json_object_set_int_member (JsonObject *object,
                                                      const gchar *member_name,
                                                      gint64 value);
extern
void json_object_set_double_member (JsonObject *object,
                                                      const gchar *member_name,
                                                      gdouble value);
extern
void json_object_set_boolean_member (JsonObject *object,
                                                      const gchar *member_name,
                                                      gboolean value);
extern
void json_object_set_string_member (JsonObject *object,
                                                      const gchar *member_name,
                                                      const gchar *value);
extern
void json_object_set_null_member (JsonObject *object,
                                                      const gchar *member_name);
extern
void json_object_set_array_member (JsonObject *object,
                                                      const gchar *member_name,
                                                      JsonArray *value);
extern
void json_object_set_object_member (JsonObject *object,
                                                      const gchar *member_name,
                                                      JsonObject *value);
extern
GList * json_object_get_members (JsonObject *object);
extern
JsonNode * json_object_get_member (JsonObject *object,
                                                      const gchar *member_name);
extern
JsonNode * json_object_dup_member (JsonObject *object,
                                                      const gchar *member_name);
extern
gint64 json_object_get_int_member (JsonObject *object,
                                                                         const gchar *member_name);
extern
gint64 json_object_get_int_member_with_default (JsonObject *object,
                                                                         const char *member_name,
                                                                        gint64 default_value);
extern
gdouble json_object_get_double_member (JsonObject *object,
                                                                         const gchar *member_name);
extern
double json_object_get_double_member_with_default (JsonObject *object,
                                                                         const char *member_name,
                                                                         double default_value);
extern
gboolean json_object_get_boolean_member (JsonObject *object,
                                                                         const gchar *member_name);
extern
gboolean json_object_get_boolean_member_with_default (JsonObject *object,
                                                                         const char *member_name,
                                                                         gboolean default_value);
extern
const gchar * json_object_get_string_member (JsonObject *object,
                                                                         const gchar *member_name);
extern
const char * json_object_get_string_member_with_default (JsonObject *object,
                                                                         const char *member_name,
                                                                         const char *default_value);
extern
gboolean json_object_get_null_member (JsonObject *object,
                                                      const gchar *member_name);
extern
JsonArray * json_object_get_array_member (JsonObject *object,
                                                      const gchar *member_name);
extern
JsonObject * json_object_get_object_member (JsonObject *object,
                                                      const gchar *member_name);
extern
gboolean json_object_has_member (JsonObject *object,
                                                      const gchar *member_name);
extern
void json_object_remove_member (JsonObject *object,
                                                      const gchar *member_name);
extern
GList * json_object_get_values (JsonObject *object);
extern
guint json_object_get_size (JsonObject *object);
extern
void json_object_foreach_member (JsonObject *object,
                                                      JsonObjectForeach func,
                                                      gpointer data);
extern
void json_object_seal (JsonObject *object);
extern
gboolean json_object_is_immutable (JsonObject *object);
extern
guint json_object_hash (gconstpointer key);
extern
gboolean json_object_equal (gconstpointer a,
                                                      gconstpointer b);
typedef struct {

  gpointer priv_pointer[6];
  int priv_int[2];
  gboolean priv_boolean[1];
} JsonObjectIter;
extern
void json_object_iter_init (JsonObjectIter *iter,
                                                      JsonObject *object);
extern
gboolean json_object_iter_next (JsonObjectIter *iter,
                                                      const gchar **member_name,
                                                      JsonNode **member_node);
extern
void json_object_iter_init_ordered (JsonObjectIter *iter,
                                                      JsonObject *object);
extern
gboolean json_object_iter_next_ordered (JsonObjectIter *iter,
                                                      const char **member_name,
                                                      JsonNode **member_node);
extern
GType json_array_get_type (void) __attribute__ ((__const__));
extern
JsonArray * json_array_new (void);
extern
JsonArray * json_array_sized_new (guint n_elements);
extern
JsonArray * json_array_ref (JsonArray *array);
extern
void json_array_unref (JsonArray *array);
extern
void json_array_add_element (JsonArray *array,
                                                      JsonNode *node);
extern
void json_array_add_int_element (JsonArray *array,
                                                      gint64 value);
extern
void json_array_add_double_element (JsonArray *array,
                                                      gdouble value);
extern
void json_array_add_boolean_element (JsonArray *array,
                                                      gboolean value);
extern
void json_array_add_string_element (JsonArray *array,
                                                      const gchar *value);
extern
void json_array_add_null_element (JsonArray *array);
extern
void json_array_add_array_element (JsonArray *array,
                                                      JsonArray *value);
extern
void json_array_add_object_element (JsonArray *array,
                                                      JsonObject *value);
extern
GList * json_array_get_elements (JsonArray *array);
extern
JsonNode * json_array_get_element (JsonArray *array,
                                                      guint index_);
extern
gint64 json_array_get_int_element (JsonArray *array,
                                                      guint index_);
extern
gdouble json_array_get_double_element (JsonArray *array,
                                                      guint index_);
extern
gboolean json_array_get_boolean_element (JsonArray *array,
                                                      guint index_);
extern
const gchar * json_array_get_string_element (JsonArray *array,
                                                      guint index_);
extern
gboolean json_array_get_null_element (JsonArray *array,
                                                      guint index_);
extern
JsonArray * json_array_get_array_element (JsonArray *array,
                                                      guint index_);
extern
JsonObject * json_array_get_object_element (JsonArray *array,
                                                      guint index_);
extern
JsonNode * json_array_dup_element (JsonArray *array,
                                                      guint index_);
extern
void json_array_remove_element (JsonArray *array,
                                                      guint index_);
extern
guint json_array_get_length (JsonArray *array);
extern
void json_array_foreach_element (JsonArray *array,
                                                      JsonArrayForeach func,
                                                      gpointer data);
extern
void json_array_seal (JsonArray *array);
extern
gboolean json_array_is_immutable (JsonArray *array);
extern
guint json_array_hash (gconstpointer key);
extern
gboolean json_array_equal (gconstpointer a,
                                                      gconstpointer b);

typedef JsonArray *JsonArray_autoptr; typedef GList *JsonArray_listautoptr; typedef GSList *JsonArray_slistautoptr; typedef GQueue *JsonArray_queueautoptr;
# 31678 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31678 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31678 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonArray (JsonArray *_ptr) { if (_ptr) (json_array_unref) ((JsonArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonArray (JsonArray **_ptr) { glib_autoptr_clear_JsonArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonArray (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) json_array_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonArray (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) json_array_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) json_array_unref); }
# 31678 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef JsonObject *JsonObject_autoptr; typedef GList *JsonObject_listautoptr; typedef GSList *JsonObject_slistautoptr; typedef GQueue *JsonObject_queueautoptr;
# 31679 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31679 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31679 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonObject (JsonObject *_ptr) { if (_ptr) (json_object_unref) ((JsonObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonObject (JsonObject **_ptr) { glib_autoptr_clear_JsonObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonObject (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) json_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonObject (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) json_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) json_object_unref); }
# 31679 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
typedef JsonNode *JsonNode_autoptr; typedef GList *JsonNode_listautoptr; typedef GSList *JsonNode_slistautoptr; typedef GQueue *JsonNode_queueautoptr;
# 31680 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31680 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31680 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonNode (JsonNode *_ptr) { if (_ptr) (json_node_unref) ((JsonNode *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonNode (JsonNode **_ptr) { glib_autoptr_clear_JsonNode (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonNode (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) json_node_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonNode (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) json_node_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonNode (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) json_node_unref); }
# 31680 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 31696 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _JsonBuilder JsonBuilder;
typedef struct _JsonBuilderPrivate JsonBuilderPrivate;
typedef struct _JsonBuilderClass JsonBuilderClass;
struct _JsonBuilder
{

  GObject parent_instance;
  JsonBuilderPrivate *priv;
};
struct _JsonBuilderClass
{

  GObjectClass parent_class;

  void (* _json_reserved1) (void);
  void (* _json_reserved2) (void);
};
extern
GType json_builder_get_type (void) __attribute__ ((__const__));
extern
JsonBuilder *json_builder_new (void);
extern
JsonBuilder *json_builder_new_immutable (void);
extern
JsonNode *json_builder_get_root (JsonBuilder *builder);
extern
void json_builder_reset (JsonBuilder *builder);
extern
JsonBuilder *json_builder_begin_array (JsonBuilder *builder);
extern
JsonBuilder *json_builder_end_array (JsonBuilder *builder);
extern
JsonBuilder *json_builder_begin_object (JsonBuilder *builder);
extern
JsonBuilder *json_builder_end_object (JsonBuilder *builder);
extern
JsonBuilder *json_builder_set_member_name (JsonBuilder *builder,
                                              const gchar *member_name);
extern
JsonBuilder *json_builder_add_value (JsonBuilder *builder,
                                              JsonNode *node);
extern
JsonBuilder *json_builder_add_int_value (JsonBuilder *builder,
                                              gint64 value);
extern
JsonBuilder *json_builder_add_double_value (JsonBuilder *builder,
                                              gdouble value);
extern
JsonBuilder *json_builder_add_boolean_value (JsonBuilder *builder,
                                              gboolean value);
extern
JsonBuilder *json_builder_add_string_value (JsonBuilder *builder,
                                              const gchar *value);
extern
JsonBuilder *json_builder_add_null_value (JsonBuilder *builder);

typedef JsonBuilder *JsonBuilder_autoptr; typedef GList *JsonBuilder_listautoptr; typedef GSList *JsonBuilder_slistautoptr; typedef GQueue *JsonBuilder_queueautoptr;
# 31752 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31752 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31752 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonBuilder (JsonBuilder *_ptr) { if (_ptr) (g_object_unref) ((JsonBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonBuilder (JsonBuilder **_ptr) { glib_autoptr_clear_JsonBuilder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonBuilder (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonBuilder (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonBuilder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31752 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 31768 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _JsonGenerator JsonGenerator;
typedef struct _JsonGeneratorPrivate JsonGeneratorPrivate;
typedef struct _JsonGeneratorClass JsonGeneratorClass;
struct _JsonGenerator
{

  GObject parent_instance;
  JsonGeneratorPrivate *priv;
};
struct _JsonGeneratorClass
{

  GObjectClass parent_class;

  void (* _json_reserved1) (void);
  void (* _json_reserved2) (void);
  void (* _json_reserved3) (void);
  void (* _json_reserved4) (void);
};
extern
GType json_generator_get_type (void) __attribute__ ((__const__));
extern
JsonGenerator * json_generator_new (void);
extern
void json_generator_set_pretty (JsonGenerator *generator,
                                                 gboolean is_pretty);
extern
gboolean json_generator_get_pretty (JsonGenerator *generator);
extern
void json_generator_set_indent (JsonGenerator *generator,
                                                 guint indent_level);
extern
guint json_generator_get_indent (JsonGenerator *generator);
extern
void json_generator_set_indent_char (JsonGenerator *generator,
                                                 gunichar indent_char);
extern
gunichar json_generator_get_indent_char (JsonGenerator *generator);
extern
void json_generator_set_root (JsonGenerator *generator,
                                                 JsonNode *node);
extern
JsonNode * json_generator_get_root (JsonGenerator *generator);
extern
GString *json_generator_to_gstring (JsonGenerator *generator,
                                                 GString *string);
extern
gchar * json_generator_to_data (JsonGenerator *generator,
                                                 gsize *length);
extern
gboolean json_generator_to_file (JsonGenerator *generator,
                                                 const gchar *filename,
                                                 GError **error);
extern
gboolean json_generator_to_stream (JsonGenerator *generator,
                                                 GOutputStream *stream,
                                                 GCancellable *cancellable,
                                                 GError **error);

typedef JsonGenerator *JsonGenerator_autoptr; typedef GList *JsonGenerator_listautoptr; typedef GSList *JsonGenerator_slistautoptr; typedef GQueue *JsonGenerator_queueautoptr;
# 31827 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31827 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31827 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonGenerator (JsonGenerator *_ptr) { if (_ptr) (g_object_unref) ((JsonGenerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonGenerator (JsonGenerator **_ptr) { glib_autoptr_clear_JsonGenerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonGenerator (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonGenerator (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonGenerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31827 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 31844 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _JsonParser JsonParser;
typedef struct _JsonParserPrivate JsonParserPrivate;
typedef struct _JsonParserClass JsonParserClass;
typedef enum {
  JSON_PARSER_ERROR_PARSE,
  JSON_PARSER_ERROR_TRAILING_COMMA,
  JSON_PARSER_ERROR_MISSING_COMMA,
  JSON_PARSER_ERROR_MISSING_COLON,
  JSON_PARSER_ERROR_INVALID_BAREWORD,
  JSON_PARSER_ERROR_EMPTY_MEMBER_NAME,
  JSON_PARSER_ERROR_INVALID_DATA,
  JSON_PARSER_ERROR_UNKNOWN
} JsonParserError;
struct _JsonParser
{

  GObject parent_instance;
  JsonParserPrivate *priv;
};
struct _JsonParserClass
{

  GObjectClass parent_class;

  void (* parse_start) (JsonParser *parser);
  void (* object_start) (JsonParser *parser);
  void (* object_member) (JsonParser *parser,
                          JsonObject *object,
                          const gchar *member_name);
  void (* object_end) (JsonParser *parser,
                          JsonObject *object);
  void (* array_start) (JsonParser *parser);
  void (* array_element) (JsonParser *parser,
                          JsonArray *array,
                          gint index_);
  void (* array_end) (JsonParser *parser,
                          JsonArray *array);
  void (* parse_end) (JsonParser *parser);

  void (* error) (JsonParser *parser,
                          const GError *error);


  void (* _json_reserved1) (void);
  void (* _json_reserved2) (void);
  void (* _json_reserved3) (void);
  void (* _json_reserved4) (void);
  void (* _json_reserved5) (void);
  void (* _json_reserved6) (void);
  void (* _json_reserved7) (void);
  void (* _json_reserved8) (void);
};
extern
GQuark json_parser_error_quark (void);
extern
GType json_parser_get_type (void) __attribute__ ((__const__));
extern
JsonParser *json_parser_new (void);
extern
JsonParser *json_parser_new_immutable (void);
extern
gboolean json_parser_load_from_file (JsonParser *parser,
                                                 const gchar *filename,
                                                 GError **error);
extern
gboolean json_parser_load_from_mapped_file (JsonParser *parser,
                                                 const gchar *filename,
                                                 GError **error);
extern
gboolean json_parser_load_from_data (JsonParser *parser,
                                                 const gchar *data,
                                                 gssize length,
                                                 GError **error);
extern
gboolean json_parser_load_from_stream (JsonParser *parser,
                                                 GInputStream *stream,
                                                 GCancellable *cancellable,
                                                 GError **error);
extern
void json_parser_load_from_stream_async (JsonParser *parser,
                                                 GInputStream *stream,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
extern
gboolean json_parser_load_from_stream_finish (JsonParser *parser,
                                                 GAsyncResult *result,
                                                 GError **error);
extern
JsonNode * json_parser_get_root (JsonParser *parser);
extern
JsonNode * json_parser_steal_root (JsonParser *parser);
extern
guint json_parser_get_current_line (JsonParser *parser);
extern
guint json_parser_get_current_pos (JsonParser *parser);
extern
gboolean json_parser_has_assignment (JsonParser *parser,
                                                 gchar **variable_name);

typedef JsonParser *JsonParser_autoptr; typedef GList *JsonParser_listautoptr; typedef GSList *JsonParser_slistautoptr; typedef GQueue *JsonParser_queueautoptr;
# 31944 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31944 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31944 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonParser (JsonParser *_ptr) { if (_ptr) (g_object_unref) ((JsonParser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonParser (JsonParser **_ptr) { glib_autoptr_clear_JsonParser (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonParser (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonParser (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonParser (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31944 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 31958 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef enum {
  JSON_PATH_ERROR_INVALID_QUERY
} JsonPathError;
typedef struct _JsonPath JsonPath;
typedef struct _JsonPathClass JsonPathClass;
extern
GType json_path_get_type (void) __attribute__ ((__const__));
extern
GQuark json_path_error_quark (void);
extern
JsonPath * json_path_new (void);
extern
gboolean json_path_compile (JsonPath *path,
                                         const char *expression,
                                         GError **error);
extern
JsonNode * json_path_match (JsonPath *path,
                                         JsonNode *root);
extern
JsonNode * json_path_query (const char *expression,
                                         JsonNode *root,
                                         GError **error);

typedef JsonPath *JsonPath_autoptr; typedef GList *JsonPath_listautoptr; typedef GSList *JsonPath_slistautoptr; typedef GQueue *JsonPath_queueautoptr;
# 31981 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 31981 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31981 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonPath (JsonPath *_ptr) { if (_ptr) (g_object_unref) ((JsonPath *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonPath (JsonPath **_ptr) { glib_autoptr_clear_JsonPath (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonPath (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonPath (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonPath (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31981 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 31998 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _JsonReader JsonReader;
typedef struct _JsonReaderPrivate JsonReaderPrivate;
typedef struct _JsonReaderClass JsonReaderClass;
typedef enum {
  JSON_READER_ERROR_NO_ARRAY,
  JSON_READER_ERROR_INVALID_INDEX,
  JSON_READER_ERROR_NO_OBJECT,
  JSON_READER_ERROR_INVALID_MEMBER,
  JSON_READER_ERROR_INVALID_NODE,
  JSON_READER_ERROR_NO_VALUE,
  JSON_READER_ERROR_INVALID_TYPE
} JsonReaderError;
struct _JsonReader
{

  GObject parent_instance;
  JsonReaderPrivate *priv;
};
struct _JsonReaderClass
{

  GObjectClass parent_class;
  void (*_json_padding0) (void);
  void (*_json_padding1) (void);
  void (*_json_padding2) (void);
  void (*_json_padding3) (void);
  void (*_json_padding4) (void);
};
extern
GQuark json_reader_error_quark (void);
extern
GType json_reader_get_type (void) __attribute__ ((__const__));
extern
JsonReader * json_reader_new (JsonNode *node);
extern
void json_reader_set_root (JsonReader *reader,
                                                      JsonNode *root);
extern
const GError * json_reader_get_error (JsonReader *reader);
extern
gboolean json_reader_is_array (JsonReader *reader);
extern
gboolean json_reader_read_element (JsonReader *reader,
                                                      guint index_);
extern
void json_reader_end_element (JsonReader *reader);
extern
gint json_reader_count_elements (JsonReader *reader);
extern
gboolean json_reader_is_object (JsonReader *reader);
extern
gboolean json_reader_read_member (JsonReader *reader,
                                                      const gchar *member_name);
extern
void json_reader_end_member (JsonReader *reader);
extern
gint json_reader_count_members (JsonReader *reader);
extern
gchar ** json_reader_list_members (JsonReader *reader);
extern
const gchar * json_reader_get_member_name (JsonReader *reader);
extern
gboolean json_reader_is_value (JsonReader *reader);
extern
JsonNode * json_reader_get_value (JsonReader *reader);
extern
gint64 json_reader_get_int_value (JsonReader *reader);
extern
gdouble json_reader_get_double_value (JsonReader *reader);
extern
const gchar * json_reader_get_string_value (JsonReader *reader);
extern
gboolean json_reader_get_boolean_value (JsonReader *reader);
extern
gboolean json_reader_get_null_value (JsonReader *reader);
extern
JsonNode * json_reader_get_current_node (JsonReader *reader);

typedef JsonReader *JsonReader_autoptr; typedef GList *JsonReader_listautoptr; typedef GSList *JsonReader_slistautoptr; typedef GQueue *JsonReader_queueautoptr;
# 32076 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 32076 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 32076 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonReader (JsonReader *_ptr) { if (_ptr) (g_object_unref) ((JsonReader *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonReader (JsonReader **_ptr) { glib_autoptr_clear_JsonReader (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonReader (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonReader (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonReader (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 32076 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 32086 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
extern
JsonNode * json_from_string (const char *str,
                                         GError **error);
extern
char * json_to_string (JsonNode *node,
                                         gboolean pretty);
# 32100 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
extern
GType json_parser_error_get_type (void) __attribute__ ((__const__));

extern
GType json_path_error_get_type (void) __attribute__ ((__const__));

extern
GType json_reader_error_get_type (void) __attribute__ ((__const__));

extern
GType json_node_type_get_type (void) __attribute__ ((__const__));
# 32121 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
typedef struct _JsonSerializable JsonSerializable;
typedef struct _JsonSerializableIface JsonSerializableIface;
struct _JsonSerializableIface
{

  GTypeInterface g_iface;

  JsonNode *(* serialize_property) (JsonSerializable *serializable,
                                      const gchar *property_name,
                                      const GValue *value,
                                      GParamSpec *pspec);
  gboolean (* deserialize_property) (JsonSerializable *serializable,
                                      const gchar *property_name,
                                      GValue *value,
                                      GParamSpec *pspec,
                                      JsonNode *property_node);
  GParamSpec * (* find_property) (JsonSerializable *serializable,
                                        const char *name);
  GParamSpec **(* list_properties) (JsonSerializable *serializable,
                                        guint *n_pspecs);
  void (* set_property) (JsonSerializable *serializable,
                                        GParamSpec *pspec,
                                        const GValue *value);
  void (* get_property) (JsonSerializable *serializable,
                                        GParamSpec *pspec,
                                        GValue *value);
};
extern
GType json_serializable_get_type (void) __attribute__ ((__const__));
extern
JsonNode *json_serializable_serialize_property (JsonSerializable *serializable,
                                                          const gchar *property_name,
                                                          const GValue *value,
                                                          GParamSpec *pspec);
extern
gboolean json_serializable_deserialize_property (JsonSerializable *serializable,
                                                          const gchar *property_name,
                                                          GValue *value,
                                                          GParamSpec *pspec,
                                                          JsonNode *property_node);
extern
GParamSpec * json_serializable_find_property (JsonSerializable *serializable,
                                                         const char *name);
extern
GParamSpec ** json_serializable_list_properties (JsonSerializable *serializable,
                                                         guint *n_pspecs);
extern
void json_serializable_set_property (JsonSerializable *serializable,
                                                         GParamSpec *pspec,
                                                         const GValue *value);
extern
void json_serializable_get_property (JsonSerializable *serializable,
                                                         GParamSpec *pspec,
                                                         GValue *value);
extern
JsonNode *json_serializable_default_serialize_property (JsonSerializable *serializable,
                                                          const gchar *property_name,
                                                          const GValue *value,
                                                          GParamSpec *pspec);
extern
gboolean json_serializable_default_deserialize_property (JsonSerializable *serializable,
                                                          const gchar *property_name,
                                                          GValue *value,
                                                          GParamSpec *pspec,
                                                          JsonNode *property_node);
typedef JsonNode *(* JsonBoxedSerializeFunc) (gconstpointer boxed);
typedef gpointer (* JsonBoxedDeserializeFunc) (JsonNode *node);
extern
void json_boxed_register_serialize_func (GType gboxed_type,
                                                JsonNodeType node_type,
                                                JsonBoxedSerializeFunc serialize_func);
extern
void json_boxed_register_deserialize_func (GType gboxed_type,
                                                JsonNodeType node_type,
                                                JsonBoxedDeserializeFunc deserialize_func);
extern
gboolean json_boxed_can_serialize (GType gboxed_type,
                                                JsonNodeType *node_type);
extern
gboolean json_boxed_can_deserialize (GType gboxed_type,
                                                JsonNodeType node_type);
extern
JsonNode *json_boxed_serialize (GType gboxed_type,
                                                gconstpointer boxed);
extern
gpointer json_boxed_deserialize (GType gboxed_type,
                                                JsonNode *node);
extern
JsonNode *json_gobject_serialize (GObject *gobject);
extern
GObject * json_gobject_deserialize (GType gtype,
                                                JsonNode *node);
extern
GObject * json_gobject_from_data (GType gtype,
                                                const gchar *data,
                                                gssize length,
                                                GError **error);
extern
gchar * json_gobject_to_data (GObject *gobject,
                                                gsize *length);
__attribute__((__deprecated__("Use '" "json_gobject_from_data" "' instead"))) extern
GObject * json_construct_gobject (GType gtype,
                                                const gchar *data,
                                                gsize length,
                                                GError **error);
__attribute__((__deprecated__("Use '" "json_gobject_to_data" "' instead"))) extern
gchar * json_serialize_gobject (GObject *gobject,
                                                gsize *length) __attribute__ ((__malloc__));

typedef JsonSerializable *JsonSerializable_autoptr; typedef GList *JsonSerializable_listautoptr; typedef GSList *JsonSerializable_slistautoptr; typedef GQueue *JsonSerializable_queueautoptr;
# 32230 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic push
# 32230 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 32230 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_JsonSerializable (JsonSerializable *_ptr) { if (_ptr) (g_object_unref) ((JsonSerializable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_JsonSerializable (JsonSerializable **_ptr) { glib_autoptr_clear_JsonSerializable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_JsonSerializable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_JsonSerializable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_JsonSerializable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 32230 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
#pragma clang diagnostic pop
# 32240 "/Users/esmaeelmoustafa/Pdev/frida-kotlin-again/frida/src/main/cpp/frida-core.h"
extern
JsonNode * json_gvariant_serialize (GVariant *variant);
extern
gchar * json_gvariant_serialize_data (GVariant *variant,
                                           gsize *length);
extern
GVariant * json_gvariant_deserialize (JsonNode *json_node,
                                           const gchar *signature,
                                           GError **error);
extern
GVariant * json_gvariant_deserialize_data (const gchar *json,
                                           gssize length,
                                           const gchar *signature,
                                           GError **error);





typedef struct _FridaDeviceManager FridaDeviceManager;
typedef struct _FridaDeviceList FridaDeviceList;
typedef struct _FridaDevice FridaDevice;
typedef struct _FridaRemoteDeviceOptions FridaRemoteDeviceOptions;
typedef struct _FridaApplicationList FridaApplicationList;
typedef struct _FridaApplication FridaApplication;
typedef struct _FridaProcessList FridaProcessList;
typedef struct _FridaProcess FridaProcess;
typedef struct _FridaProcessMatchOptions FridaProcessMatchOptions;
typedef struct _FridaSpawnOptions FridaSpawnOptions;
typedef struct _FridaFrontmostQueryOptions FridaFrontmostQueryOptions;
typedef struct _FridaApplicationQueryOptions FridaApplicationQueryOptions;
typedef struct _FridaProcessQueryOptions FridaProcessQueryOptions;
typedef struct _FridaSessionOptions FridaSessionOptions;
typedef struct _FridaSpawnList FridaSpawnList;
typedef struct _FridaSpawn FridaSpawn;
typedef struct _FridaChildList FridaChildList;
typedef struct _FridaChild FridaChild;
typedef struct _FridaCrash FridaCrash;
typedef struct _FridaBus FridaBus;
typedef struct _FridaService FridaService;
typedef struct _FridaServiceIface FridaServiceIface;
typedef struct _FridaSession FridaSession;
typedef struct _FridaScript FridaScript;
typedef struct _FridaSnapshotOptions FridaSnapshotOptions;
typedef struct _FridaScriptOptions FridaScriptOptions;
typedef struct _FridaPeerOptions FridaPeerOptions;
typedef struct _FridaRelay FridaRelay;
typedef struct _FridaPortalOptions FridaPortalOptions;
typedef struct _FridaPortalMembership FridaPortalMembership;
typedef struct _FridaRpcClient FridaRpcClient;
typedef struct _FridaRpcPeer FridaRpcPeer;
typedef struct _FridaRpcPeerIface FridaRpcPeerIface;
typedef struct _FridaInjector FridaInjector;
typedef struct _FridaControlService FridaControlService;
typedef struct _FridaControlService FridaControlService;
typedef struct _FridaControlServiceOptions FridaControlServiceOptions;
typedef struct _FridaPortalService FridaPortalService;
typedef struct _FridaEndpointParameters FridaEndpointParameters;
typedef struct _FridaAuthenticationService FridaAuthenticationService;
typedef struct _FridaAuthenticationServiceIface FridaAuthenticationServiceIface;
typedef struct _FridaStaticAuthenticationService FridaStaticAuthenticationService;
typedef struct _FridaFileMonitor FridaFileMonitor;
typedef struct _FridaCompiler FridaCompiler;
typedef struct _FridaCompilerOptions FridaCompilerOptions;
typedef struct _FridaBuildOptions FridaBuildOptions;
typedef struct _FridaWatchOptions FridaWatchOptions;
typedef struct _FridaHostSession FridaHostSession;
typedef enum {
  FRIDA_RUNTIME_GLIB,
  FRIDA_RUNTIME_OTHER
} FridaRuntime;
typedef enum {
  FRIDA_DEVICE_TYPE_LOCAL,
  FRIDA_DEVICE_TYPE_REMOTE,
  FRIDA_DEVICE_TYPE_USB
} FridaDeviceType;
typedef enum {
  FRIDA_SOURCE_MAPS_INCLUDED,
  FRIDA_SOURCE_MAPS_OMITTED
} FridaSourceMaps;
typedef enum {
  FRIDA_JS_COMPRESSION_NONE,
  FRIDA_JS_COMPRESSION_TERSER
} FridaJsCompression;
typedef enum {
  FRIDA_AGENT_MESSAGE_KIND_SCRIPT = 1,
  FRIDA_AGENT_MESSAGE_KIND_DEBUGGER
} FridaAgentMessageKind;
typedef enum {
  FRIDA_CHILD_ORIGIN_FORK,
  FRIDA_CHILD_ORIGIN_EXEC,
  FRIDA_CHILD_ORIGIN_SPAWN
} FridaChildOrigin;
typedef enum {
  FRIDA_PEER_SETUP_ACTIVE,
  FRIDA_PEER_SETUP_PASSIVE,
  FRIDA_PEER_SETUP_ACTPASS,
  FRIDA_PEER_SETUP_HOLDCONN
} FridaPeerSetup;
typedef enum {
  FRIDA_PORT_CONFLICT_BEHAVIOR_FAIL,
  FRIDA_PORT_CONFLICT_BEHAVIOR_PICK_NEXT
} FridaPortConflictBehavior;
typedef enum {
  FRIDA_REALM_NATIVE,
  FRIDA_REALM_EMULATED
} FridaRealm;
typedef enum {
  FRIDA_RELAY_KIND_TURN_UDP,
  FRIDA_RELAY_KIND_TURN_TCP,
  FRIDA_RELAY_KIND_TURN_TLS
} FridaRelayKind;
typedef enum {
  FRIDA_SCOPE_MINIMAL,
  FRIDA_SCOPE_METADATA,
  FRIDA_SCOPE_FULL
} FridaScope;
typedef enum {
  FRIDA_SCRIPT_RUNTIME_DEFAULT,
  FRIDA_SCRIPT_RUNTIME_QJS,
  FRIDA_SCRIPT_RUNTIME_V8
} FridaScriptRuntime;
typedef enum {
  FRIDA_SESSION_DETACH_REASON_APPLICATION_REQUESTED = 1,
  FRIDA_SESSION_DETACH_REASON_PROCESS_REPLACED,
  FRIDA_SESSION_DETACH_REASON_PROCESS_TERMINATED,
  FRIDA_SESSION_DETACH_REASON_CONNECTION_TERMINATED,
  FRIDA_SESSION_DETACH_REASON_DEVICE_LOST
} FridaSessionDetachReason;
typedef enum {
  FRIDA_SNAPSHOT_TRANSPORT_INLINE,
  FRIDA_SNAPSHOT_TRANSPORT_SHARED_MEMORY
} FridaSnapshotTransport;
typedef enum {
  FRIDA_STDIO_INHERIT,
  FRIDA_STDIO_PIPE
} FridaStdio;
typedef enum {
  FRIDA_STRING_TERMINATOR_NONE,
  FRIDA_STRING_TERMINATOR_NUL
} FridaStringTerminator;
typedef enum {
  FRIDA_UNLOAD_POLICY_IMMEDIATE,
  FRIDA_UNLOAD_POLICY_RESIDENT,
  FRIDA_UNLOAD_POLICY_DEFERRED
} FridaUnloadPolicy;
typedef enum {
  FRIDA_WEB_SERVICE_FLAVOR_CONTROL,
  FRIDA_WEB_SERVICE_FLAVOR_CLUSTER
} FridaWebServiceFlavor;
typedef enum {
  FRIDA_WEB_SERVICE_TRANSPORT_PLAIN,
  FRIDA_WEB_SERVICE_TRANSPORT_TLS
} FridaWebServiceTransport;
void frida_init (void);
void frida_shutdown (void);
void frida_deinit (void);
GMainContext * frida_get_main_context (void);
void frida_unref (gpointer obj);
void frida_version (guint * major, guint * minor, guint * micro, guint * nano);
const gchar * frida_version_string (void);
typedef gboolean (* FridaDeviceManagerPredicate) (FridaDevice * device, gpointer user_data);
FridaDeviceManager * frida_device_manager_new (void);
void frida_device_manager_close (FridaDeviceManager * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_device_manager_close_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
void frida_device_manager_close_sync (FridaDeviceManager * self, GCancellable * cancellable, GError ** error);
void frida_device_manager_get_device_by_id (FridaDeviceManager * self, const gchar * id, gint timeout, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaDevice * frida_device_manager_get_device_by_id_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
FridaDevice * frida_device_manager_get_device_by_id_sync (FridaDeviceManager * self, const gchar * id, gint timeout, GCancellable * cancellable, GError ** error);
void frida_device_manager_get_device_by_type (FridaDeviceManager * self, FridaDeviceType type, gint timeout, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaDevice * frida_device_manager_get_device_by_type_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
FridaDevice * frida_device_manager_get_device_by_type_sync (FridaDeviceManager * self, FridaDeviceType type, gint timeout, GCancellable * cancellable, GError ** error);
void frida_device_manager_get_device (FridaDeviceManager * self, FridaDeviceManagerPredicate predicate, gpointer predicate_target, gint timeout, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaDevice * frida_device_manager_get_device_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
FridaDevice * frida_device_manager_get_device_sync (FridaDeviceManager * self, FridaDeviceManagerPredicate predicate, gpointer predicate_target, gint timeout, GCancellable * cancellable, GError ** error);
void frida_device_manager_find_device_by_id (FridaDeviceManager * self, const gchar * id, gint timeout, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaDevice * frida_device_manager_find_device_by_id_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
FridaDevice * frida_device_manager_find_device_by_id_sync (FridaDeviceManager * self, const gchar * id, gint timeout, GCancellable * cancellable, GError ** error);
void frida_device_manager_find_device_by_type (FridaDeviceManager * self, FridaDeviceType type, gint timeout, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaDevice * frida_device_manager_find_device_by_type_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
FridaDevice * frida_device_manager_find_device_by_type_sync (FridaDeviceManager * self, FridaDeviceType type, gint timeout, GCancellable * cancellable, GError ** error);
void frida_device_manager_find_device (FridaDeviceManager * self, FridaDeviceManagerPredicate predicate, gpointer predicate_target, gint timeout, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaDevice * frida_device_manager_find_device_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
FridaDevice * frida_device_manager_find_device_sync (FridaDeviceManager * self, FridaDeviceManagerPredicate predicate, gpointer predicate_target, gint timeout, GCancellable * cancellable, GError ** error);
void frida_device_manager_enumerate_devices (FridaDeviceManager * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaDeviceList * frida_device_manager_enumerate_devices_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
FridaDeviceList * frida_device_manager_enumerate_devices_sync (FridaDeviceManager * self, GCancellable * cancellable, GError ** error);
void frida_device_manager_add_remote_device (FridaDeviceManager * self, const gchar * address, FridaRemoteDeviceOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaDevice * frida_device_manager_add_remote_device_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
FridaDevice * frida_device_manager_add_remote_device_sync (FridaDeviceManager * self, const gchar * address, FridaRemoteDeviceOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_manager_remove_remote_device (FridaDeviceManager * self, const gchar * address, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_device_manager_remove_remote_device_finish (FridaDeviceManager * self, GAsyncResult * result, GError ** error);
void frida_device_manager_remove_remote_device_sync (FridaDeviceManager * self, const gchar * address, GCancellable * cancellable, GError ** error);
gint frida_device_list_size (FridaDeviceList * self);
FridaDevice * frida_device_list_get (FridaDeviceList * self, gint index);
typedef gboolean (* FridaDeviceProcessPredicate) (FridaProcess * process, gpointer user_data);
const gchar * frida_device_get_id (FridaDevice * self);
const gchar * frida_device_get_name (FridaDevice * self);
GVariant * frida_device_get_icon (FridaDevice * self);
FridaDeviceType frida_device_get_dtype (FridaDevice * self);
FridaBus * frida_device_get_bus (FridaDevice * self);
FridaDeviceManager * frida_device_get_manager (FridaDevice * self);
gboolean frida_device_is_lost (FridaDevice * self);
void frida_device_query_system_parameters (FridaDevice * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GHashTable * frida_device_query_system_parameters_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
GHashTable * frida_device_query_system_parameters_sync (FridaDevice * self, GCancellable * cancellable, GError ** error);
void frida_device_get_frontmost_application (FridaDevice * self, FridaFrontmostQueryOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaApplication * frida_device_get_frontmost_application_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaApplication * frida_device_get_frontmost_application_sync (FridaDevice * self, FridaFrontmostQueryOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_enumerate_applications (FridaDevice * self, FridaApplicationQueryOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaApplicationList * frida_device_enumerate_applications_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaApplicationList * frida_device_enumerate_applications_sync (FridaDevice * self, FridaApplicationQueryOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_get_process_by_pid (FridaDevice * self, guint pid, FridaProcessMatchOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaProcess * frida_device_get_process_by_pid_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaProcess * frida_device_get_process_by_pid_sync (FridaDevice * self, guint pid, FridaProcessMatchOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_get_process_by_name (FridaDevice * self, const gchar * name, FridaProcessMatchOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaProcess * frida_device_get_process_by_name_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaProcess * frida_device_get_process_by_name_sync (FridaDevice * self, const gchar * name, FridaProcessMatchOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_get_process (FridaDevice * self, FridaDeviceProcessPredicate predicate, gpointer predicate_target, FridaProcessMatchOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaProcess * frida_device_get_process_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaProcess * frida_device_get_process_sync (FridaDevice * self, FridaDeviceProcessPredicate predicate, gpointer predicate_target, FridaProcessMatchOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_find_process_by_pid (FridaDevice * self, guint pid, FridaProcessMatchOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaProcess * frida_device_find_process_by_pid_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaProcess * frida_device_find_process_by_pid_sync (FridaDevice * self, guint pid, FridaProcessMatchOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_find_process_by_name (FridaDevice * self, const gchar * name, FridaProcessMatchOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaProcess * frida_device_find_process_by_name_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaProcess * frida_device_find_process_by_name_sync (FridaDevice * self, const gchar * name, FridaProcessMatchOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_find_process (FridaDevice * self, FridaDeviceProcessPredicate predicate, gpointer predicate_target, FridaProcessMatchOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaProcess * frida_device_find_process_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaProcess * frida_device_find_process_sync (FridaDevice * self, FridaDeviceProcessPredicate predicate, gpointer predicate_target, FridaProcessMatchOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_enumerate_processes (FridaDevice * self, FridaProcessQueryOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaProcessList * frida_device_enumerate_processes_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaProcessList * frida_device_enumerate_processes_sync (FridaDevice * self, FridaProcessQueryOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_enable_spawn_gating (FridaDevice * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_device_enable_spawn_gating_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
void frida_device_enable_spawn_gating_sync (FridaDevice * self, GCancellable * cancellable, GError ** error);
void frida_device_disable_spawn_gating (FridaDevice * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_device_disable_spawn_gating_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
void frida_device_disable_spawn_gating_sync (FridaDevice * self, GCancellable * cancellable, GError ** error);
void frida_device_enumerate_pending_spawn (FridaDevice * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaSpawnList * frida_device_enumerate_pending_spawn_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaSpawnList * frida_device_enumerate_pending_spawn_sync (FridaDevice * self, GCancellable * cancellable, GError ** error);
void frida_device_enumerate_pending_children (FridaDevice * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaChildList * frida_device_enumerate_pending_children_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaChildList * frida_device_enumerate_pending_children_sync (FridaDevice * self, GCancellable * cancellable, GError ** error);
void frida_device_spawn (FridaDevice * self, const gchar * program, FridaSpawnOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
guint frida_device_spawn_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
guint frida_device_spawn_sync (FridaDevice * self, const gchar * program, FridaSpawnOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_input (FridaDevice * self, guint pid, GBytes * data, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_device_input_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
void frida_device_input_sync (FridaDevice * self, guint pid, GBytes * data, GCancellable * cancellable, GError ** error);
void frida_device_resume (FridaDevice * self, guint pid, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_device_resume_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
void frida_device_resume_sync (FridaDevice * self, guint pid, GCancellable * cancellable, GError ** error);
void frida_device_kill (FridaDevice * self, guint pid, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_device_kill_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
void frida_device_kill_sync (FridaDevice * self, guint pid, GCancellable * cancellable, GError ** error);
void frida_device_attach (FridaDevice * self, guint pid, FridaSessionOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaSession * frida_device_attach_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaSession * frida_device_attach_sync (FridaDevice * self, guint pid, FridaSessionOptions * options, GCancellable * cancellable, GError ** error);
void frida_device_inject_library_file (FridaDevice * self, guint pid, const gchar * path, const gchar * entrypoint, const gchar * data, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
guint frida_device_inject_library_file_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
guint frida_device_inject_library_file_sync (FridaDevice * self, guint pid, const gchar * path, const gchar * entrypoint, const gchar * data, GCancellable * cancellable, GError ** error);
void frida_device_inject_library_blob (FridaDevice * self, guint pid, GBytes * blob, const gchar * entrypoint, const gchar * data, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
guint frida_device_inject_library_blob_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
guint frida_device_inject_library_blob_sync (FridaDevice * self, guint pid, GBytes * blob, const gchar * entrypoint, const gchar * data, GCancellable * cancellable, GError ** error);
void frida_device_open_channel (FridaDevice * self, const gchar * address, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GIOStream * frida_device_open_channel_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
GIOStream * frida_device_open_channel_sync (FridaDevice * self, const gchar * address, GCancellable * cancellable, GError ** error);
void frida_device_open_service (FridaDevice * self, const gchar * address, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaService * frida_device_open_service_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaService * frida_device_open_service_sync (FridaDevice * self, const gchar * address, GCancellable * cancellable, GError ** error);
void frida_device_unpair (FridaDevice * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_device_unpair_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
void frida_device_unpair_sync (FridaDevice * self, GCancellable * cancellable, GError ** error);
void frida_device_get_host_session (FridaDevice * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaHostSession * frida_device_get_host_session_finish (FridaDevice * self, GAsyncResult * result, GError ** error);
FridaHostSession * frida_device_get_host_session_sync (FridaDevice * self, GCancellable * cancellable, GError ** error);
FridaRemoteDeviceOptions * frida_remote_device_options_new (void);
GTlsCertificate * frida_remote_device_options_get_certificate (FridaRemoteDeviceOptions * self);
const gchar * frida_remote_device_options_get_origin (FridaRemoteDeviceOptions * self);
const gchar * frida_remote_device_options_get_token (FridaRemoteDeviceOptions * self);
gint frida_remote_device_options_get_keepalive_interval (FridaRemoteDeviceOptions * self);
void frida_remote_device_options_set_certificate (FridaRemoteDeviceOptions * self, GTlsCertificate * value);
void frida_remote_device_options_set_origin (FridaRemoteDeviceOptions * self, const gchar * value);
void frida_remote_device_options_set_token (FridaRemoteDeviceOptions * self, const gchar * value);
void frida_remote_device_options_set_keepalive_interval (FridaRemoteDeviceOptions * self, gint value);
gint frida_application_list_size (FridaApplicationList * self);
FridaApplication * frida_application_list_get (FridaApplicationList * self, gint index);
const gchar * frida_application_get_identifier (FridaApplication * self);
const gchar * frida_application_get_name (FridaApplication * self);
guint frida_application_get_pid (FridaApplication * self);
GHashTable * frida_application_get_parameters (FridaApplication * self);
gint frida_process_list_size (FridaProcessList * self);
FridaProcess * frida_process_list_get (FridaProcessList * self, gint index);
guint frida_process_get_pid (FridaProcess * self);
const gchar * frida_process_get_name (FridaProcess * self);
GHashTable * frida_process_get_parameters (FridaProcess * self);
FridaProcessMatchOptions * frida_process_match_options_new (void);
gint frida_process_match_options_get_timeout (FridaProcessMatchOptions * self);
FridaScope frida_process_match_options_get_scope (FridaProcessMatchOptions * self);
void frida_process_match_options_set_timeout (FridaProcessMatchOptions * self, gint value);
void frida_process_match_options_set_scope (FridaProcessMatchOptions * self, FridaScope value);
FridaSpawnOptions * frida_spawn_options_new (void);
gchar ** frida_spawn_options_get_argv (FridaSpawnOptions * self, gint * result_length);
gchar ** frida_spawn_options_get_envp (FridaSpawnOptions * self, gint * result_length);
gchar ** frida_spawn_options_get_env (FridaSpawnOptions * self, gint * result_length);
const gchar * frida_spawn_options_get_cwd (FridaSpawnOptions * self);
FridaStdio frida_spawn_options_get_stdio (FridaSpawnOptions * self);
GHashTable * frida_spawn_options_get_aux (FridaSpawnOptions * self);
void frida_spawn_options_set_argv (FridaSpawnOptions * self, gchar ** value, gint value_length);
void frida_spawn_options_set_envp (FridaSpawnOptions * self, gchar ** value, gint value_length);
void frida_spawn_options_set_env (FridaSpawnOptions * self, gchar ** value, gint value_length);
void frida_spawn_options_set_cwd (FridaSpawnOptions * self, const gchar * value);
void frida_spawn_options_set_stdio (FridaSpawnOptions * self, FridaStdio value);
void frida_spawn_options_set_aux (FridaSpawnOptions * self, GHashTable * value);
FridaFrontmostQueryOptions * frida_frontmost_query_options_new (void);
FridaScope frida_frontmost_query_options_get_scope (FridaFrontmostQueryOptions * self);
void frida_frontmost_query_options_set_scope (FridaFrontmostQueryOptions * self, FridaScope value);
FridaApplicationQueryOptions * frida_application_query_options_new (void);
FridaScope frida_application_query_options_get_scope (FridaApplicationQueryOptions * self);
void frida_application_query_options_select_identifier (FridaApplicationQueryOptions * self, const gchar * identifier);
gboolean frida_application_query_options_has_selected_identifiers (FridaApplicationQueryOptions * self);
void frida_application_query_options_enumerate_selected_identifiers (FridaApplicationQueryOptions * self, GFunc func, gpointer user_data);
void frida_application_query_options_set_scope (FridaApplicationQueryOptions * self, FridaScope value);
FridaProcessQueryOptions * frida_process_query_options_new (void);
FridaScope frida_process_query_options_get_scope (FridaProcessQueryOptions * self);
void frida_process_query_options_select_pid (FridaProcessQueryOptions * self, guint pid);
gboolean frida_process_query_options_has_selected_pids (FridaProcessQueryOptions * self);
void frida_process_query_options_enumerate_selected_pids (FridaProcessQueryOptions * self, GFunc func, gpointer user_data);
void frida_process_query_options_set_scope (FridaProcessQueryOptions * self, FridaScope value);
FridaSessionOptions * frida_session_options_new (void);
FridaRealm frida_session_options_get_realm (FridaSessionOptions * self);
guint frida_session_options_get_persist_timeout (FridaSessionOptions * self);
const gchar * frida_session_options_get_emulated_agent_path (FridaSessionOptions * self);
void frida_session_options_set_realm (FridaSessionOptions * self, FridaRealm value);
void frida_session_options_set_persist_timeout (FridaSessionOptions * self, guint value);
void frida_session_options_set_emulated_agent_path (FridaSessionOptions * self, const gchar * value);
gint frida_spawn_list_size (FridaSpawnList * self);
FridaSpawn * frida_spawn_list_get (FridaSpawnList * self, gint index);
guint frida_spawn_get_pid (FridaSpawn * self);
const gchar * frida_spawn_get_identifier (FridaSpawn * self);
gint frida_child_list_size (FridaChildList * self);
FridaChild * frida_child_list_get (FridaChildList * self, gint index);
guint frida_child_get_pid (FridaChild * self);
guint frida_child_get_parent_pid (FridaChild * self);
FridaChildOrigin frida_child_get_origin (FridaChild * self);
const gchar * frida_child_get_identifier (FridaChild * self);
const gchar * frida_child_get_path (FridaChild * self);
gchar ** frida_child_get_argv (FridaChild * self, gint * result_length);
gchar ** frida_child_get_envp (FridaChild * self, gint * result_length);
guint frida_crash_get_pid (FridaCrash * self);
const gchar * frida_crash_get_process_name (FridaCrash * self);
const gchar * frida_crash_get_summary (FridaCrash * self);
const gchar * frida_crash_get_report (FridaCrash * self);
GHashTable * frida_crash_get_parameters (FridaCrash * self);
FridaDevice * frida_bus_get_device (FridaBus * self);
gboolean frida_bus_is_detached (FridaBus * self);
void frida_bus_attach (FridaBus * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_bus_attach_finish (FridaBus * self, GAsyncResult * result, GError ** error);
void frida_bus_attach_sync (FridaBus * self, GCancellable * cancellable, GError ** error);
void frida_bus_post (FridaBus * self, const gchar * json, GBytes * data);
struct _FridaServiceIface {
  GTypeInterface parent_iface;
  gboolean (* is_closed) (FridaService * self);
  void (* activate) (FridaService * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
  void (* activate_finish) (FridaService * self, GAsyncResult * result, GError ** error);
  void (* cancel) (FridaService * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
  void (* cancel_finish) (FridaService * self, GAsyncResult * result, GError ** error);
  void (* request) (FridaService * self, GVariant * parameters, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
  GVariant * (* request_finish) (FridaService * self, GAsyncResult * result, GError ** error);
};
gboolean frida_service_is_closed (FridaService * self);
void frida_service_activate (FridaService * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_service_activate_finish (FridaService * self, GAsyncResult * result, GError ** error);
void frida_service_activate_sync (FridaService * self, GCancellable * cancellable, GError ** error);
void frida_service_cancel (FridaService * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_service_cancel_finish (FridaService * self, GAsyncResult * result, GError ** error);
void frida_service_cancel_sync (FridaService * self, GCancellable * cancellable, GError ** error);
void frida_service_request (FridaService * self, GVariant * parameters, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant * frida_service_request_finish (FridaService * self, GAsyncResult * result, GError ** error);
GVariant * frida_service_request_sync (FridaService * self, GVariant * parameters, GCancellable * cancellable, GError ** error);
guint frida_session_get_pid (FridaSession * self);
guint frida_session_get_persist_timeout (FridaSession * self);
FridaDevice * frida_session_get_device (FridaSession * self);
gboolean frida_session_is_detached (FridaSession * self);
void frida_session_detach (FridaSession * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_session_detach_finish (FridaSession * self, GAsyncResult * result, GError ** error);
void frida_session_detach_sync (FridaSession * self, GCancellable * cancellable, GError ** error);
void frida_session_resume (FridaSession * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_session_resume_finish (FridaSession * self, GAsyncResult * result, GError ** error);
void frida_session_resume_sync (FridaSession * self, GCancellable * cancellable, GError ** error);
void frida_session_enable_child_gating (FridaSession * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_session_enable_child_gating_finish (FridaSession * self, GAsyncResult * result, GError ** error);
void frida_session_enable_child_gating_sync (FridaSession * self, GCancellable * cancellable, GError ** error);
void frida_session_disable_child_gating (FridaSession * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_session_disable_child_gating_finish (FridaSession * self, GAsyncResult * result, GError ** error);
void frida_session_disable_child_gating_sync (FridaSession * self, GCancellable * cancellable, GError ** error);
void frida_session_create_script (FridaSession * self, const gchar * source, FridaScriptOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaScript * frida_session_create_script_finish (FridaSession * self, GAsyncResult * result, GError ** error);
FridaScript * frida_session_create_script_sync (FridaSession * self, const gchar * source, FridaScriptOptions * options, GCancellable * cancellable, GError ** error);
void frida_session_create_script_from_bytes (FridaSession * self, GBytes * bytes, FridaScriptOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaScript * frida_session_create_script_from_bytes_finish (FridaSession * self, GAsyncResult * result, GError ** error);
FridaScript * frida_session_create_script_from_bytes_sync (FridaSession * self, GBytes * bytes, FridaScriptOptions * options, GCancellable * cancellable, GError ** error);
void frida_session_compile_script (FridaSession * self, const gchar * source, FridaScriptOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GBytes * frida_session_compile_script_finish (FridaSession * self, GAsyncResult * result, GError ** error);
GBytes * frida_session_compile_script_sync (FridaSession * self, const gchar * source, FridaScriptOptions * options, GCancellable * cancellable, GError ** error);
void frida_session_snapshot_script (FridaSession * self, const gchar * embed_script, FridaSnapshotOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
GBytes * frida_session_snapshot_script_finish (FridaSession * self, GAsyncResult * result, GError ** error);
GBytes * frida_session_snapshot_script_sync (FridaSession * self, const gchar * embed_script, FridaSnapshotOptions * options, GCancellable * cancellable, GError ** error);
void frida_session_setup_peer_connection (FridaSession * self, FridaPeerOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_session_setup_peer_connection_finish (FridaSession * self, GAsyncResult * result, GError ** error);
void frida_session_setup_peer_connection_sync (FridaSession * self, FridaPeerOptions * options, GCancellable * cancellable, GError ** error);
void frida_session_join_portal (FridaSession * self, const gchar * address, FridaPortalOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
FridaPortalMembership * frida_session_join_portal_finish (FridaSession * self, GAsyncResult * result, GError ** error);
FridaPortalMembership * frida_session_join_portal_sync (FridaSession * self, const gchar * address, FridaPortalOptions * options, GCancellable * cancellable, GError ** error);
gboolean frida_script_is_destroyed (FridaScript * self);
void frida_script_load (FridaScript * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_script_load_finish (FridaScript * self, GAsyncResult * result, GError ** error);
void frida_script_load_sync (FridaScript * self, GCancellable * cancellable, GError ** error);
void frida_script_unload (FridaScript * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_script_unload_finish (FridaScript * self, GAsyncResult * result, GError ** error);
void frida_script_unload_sync (FridaScript * self, GCancellable * cancellable, GError ** error);
void frida_script_eternalize (FridaScript * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_script_eternalize_finish (FridaScript * self, GAsyncResult * result, GError ** error);
void frida_script_eternalize_sync (FridaScript * self, GCancellable * cancellable, GError ** error);
void frida_script_post (FridaScript * self, const gchar * json, GBytes * data);
void frida_script_enable_debugger (FridaScript * self, guint16 port, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_script_enable_debugger_finish (FridaScript * self, GAsyncResult * result, GError ** error);
void frida_script_enable_debugger_sync (FridaScript * self, guint16 port, GCancellable * cancellable, GError ** error);
void frida_script_disable_debugger (FridaScript * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_script_disable_debugger_finish (FridaScript * self, GAsyncResult * result, GError ** error);
void frida_script_disable_debugger_sync (FridaScript * self, GCancellable * cancellable, GError ** error);
FridaSnapshotOptions * frida_snapshot_options_new (void);
const gchar * frida_snapshot_options_get_warmup_script (FridaSnapshotOptions * self);
FridaScriptRuntime frida_snapshot_options_get_runtime (FridaSnapshotOptions * self);
void frida_snapshot_options_set_warmup_script (FridaSnapshotOptions * self, const gchar * value);
void frida_snapshot_options_set_runtime (FridaSnapshotOptions * self, FridaScriptRuntime value);
FridaScriptOptions * frida_script_options_new (void);
const gchar * frida_script_options_get_name (FridaScriptOptions * self);
GBytes * frida_script_options_get_snapshot (FridaScriptOptions * self);
FridaSnapshotTransport frida_script_options_get_snapshot_transport (FridaScriptOptions * self);
FridaScriptRuntime frida_script_options_get_runtime (FridaScriptOptions * self);
void frida_script_options_set_name (FridaScriptOptions * self, const gchar * value);
void frida_script_options_set_snapshot (FridaScriptOptions * self, GBytes * value);
void frida_script_options_set_snapshot_transport (FridaScriptOptions * self, FridaSnapshotTransport value);
void frida_script_options_set_runtime (FridaScriptOptions * self, FridaScriptRuntime value);
FridaPeerOptions * frida_peer_options_new (void);
const gchar * frida_peer_options_get_stun_server (FridaPeerOptions * self);
void frida_peer_options_clear_relays (FridaPeerOptions * self);
void frida_peer_options_add_relay (FridaPeerOptions * self, FridaRelay * relay);
void frida_peer_options_enumerate_relays (FridaPeerOptions * self, GFunc func, gpointer user_data);
void frida_peer_options_set_stun_server (FridaPeerOptions * self, const gchar * value);
FridaRelay * frida_relay_new (const gchar * address, const gchar * username, const gchar * password, FridaRelayKind kind);
const gchar * frida_relay_get_address (FridaRelay * self);
const gchar * frida_relay_get_username (FridaRelay * self);
const gchar * frida_relay_get_password (FridaRelay * self);
FridaRelayKind frida_relay_get_kind (FridaRelay * self);
FridaPortalOptions * frida_portal_options_new (void);
GTlsCertificate * frida_portal_options_get_certificate (FridaPortalOptions * self);
const gchar * frida_portal_options_get_token (FridaPortalOptions * self);
gchar ** frida_portal_options_get_acl (FridaPortalOptions * self, gint * result_length);
void frida_portal_options_set_certificate (FridaPortalOptions * self, GTlsCertificate * value);
void frida_portal_options_set_token (FridaPortalOptions * self, const gchar * value);
void frida_portal_options_set_acl (FridaPortalOptions * self, gchar ** value, gint value_length);
guint frida_portal_membership_get_id (FridaPortalMembership * self);
void frida_portal_membership_terminate (FridaPortalMembership * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_portal_membership_terminate_finish (FridaPortalMembership * self, GAsyncResult * result, GError ** error);
void frida_portal_membership_terminate_sync (FridaPortalMembership * self, GCancellable * cancellable, GError ** error);
FridaRpcClient * frida_rpc_client_new (FridaRpcPeer * peer);
FridaRpcPeer * frida_rpc_client_get_peer (FridaRpcClient * self);
void frida_rpc_client_call (FridaRpcClient * self, const gchar * method, JsonNode ** args, gint args_length, GBytes * data, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
JsonNode * frida_rpc_client_call_finish (FridaRpcClient * self, GAsyncResult * result, GError ** error);
gboolean frida_rpc_client_try_handle_message (FridaRpcClient * self, const gchar * json);
struct _FridaRpcPeerIface {
  GTypeInterface parent_iface;
  void (* post_rpc_message) (FridaRpcPeer * self, const gchar * json, GBytes * data, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
  void (* post_rpc_message_finish) (FridaRpcPeer * self, GAsyncResult * result, GError ** error);
};
void frida_rpc_peer_post_rpc_message (FridaRpcPeer * self, const gchar * json, GBytes * data, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_rpc_peer_post_rpc_message_finish (FridaRpcPeer * self, GAsyncResult * result, GError ** error);
FridaInjector * frida_injector_new (void);
FridaInjector * frida_injector_new_inprocess (void);
void frida_injector_close (FridaInjector * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_injector_close_finish (FridaInjector * self, GAsyncResult * result, GError ** error);
void frida_injector_close_sync (FridaInjector * self, GCancellable * cancellable, GError ** error);
void frida_injector_inject_library_file (FridaInjector * self, guint pid, const gchar * path, const gchar * entrypoint, const gchar * data, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
guint frida_injector_inject_library_file_finish (FridaInjector * self, GAsyncResult * result, GError ** error);
guint frida_injector_inject_library_file_sync (FridaInjector * self, guint pid, const gchar * path, const gchar * entrypoint, const gchar * data, GCancellable * cancellable, GError ** error);
void frida_injector_inject_library_blob (FridaInjector * self, guint pid, GBytes * blob, const gchar * entrypoint, const gchar * data, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
guint frida_injector_inject_library_blob_finish (FridaInjector * self, GAsyncResult * result, GError ** error);
guint frida_injector_inject_library_blob_sync (FridaInjector * self, guint pid, GBytes * blob, const gchar * entrypoint, const gchar * data, GCancellable * cancellable, GError ** error);
void frida_injector_demonitor (FridaInjector * self, guint id, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_injector_demonitor_finish (FridaInjector * self, GAsyncResult * result, GError ** error);
void frida_injector_demonitor_sync (FridaInjector * self, guint id, GCancellable * cancellable, GError ** error);
void frida_injector_demonitor_and_clone_state (FridaInjector * self, guint id, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
guint frida_injector_demonitor_and_clone_state_finish (FridaInjector * self, GAsyncResult * result, GError ** error);
guint frida_injector_demonitor_and_clone_state_sync (FridaInjector * self, guint id, GCancellable * cancellable, GError ** error);
void frida_injector_recreate_thread (FridaInjector * self, guint pid, guint id, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_injector_recreate_thread_finish (FridaInjector * self, GAsyncResult * result, GError ** error);
void frida_injector_recreate_thread_sync (FridaInjector * self, guint pid, guint id, GCancellable * cancellable, GError ** error);
FridaControlService * frida_control_service_new (FridaEndpointParameters * endpoint_params, FridaControlServiceOptions * options);
FridaControlService * frida_control_service_new_with_host_session (FridaHostSession * host_session, FridaEndpointParameters * endpoint_params, FridaControlServiceOptions * options);
FridaHostSession * frida_control_service_get_host_session (FridaControlService * self);
FridaEndpointParameters * frida_control_service_get_endpoint_params (FridaControlService * self);
FridaControlServiceOptions * frida_control_service_get_options (FridaControlService * self);
void frida_control_service_start (FridaControlService * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_control_service_start_finish (FridaControlService * self, GAsyncResult * result, GError ** error);
void frida_control_service_start_sync (FridaControlService * self, GCancellable * cancellable, GError ** error);
void frida_control_service_stop (FridaControlService * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_control_service_stop_finish (FridaControlService * self, GAsyncResult * result, GError ** error);
void frida_control_service_stop_sync (FridaControlService * self, GCancellable * cancellable, GError ** error);
FridaControlServiceOptions * frida_control_service_options_new (void);
const gchar * frida_control_service_options_get_sysroot (FridaControlServiceOptions * self);
gboolean frida_control_service_options_get_enable_preload (FridaControlServiceOptions * self);
gboolean frida_control_service_options_get_report_crashes (FridaControlServiceOptions * self);
void frida_control_service_options_set_sysroot (FridaControlServiceOptions * self, const gchar * value);
void frida_control_service_options_set_enable_preload (FridaControlServiceOptions * self, gboolean value);
void frida_control_service_options_set_report_crashes (FridaControlServiceOptions * self, gboolean value);
FridaPortalService * frida_portal_service_new (FridaEndpointParameters * cluster_params, FridaEndpointParameters * control_params);
FridaDevice * frida_portal_service_get_device (FridaPortalService * self);
FridaEndpointParameters * frida_portal_service_get_cluster_params (FridaPortalService * self);
FridaEndpointParameters * frida_portal_service_get_control_params (FridaPortalService * self);
void frida_portal_service_start (FridaPortalService * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_portal_service_start_finish (FridaPortalService * self, GAsyncResult * result, GError ** error);
void frida_portal_service_start_sync (FridaPortalService * self, GCancellable * cancellable, GError ** error);
void frida_portal_service_stop (FridaPortalService * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_portal_service_stop_finish (FridaPortalService * self, GAsyncResult * result, GError ** error);
void frida_portal_service_stop_sync (FridaPortalService * self, GCancellable * cancellable, GError ** error);
void frida_portal_service_kick (FridaPortalService * self, guint connection_id);
void frida_portal_service_post (FridaPortalService * self, guint connection_id, const gchar * json, GBytes * data);
void frida_portal_service_narrowcast (FridaPortalService * self, const gchar * tag, const gchar * json, GBytes * data);
void frida_portal_service_broadcast (FridaPortalService * self, const gchar * json, GBytes * data);
gchar ** frida_portal_service_enumerate_tags (FridaPortalService * self, guint connection_id, gint * result_length);
void frida_portal_service_tag (FridaPortalService * self, guint connection_id, const gchar * tag);
void frida_portal_service_untag (FridaPortalService * self, guint connection_id, const gchar * tag);
FridaEndpointParameters * frida_endpoint_parameters_new (const gchar * address, guint16 port, GTlsCertificate * certificate, const gchar * origin, FridaAuthenticationService * auth_service, GFile * asset_root);
const gchar * frida_endpoint_parameters_get_address (FridaEndpointParameters * self);
guint16 frida_endpoint_parameters_get_port (FridaEndpointParameters * self);
GTlsCertificate * frida_endpoint_parameters_get_certificate (FridaEndpointParameters * self);
const gchar * frida_endpoint_parameters_get_origin (FridaEndpointParameters * self);
FridaAuthenticationService * frida_endpoint_parameters_get_auth_service (FridaEndpointParameters * self);
GFile * frida_endpoint_parameters_get_asset_root (FridaEndpointParameters * self);
void frida_endpoint_parameters_set_asset_root (FridaEndpointParameters * self, GFile * value);
struct _FridaAuthenticationServiceIface {
  GTypeInterface parent_iface;
  void (* authenticate) (FridaAuthenticationService * self, const gchar * token, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
  gchar * (* authenticate_finish) (FridaAuthenticationService * self, GAsyncResult * result, GError ** error);
};
void frida_authentication_service_authenticate (FridaAuthenticationService * self, const gchar * token, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gchar * frida_authentication_service_authenticate_finish (FridaAuthenticationService * self, GAsyncResult * result, GError ** error);
FridaStaticAuthenticationService * frida_static_authentication_service_new (const gchar * token);
const gchar * frida_static_authentication_service_get_token_hash (FridaStaticAuthenticationService * self);
FridaFileMonitor * frida_file_monitor_new (const gchar * path);
const gchar * frida_file_monitor_get_path (FridaFileMonitor * self);
void frida_file_monitor_enable (FridaFileMonitor * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_file_monitor_enable_finish (FridaFileMonitor * self, GAsyncResult * result, GError ** error);
void frida_file_monitor_enable_sync (FridaFileMonitor * self, GCancellable * cancellable, GError ** error);
void frida_file_monitor_disable (FridaFileMonitor * self, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_file_monitor_disable_finish (FridaFileMonitor * self, GAsyncResult * result, GError ** error);
void frida_file_monitor_disable_sync (FridaFileMonitor * self, GCancellable * cancellable, GError ** error);
FridaCompiler * frida_compiler_new (FridaDeviceManager * manager);
FridaDeviceManager * frida_compiler_get_manager (FridaCompiler * self);
void frida_compiler_build (FridaCompiler * self, const gchar * entrypoint, FridaBuildOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
gchar * frida_compiler_build_finish (FridaCompiler * self, GAsyncResult * result, GError ** error);
gchar * frida_compiler_build_sync (FridaCompiler * self, const gchar * entrypoint, FridaBuildOptions * options, GCancellable * cancellable, GError ** error);
void frida_compiler_watch (FridaCompiler * self, const gchar * entrypoint, FridaWatchOptions * options, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data);
void frida_compiler_watch_finish (FridaCompiler * self, GAsyncResult * result, GError ** error);
void frida_compiler_watch_sync (FridaCompiler * self, const gchar * entrypoint, FridaWatchOptions * options, GCancellable * cancellable, GError ** error);
FridaCompilerOptions * frida_compiler_options_new (void);
const gchar * frida_compiler_options_get_project_root (FridaCompilerOptions * self);
FridaSourceMaps frida_compiler_options_get_source_maps (FridaCompilerOptions * self);
FridaJsCompression frida_compiler_options_get_compression (FridaCompilerOptions * self);
void frida_compiler_options_set_project_root (FridaCompilerOptions * self, const gchar * value);
void frida_compiler_options_set_source_maps (FridaCompilerOptions * self, FridaSourceMaps value);
void frida_compiler_options_set_compression (FridaCompilerOptions * self, FridaJsCompression value);
FridaBuildOptions * frida_build_options_new (void);
FridaWatchOptions * frida_watch_options_new (void);
GQuark frida_error_quark (void);
typedef enum {
  FRIDA_ERROR_SERVER_NOT_RUNNING,
  FRIDA_ERROR_EXECUTABLE_NOT_FOUND,
  FRIDA_ERROR_EXECUTABLE_NOT_SUPPORTED,
  FRIDA_ERROR_PROCESS_NOT_FOUND,
  FRIDA_ERROR_PROCESS_NOT_RESPONDING,
  FRIDA_ERROR_INVALID_ARGUMENT,
  FRIDA_ERROR_INVALID_OPERATION,
  FRIDA_ERROR_PERMISSION_DENIED,
  FRIDA_ERROR_ADDRESS_IN_USE,
  FRIDA_ERROR_TIMED_OUT,
  FRIDA_ERROR_NOT_SUPPORTED,
  FRIDA_ERROR_PROTOCOL,
  FRIDA_ERROR_TRANSPORT
} FridaError;
GType frida_runtime_get_type (void) __attribute__ ((__const__));
GType frida_device_type_get_type (void) __attribute__ ((__const__));
GType frida_source_maps_get_type (void) __attribute__ ((__const__));
GType frida_js_compression_get_type (void) __attribute__ ((__const__));
GType frida_agent_message_kind_get_type (void) __attribute__ ((__const__));
GType frida_child_origin_get_type (void) __attribute__ ((__const__));
GType frida_peer_setup_get_type (void) __attribute__ ((__const__));
GType frida_port_conflict_behavior_get_type (void) __attribute__ ((__const__));
GType frida_realm_get_type (void) __attribute__ ((__const__));
GType frida_relay_kind_get_type (void) __attribute__ ((__const__));
GType frida_scope_get_type (void) __attribute__ ((__const__));
GType frida_script_runtime_get_type (void) __attribute__ ((__const__));
GType frida_session_detach_reason_get_type (void) __attribute__ ((__const__));
GType frida_snapshot_transport_get_type (void) __attribute__ ((__const__));
GType frida_stdio_get_type (void) __attribute__ ((__const__));
GType frida_string_terminator_get_type (void) __attribute__ ((__const__));
GType frida_unload_policy_get_type (void) __attribute__ ((__const__));
GType frida_web_service_flavor_get_type (void) __attribute__ ((__const__));
GType frida_web_service_transport_get_type (void) __attribute__ ((__const__));
GType frida_device_manager_get_type (void) __attribute__ ((__const__));
GType frida_device_list_get_type (void) __attribute__ ((__const__));
GType frida_device_get_type (void) __attribute__ ((__const__));
GType frida_remote_device_options_get_type (void) __attribute__ ((__const__));
GType frida_application_list_get_type (void) __attribute__ ((__const__));
GType frida_application_get_type (void) __attribute__ ((__const__));
GType frida_process_list_get_type (void) __attribute__ ((__const__));
GType frida_process_get_type (void) __attribute__ ((__const__));
GType frida_process_match_options_get_type (void) __attribute__ ((__const__));
GType frida_spawn_options_get_type (void) __attribute__ ((__const__));
GType frida_frontmost_query_options_get_type (void) __attribute__ ((__const__));
GType frida_application_query_options_get_type (void) __attribute__ ((__const__));
GType frida_process_query_options_get_type (void) __attribute__ ((__const__));
GType frida_session_options_get_type (void) __attribute__ ((__const__));
GType frida_spawn_list_get_type (void) __attribute__ ((__const__));
GType frida_spawn_get_type (void) __attribute__ ((__const__));
GType frida_child_list_get_type (void) __attribute__ ((__const__));
GType frida_child_get_type (void) __attribute__ ((__const__));
GType frida_crash_get_type (void) __attribute__ ((__const__));
GType frida_bus_get_type (void) __attribute__ ((__const__));
GType frida_service_get_type (void) __attribute__ ((__const__));
GType frida_session_get_type (void) __attribute__ ((__const__));
GType frida_script_get_type (void) __attribute__ ((__const__));
GType frida_snapshot_options_get_type (void) __attribute__ ((__const__));
GType frida_script_options_get_type (void) __attribute__ ((__const__));
GType frida_peer_options_get_type (void) __attribute__ ((__const__));
GType frida_relay_get_type (void) __attribute__ ((__const__));
GType frida_portal_options_get_type (void) __attribute__ ((__const__));
GType frida_portal_membership_get_type (void) __attribute__ ((__const__));
GType frida_rpc_client_get_type (void) __attribute__ ((__const__));
GType frida_rpc_peer_get_type (void) __attribute__ ((__const__));
GType frida_injector_get_type (void) __attribute__ ((__const__));
GType frida_control_service_get_type (void) __attribute__ ((__const__));
GType frida_control_service_options_get_type (void) __attribute__ ((__const__));
GType frida_portal_service_get_type (void) __attribute__ ((__const__));
GType frida_endpoint_parameters_get_type (void) __attribute__ ((__const__));
GType frida_authentication_service_get_type (void) __attribute__ ((__const__));
GType frida_static_authentication_service_get_type (void) __attribute__ ((__const__));
GType frida_file_monitor_get_type (void) __attribute__ ((__const__));
GType frida_compiler_get_type (void) __attribute__ ((__const__));
GType frida_compiler_options_get_type (void) __attribute__ ((__const__));
GType frida_build_options_get_type (void) __attribute__ ((__const__));
GType frida_watch_options_get_type (void) __attribute__ ((__const__));
